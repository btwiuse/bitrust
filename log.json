[
  {
    "hash": "cc722a4dd3e8110a8bf7e62eea977e99e3a3d128",
    "author": "bors",
    "date": 1425518355,
    "message": "Auto merge of #22873 - alexcrichton:deprecate-fs, r=aturon\n\nThis commit deprecates the majority of std::old_io::fs in favor of std::fs and\r\nits new functionality. Some functions remain non-deprecated but are now behind a\r\nfeature gate called `old_fs`. These functions will be deprecated once\r\nsuitable replacements have been implemented.\r\n\r\nThe compiler has been migrated to new `std::fs` and `std::path` APIs where\r\nappropriate as part of this change.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "cdfff9db35d037c51dfd5c2bac2174f651294adb",
    "author": "Corey Richardson",
    "date": 1425380947,
    "message": "rustc: implement arithmetic overflow checking\n\nAdds overflow checking to integer addition, multiplication, and subtraction\nwhen `-Z force-overflow-checks` is true, or if `--cfg ndebug` is not passed to\nthe compiler. On overflow, it panics with `arithmetic operation overflowed`.\nAlso adds `overflowing_add`, `overflowing_sub`, and `overflowing_mul`\nintrinsics for doing unchecked arithmetic.\n\n[breaking-change]"
  },
  {
    "hash": "393ce1820e3f639b43d6058d2681b9757123ac1b",
    "author": "Manish Goregaokar",
    "date": 1425382340,
    "message": "Rollup merge of #22876 - Florob:const, r=nikomatsakis\n\n This changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "f35f973cb700c444d8c029ee13b37dc16d560225",
    "author": "Florian Zeitz",
    "date": 1425312711,
    "message": "Use `const`s instead of `static`s where appropriate\n\nThis changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "d0fcb1f53c9f81fbcae5379dd1c0577a8605172c",
    "author": "Manish Goregaokar",
    "date": 1425382276,
    "message": "Rollup merge of #22990 - japaric:privATe, r=alexcrichton\n\n Associated types are now treated as part of the public API by the privacy checker.\n\nIf you were exposing a private type in your public API via an associated type, make that type public:\n\n``` diff\n  pub struct PublicType { .. }\n\n- struct Struct { .. }\n+ pub struct Struct { .. }\n\n  pub trait PublicTrait {\n      type Output;\n\n      fn foo(&self) -> Self::Output;\n  }\n\n  impl PublicTrait for PublicType {\n      type Output = Struct;\n\n      fn foo(&self) -> Struct {  // `Struct` is part of the public API, it must be marked as `pub`lic\n          ..\n      }\n  }\n```\n\n[breaking-change]\n\n---\n\nr? @nikomatsakis\ncloses #22912"
  },
  {
    "hash": "3b30b74692cfee533b45e0380591d237975ec215",
    "author": "Manish Goregaokar",
    "date": 1425382275,
    "message": "Rollup merge of #22943 - ipetkov:lint-recursion, r=alexcrichton\n\n * The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]\n\nI had originally intended for the lint to ignore uses of deprecated items that are declared in the same crate, but this goes against some previous test cases that expect the lint to capture *all* uses of deprecated items, so I maintained the previous approach to avoid changing the expected behavior of the lint.\n\nTested locally on OS X, so hopefully there aren't any deprecated item uses behind a `cfg` that I may have missed."
  },
  {
    "hash": "2b03718618d66e7e672663230be1ee857d3fb89a",
    "author": "Ivan Petkov",
    "date": 1425339348,
    "message": "Enable recursion for visit_ty in lint visitor\n\n* The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Disabled the `exceeding_bitshifts` lint for\n  compile-fail/huge-array-simple test so it doesn't shadow the expected\n  error on 32bit systems\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]"
  },
  {
    "hash": "76e9fa63ba0b6d892aa880db9c8373ede3e67c03",
    "author": "Brian Anderson",
    "date": 1425341566,
    "message": "core: Audit num module for int/uint\n\n* count_ones/zeros, trailing_ones/zeros return u32, not usize\n* rotate_left/right take u32, not usize\n* RADIX, MANTISSA_DIGITS, DIGITS, BITS, BYTES are u32, not usize\n\nDoesn't touch pow because there's another PR for it.\n\n[breaking-change]"
  },
  {
    "hash": "93613a543f0cae68ea82e6a66b9b9cdfa13b673e",
    "author": "Alex Crichton",
    "date": 1425271297,
    "message": "std: Stabilize the `process` module\n\nThis commits blanket marks the API of the `std::process` module as `#[stable]`.\nThe module's API is very similar to the old `std::old_io::process` API and has\ngenerally had quite a bit of time to bake both before and after the new module\nlanded.\n\nThe one modification made to the API is that `Stdio::capture` is now named\n`stdio::piped`.\n\n[breaking-change]"
  },
  {
    "hash": "ef8b20a564bab2050403f2f5c1dab90e0941adf7",
    "author": "Manish Goregaokar",
    "date": 1425248634,
    "message": "Rollup merge of #22821 - ipetkov:lint-method-rename, r=eddyb\n\n Traits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "2fc62244113d01e9524ed712210ba52e8471e2a9",
    "author": "Ivan Petkov",
    "date": 1425160597,
    "message": "Rename LintPass::check_trait_method to check_trait_item\n\nTraits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "157614249594f187f421cd97f928e64c5ab5c1fa",
    "author": "bors",
    "date": 1425219778,
    "message": "Auto merge of #22880 - alexcrichton:deprecate-io-extensions, r=huonw\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\r\nwith no replacement for now.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "d79e91033770fc5a760d34511769f5ba6c872c77",
    "author": "Alex Crichton",
    "date": 1425083193,
    "message": "std: Deprecated the `old_io::extensions` module\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\nwith no replacement for now.\n\n[breaking-change]"
  },
  {
    "hash": "d9fb9765a13d44f051cae9a9a7d010621b8e42cb",
    "author": "Manish Goregaokar",
    "date": 1425183588,
    "message": "Rollup merge of #22907 - dotdash:static_assert_bool, r=eddyb\n\n static_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "d11b48c85c1cceb559ab8a08815ba3f7b3312c44",
    "author": "Bj√∂rn Steinbrink",
    "date": 1425148129,
    "message": "Error out when using static_assert on a non-boolean value\n\nstatic_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "040a811b9190d2c2c595e09b5d1db07bedffdde9",
    "author": "Manish Goregaokar",
    "date": 1425131340,
    "message": "Rollup merge of #22884 - japaric:obsolete, r=alexcrichton\n\n This is leftover from #21843\n\nIf you still have `|&:| {}` closures in your code, simply remove the `&:` part.\n\n[breaking-change]"
  },
  {
    "hash": "37760c1f25fc55814a92cce1c98edefdc0740188",
    "author": "Manish Goregaokar",
    "date": 1425131339,
    "message": "Rollup merge of #22875 - kmcallister:maceager, r=sfackler\n\n MacEager is a MacResult implementation for the common case where you've already built each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator.\n\nr? @sfackler"
  },
  {
    "hash": "f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad",
    "author": "Keegan McAllister",
    "date": 1425064625,
    "message": "Replace MacExpr / MacPat / MacItems with MacEager\n\nMacEager is a MacResult implementation for the common case where you've already\nbuilt each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator."
  },
  {
    "hash": "48aeaba9347a25b2e3848e0dcbc1d8f6b0076718",
    "author": "bors",
    "date": 1425103578,
    "message": "Auto merge of #22801 - huonw:crateify-lint, r=kmcallister\n\nThis pulls out the implementations of most built-in lints into a\r\nseparate crate, to reduce edit-compile-test iteration times with\r\nlibrustc_lint and increase parallelism. This should enable lints to be\r\nrefactored, added and deleted much more easily as it slashes the\r\nedit-compile cycle to get a minimal working compiler to test with (`make\r\nrustc-stage1`) from\r\n\r\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\r\n        libcore -> ... -> libstd\r\n\r\nto\r\n\r\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\r\n\r\nwhich is significantly faster, mainly due to avoiding the librustc build\r\nitself.\r\n\r\nThe intention would be to move as much as possible of the infrastructure\r\ninto the crate too, but the plumbing is deeply intertwined with librustc\r\nitself at the moment. Also, there are lints for which diagnostics are\r\nregistered directly in the compiler code, not in their own crate\r\ntraversal, and their definitions have to remain in librustc.\r\n\r\nThis is a [breaking-change] for direct users of the compiler APIs:\r\ncallers of `rustc::session::build_session` or\r\n`rustc::session::build_session_` need to manually call\r\n`rustc_lint::register_builtins` on their return value.\r\n\r\nThis should make #22206 easier."
  },
  {
    "hash": "532cd5f85a93921f74f5991db2e419c6da58b188",
    "author": "Huon Wilson",
    "date": 1425098039,
    "message": "Separate most of rustc::lint::builtin into a separate crate.\n\nThis pulls out the implementations of most built-in lints into a\nseparate crate, to reduce edit-compile-test iteration times with\nlibrustc_lint and increase parallelism. This should enable lints to be\nrefactored, added and deleted much more easily as it slashes the\nedit-compile cycle to get a minimal working compiler to test with (`make\nrustc-stage1`) from\n\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\n        libcore -> ... -> libstd\n\nto\n\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\n\nwhich is significantly faster, mainly due to avoiding the librustc build\nitself.\n\nThe intention would be to move as much as possible of the infrastructure\ninto the crate too, but the plumbing is deeply intertwined with librustc\nitself at the moment. Also, there are lints for which diagnostics are\nregistered directly in the compiler code, not in their own crate\ntraversal, and their definitions have to remain in librustc.\n\nThis is a [breaking-change] for direct users of the compiler APIs:\ncallers of `rustc::session::build_session` or\n`rustc::session::build_session_` need to manually call\n`rustc_lint::register_builtins` on their return value.\n\nThis should make #22206 easier."
  },
  {
    "hash": "ce5f1b3216be790be590ad71eabccc16c9b86c74",
    "author": "Manish Goregaokar",
    "date": 1425055023,
    "message": "Rollup merge of #22817 - jmesmon:result-or-type, r=huonw\n\n Changes .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` & `or_else`\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "07dc8d67c92017f950eef3951ec901cb2a3add7e",
    "author": "Cody P Schafer",
    "date": 1424903908,
    "message": "Result::or : avoid over-specializing the type\n\nChanges .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` and `or_else` member\ntypes.\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "91569a95f16580f05f9dcb4b6d6eff50203cdde8",
    "author": "Manish Goregaokar",
    "date": 1425055022,
    "message": "Rollup merge of #22795 - alexcrichton:issue-22617, r=huonw\n\n Keeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "18878b155ebf3c70445f2a461582475f5ef72c92",
    "author": "Alex Crichton",
    "date": 1424844261,
    "message": "std: Require `&mut self` for Iterator::all\n\nKeeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "6c6f2317bae63261123cd94ebe214e80fb6ad78e",
    "author": "Manish Goregaokar",
    "date": 1424840386,
    "message": "Rollup merge of #22729 - alexcrichton:ptr-stabilization, r=aturon\n\n Specifically, the following actions were takend:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n\n[breaking-change]"
  },
  {
    "hash": "ab45694198356ae78972025e0d3beece297431d1",
    "author": "Alex Crichton",
    "date": 1424816553,
    "message": "std: Stabilize some `ptr` functions\n\nSpecifically, the following actions were taken:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n* All type parameters now are `T: ?Sized` wherever possible and new clauses were\n  added to the `offset` functions to require that the type is sized.\n\n[breaking-change]"
  },
  {
    "hash": "b18584cbd942e2559e718d6318fdbc494e9047bd",
    "author": "Manish Goregaokar",
    "date": 1424840379,
    "message": "Rollup merge of #22727 - alexcrichton:prep-env, r=aturon\n\n This commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  },
  {
    "hash": "2d200c9c8bd6659720a68ab8dd74218b1e58c1e9",
    "author": "Alex Crichton",
    "date": 1424820462,
    "message": "std: Move std::env to the new I/O APIs\n\nThis commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  },
  {
    "hash": "24fc50d29545e7ea89320d3c9544cd9043894d7d",
    "author": "Manish Goregaokar",
    "date": 1424840231,
    "message": "Rollup merge of #22783 - alexcrichton:deprecate-taskpool, r=alexcrichton\n\n Rather than stabilize on the current API, we're going to punt this\nconcern to crates.io, to allow for faster iteration.\n\n[breaking-change]"
  },
  {
    "hash": "efd2a1780b2ee1909e84df0c3b398adb024ee375",
    "author": "Aaron Turon",
    "date": 1424133726,
    "message": "Deprecate std::sync::TaskPool\n\nRather than stabilize on the current API, we're going to punt this\nconcern to crates.io, to allow for faster iteration.\n\nIf you need this functionality, you might look at https://github.com/carllerche/syncbox\n\n[breaking-change]"
  },
  {
    "hash": "0bd15657d93c932611f3aee351b6521cdfa77731",
    "author": "bors",
    "date": 1424800569,
    "message": "Auto merge of #22172 - eddyb:almost-there, r=nikomatsakis\n\nAdds `<module::Type>::method` support and makes `module::Type::method` a shorthand for it.\r\nThis is most of #16293, except that chaining multiple associated types is not yet supported.\r\nIt also fixes #22563 as `impl`s are no longer treated as modules in resolve.\r\n\r\nUnfortunately, this is still a *[breaking-change]*:\r\n* If you used a global path to a primitive type, i.e. `::bool`, `::i32` etc. - that was a bug I had to fix.\r\nSolution: remove the leading `::`.\r\n* If you passed explicit `impl`-side type parameters to an inherent method, e.g.:\r\n```rust\r\nstruct Foo<T>(T);\r\nimpl<A, B> Foo<(A, B)> {\r\n    fn pair(a: A, b: B) -> Foo<(A, B)> { Foo((a, b)) }\r\n}\r\nFoo::<A, B>::pair(a, b)\r\n// Now that is sugar for:\r\n<Foo<A, B>>::pair(a, b)\r\n// Which isn't valid because `Foo` has only one type parameter.\r\n// Solution: replace with:\r\nFoo::<(A, B)>::pair(a, b)\r\n// And, if possible, remove the explicit type param entirely:\r\nFoo::pair(a, b)\r\n```\r\n* If you used the `QPath`-related `AstBuilder` methods @hugwijst added in #21943.\r\nThe methods still exist, but `QPath` was replaced by `QSelf`, with the actual path stored separately.\r\nSolution: unpack the pair returned by `cx.qpath` to get the two arguments for `cx.expr_qpath`."
  },
  {
    "hash": "717a91d6651598994834d056c69e6c4bf2b74b9f",
    "author": "Ivan Petkov",
    "date": 1424718457,
    "message": "Update missing-docs lint to check associated type declarations\n\n[breaking-change]\n\nFixes #20648"
  },
  {
    "hash": "67eb38ee4cfd7b28f8498b5b6492da172768dcb9",
    "author": "bors",
    "date": 1424645146,
    "message": "Auto merge of #22466 - Kimundi:str_pattern_ai_safe, r=aturon\n\nThis is not a complete implementation of the RFC:\r\n\r\n- only existing methods got updated, no new ones added\r\n- doc comments are not extensive enough yet\r\n- optimizations got lost and need to be reimplemented\r\n\r\nSee https://github.com/rust-lang/rfcs/pull/528\r\n\r\nTechnically a\r\n\r\n[breaking-change]"
  },
  {
    "hash": "98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd",
    "author": "Manish Goregaokar",
    "date": 1424550053,
    "message": "Rollup merge of #22542 - ipetkov:unsafe-lint, r=huonw\n\n This allows warning or forbidding all uses of unsafe code, whereas\npreviously only unsafe blocks were caught by the lint.\n\nThe lint has been renamed from `unsafe-blocks` to `unsafe-code` to\nreflect its new purpose.\n\nThis is a minor [breaking-change]\n\nCloses #22430"
  },
  {
    "hash": "be0dc49675ff38b4bc2e73f68bff298168bc6875",
    "author": "Ivan Petkov",
    "date": 1424407389,
    "message": "Unsafe lint will also check for other unsafe code\n\nChecks include declaration/implementation of unsafe functions, traits,\nand methods.\n\nThis allows warning or forbidding all uses of unsafe code, whereas\npreviously only unsafe blocks were caught by the lint.\n\nThe lint has been renamed from `unsafe-blocks` to `unsafe-code` to\nreflect its new purpose.\n\nThis is a minor [breaking-change]\n\nCloses #22430"
  },
  {
    "hash": "a99e698628cbd396c8100ef776d10ac61d911847",
    "author": "Aaron Turon",
    "date": 1424301838,
    "message": "Stabilize std::borrow\n\nThis commit stabilizes `std::borrow`, making the following modifications\nto catch up the API with language changes:\n\n* It renames `BorrowFrom` to `Borrow`, as was originally intended (but\n  blocked for technical reasons), and reorders the parameters\n  accordingly.\n\n* It moves the type parameter of `ToOwned` to an associated type. This\n  is somewhat less flexible, in that each borrowed type must have a\n  unique owned type, but leads to a significant simplification for\n  `Cow`. Flexibility can be regained by using newtyped slices, which is\n  advisable for other reasons anyway.\n\n* It removes the owned type parameter from `Cow`, making the type much\n  less verbose.\n\n* Deprecates the `is_owned` and `is_borrowed` predicates in favor of\n  direct matching.\n\nThe above API changes are relatively minor; the basic functionality\nremains the same, and essentially the whole module is now marked\n`#[stable]`.\n\n[breaking-change]"
  },
  {
    "hash": "66613e26b95438c02e2f5c273c557515454121f7",
    "author": "Alexis",
    "date": 1424286107,
    "message": "make FromIterator use IntoIterator\n\nThis breaks all implementors of FromIterator, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of FromIterator should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]"
  },
  {
    "hash": "4a9d190423f67a00053f4b5c9869f0ccbdfcc689",
    "author": "Alexis",
    "date": 1424286107,
    "message": "make Extend use IntoIterator\n\nThis breaks all implementors of Extend, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of Extend should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]"
  },
  {
    "hash": "5fa9de16df87ab844452821acff1b6c74e948327",
    "author": "Aaron Turon",
    "date": 1424286106,
    "message": "Implement RFC 580\n\nThis commit implements RFC 580 by renaming:\n\n* DList -> LinkedList\n* Bitv -> BitVec\n* BitvSet -> BitSet\n* RingBuf -> VecDeque\n\nMore details are in [the\nRFC](https://github.com/rust-lang/rfcs/pull/580)\n\n[breaking-change]"
  },
  {
    "hash": "f3657170b1cbe80393d9ccde8608872f7bdc68f2",
    "author": "Alex Crichton",
    "date": 1424298730,
    "message": "rollup merge of #22482: alexcrichton/cstr-changes\n\nThis commit is an implementation of [RFC 592][r592] and [RFC 840][r840]. These\ntwo RFCs tweak the behavior of `CString` and add a new `CStr` unsized slice type\nto the module.\n\n[r592]: https://github.com/rust-lang/rfcs/blob/master/text/0592-c-str-deref.md\n[r840]: https://github.com/rust-lang/rfcs/blob/master/text/0840-no-panic-in-c-string.md\n\nThe new `CStr` type is only constructable via two methods:\n\n1. By `deref`'ing from a `CString`\n2. Unsafely via `CStr::from_ptr`\n\nThe purpose of `CStr` is to be an unsized type which is a thin pointer to a\n`libc::c_char` (currently it is a fat pointer slice due to implementation\nlimitations). Strings from C can be safely represented with a `CStr` and an\nappropriate lifetime as well. Consumers of `&CString` should now consume `&CStr`\ninstead to allow producers to pass in C-originating strings instead of just\nRust-allocated strings.\n\nA new constructor was added to `CString`, `new`, which takes `T: IntoBytes`\ninstead of separate `from_slice` and `from_vec` methods (both have been\ndeprecated in favor of `new`). The `new` method returns a `Result` instead of\npanicking.  The error variant contains the relevant information about where the\nerror happened and bytes (if present). Conversions are provided to the\n`io::Error` and `old_io::IoError` types via the `FromError` trait which\ntranslate to `InvalidInput`.\n\nThis is a breaking change due to the modification of existing `#[unstable]` APIs\nand new deprecation, and more detailed information can be found in the two RFCs.\nNotable breakage includes:\n\n* All construction of `CString` now needs to use `new` and handle the outgoing\n  `Result`.\n* Usage of `CString` as a byte slice now explicitly needs a `.as_bytes()` call.\n* The `as_slice*` methods have been removed in favor of just having the\n  `as_bytes*` methods.\n\nCloses #22469\nCloses #22470\n[breaking-change]"
  },
  {
    "hash": "1860ee521aa6096eb7f5410a64b53311fb0d2d0e",
    "author": "Alex Crichton",
    "date": 1424297743,
    "message": "std: Implement CString-related RFCs\n\nThis commit is an implementation of [RFC 592][r592] and [RFC 840][r840]. These\ntwo RFCs tweak the behavior of `CString` and add a new `CStr` unsized slice type\nto the module.\n\n[r592]: https://github.com/rust-lang/rfcs/blob/master/text/0592-c-str-deref.md\n[r840]: https://github.com/rust-lang/rfcs/blob/master/text/0840-no-panic-in-c-string.md\n\nThe new `CStr` type is only constructable via two methods:\n\n1. By `deref`'ing from a `CString`\n2. Unsafely via `CStr::from_ptr`\n\nThe purpose of `CStr` is to be an unsized type which is a thin pointer to a\n`libc::c_char` (currently it is a fat pointer slice due to implementation\nlimitations). Strings from C can be safely represented with a `CStr` and an\nappropriate lifetime as well. Consumers of `&CString` should now consume `&CStr`\ninstead to allow producers to pass in C-originating strings instead of just\nRust-allocated strings.\n\nA new constructor was added to `CString`, `new`, which takes `T: IntoBytes`\ninstead of separate `from_slice` and `from_vec` methods (both have been\ndeprecated in favor of `new`). The `new` method returns a `Result` instead of\npanicking.  The error variant contains the relevant information about where the\nerror happened and bytes (if present). Conversions are provided to the\n`io::Error` and `old_io::IoError` types via the `FromError` trait which\ntranslate to `InvalidInput`.\n\nThis is a breaking change due to the modification of existing `#[unstable]` APIs\nand new deprecation, and more detailed information can be found in the two RFCs.\nNotable breakage includes:\n\n* All construction of `CString` now needs to use `new` and handle the outgoing\n  `Result`.\n* Usage of `CString` as a byte slice now explicitly needs a `.as_bytes()` call.\n* The `as_slice*` methods have been removed in favor of just having the\n  `as_bytes*` methods.\n\nCloses #22469\nCloses #22470\n[breaking-change]"
  },
  {
    "hash": "9774b7e64b7ff8323b4f8160cc38eb793f447217",
    "author": "Alex Crichton",
    "date": 1424298723,
    "message": "rollup merge of #22480: alexcrichton/hashv3\n\nThis commit is an implementation of [RFC 823][rfc] which is another pass over\nthe `std::hash` module for stabilization. The contents of the module were not\nentirely marked stable, but some portions which remained quite similar to the\nprevious incarnation are now marked `#[stable]`. Specifically:\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0823-hash-simplification.md\n\n* `std::hash` is now stable (the name)\n* `Hash` is now stable\n* `Hash::hash` is now stable\n* `Hasher` is now stable\n* `SipHasher` is now stable\n* `SipHasher::new` and `new_with_keys` are now stable\n* `Hasher for SipHasher` is now stable\n* Many `Hash` implementations are now stable\n\nAll other portions of the `hash` module remain `#[unstable]` as they are less\ncommonly used and were recently redesigned.\n\nThis commit is a breaking change due to the modifications to the `std::hash` API\nand more details can be found on the [RFC][rfc].\n\nCloses #22467\n[breaking-change]"
  },
  {
    "hash": "f83e23ad7c464c242c2d7ace7212d323980b2bca",
    "author": "Alex Crichton",
    "date": 1424276780,
    "message": "std: Stabilize the `hash` module\n\nThis commit is an implementation of [RFC 823][rfc] which is another pass over\nthe `std::hash` module for stabilization. The contents of the module were not\nentirely marked stable, but some portions which remained quite similar to the\nprevious incarnation are now marked `#[stable]`. Specifically:\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0823-hash-simplification.md\n\n* `std::hash` is now stable (the name)\n* `Hash` is now stable\n* `Hash::hash` is now stable\n* `Hasher` is now stable\n* `SipHasher` is now stable\n* `SipHasher::new` and `new_with_keys` are now stable\n* `Hasher for SipHasher` is now stable\n* Many `Hash` implementations are now stable\n\nAll other portions of the `hash` module remain `#[unstable]` as they are less\ncommonly used and were recently redesigned.\n\nThis commit is a breaking change due to the modifications to the `std::hash` API\nand more details can be found on the [RFC][rfc].\n\nCloses #22467\n[breaking-change]"
  },
  {
    "hash": "d8f8f7a58c7c8b3352c1c577347865f5a823fee3",
    "author": "Aaron Turon",
    "date": 1424212409,
    "message": "Revise std::thread semantics\n\nThis commit makes several changes to `std::thread` in preparation for\nfinal stabilization:\n\n* It removes the ability to handle panics from `scoped` children; see\n  #20807 for discussion\n\n* It adds a `JoinHandle` structure, now returned from `spawn`, which\n  makes it possible to join on children that do not share data from\n  their parent's stack. The child is automatically detached when the\n  handle is dropped, and the handle cannot be copied due to Posix\n  semantics.\n\n* It moves all static methods from `std::thread::Thread` to free\n  functions in `std::thread`. This was done in part because, due to the\n  above changes, there are effectively no direct `Thread` constructors,\n  and the static methods have tended to feel a bit awkward.\n\n* Adds an `io::Result` around the `Builder` methods `scoped` and\n  `spawn`, making it possible to handle OS errors when creating\n  threads. The convenience free functions entail an unwrap.\n\n* Stabilizes the entire module. Despite the fact that the API is\n  changing somewhat here, this is part of a long period of baking and\n  the changes are addressing all known issues prior to alpha2. If\n  absolutely necessary, further breaking changes can be made prior to beta.\n\nCloses #20807\n\n[breaking-change]"
  },
  {
    "hash": "a2ebb24ee6cc76791ef834cb2d17ecac95756499",
    "author": "Alex Crichton",
    "date": 1424210565,
    "message": "std: Rename io/path features with old_ prefix\n\nThis commit renames the features for the `std::old_io` and `std::old_path`\nmodules to `old_io` and `old_path` to help facilitate migration to the new APIs.\n\nThis is a breaking change as crates which mention the old feature names now need\nto be renamed to use the new feature names.\n\n[breaking-change]"
  },
  {
    "hash": "eca2453a02548042fcb7082063149367a3343dd7",
    "author": "Alex Crichton",
    "date": 1424214833,
    "message": "rollup merge of #22208: aturon/expose-more-path\n\nThis commit exposes the `is_sep` function and `MAIN_SEP` constant, as\nwell as Windows path prefixes. The path prefix enum is safely exposed on\nall platforms, but it only yielded as a component for Windows.\n\nExposing the prefix enum as part of prefix components involved changing\nthe type from `OsStr` to the `Prefix` enum, which is a:\n\n[breaking-change]"
  },
  {
    "hash": "4a9dd3f8403f84ad518b0119fa2312c379df5dd7",
    "author": "Aaron Turon",
    "date": 1424123589,
    "message": "Expose more of std::path\n\nThis commit exposes the `is_sep` function and `MAIN_SEP` constant, as\nwell as Windows path prefixes. The path prefix enum is safely exposed on\nall platforms, but it only yielded as a component for Windows.\n\nExposing the prefix enum as part of prefix components involved changing\nthe type from `OsStr` to the `Prefix` enum, which is a:\n\n[breaking-change]"
  },
  {
    "hash": "5be2b8964c624ee619d2f8518215d3a3b13514e1",
    "author": "Alex Crichton",
    "date": 1424214826,
    "message": "rollup merge of #22191: nagisa/target-ptr-width-json\n\nThis aligns json target specification to match terminology used elsewhere in the code base.\n\n[breaking-change] for custom target json users. Change all appearances of target-word-size\nto target-pointer-width."
  },
  {
    "hash": "6f5944bfcff96509e3f3de227570382056153392",
    "author": "Simonas Kazlauskas",
    "date": 1423686556,
    "message": "Change target-word-size to target-pointer-width\n\nThis aligns json target specification to match terminology used elsewhere in the code base.\n\n[breaking-change] for custom target json users. Change all appearances of target-word-size\nto target-pointer-width."
  },
  {
    "hash": "f492095eb4ac061f1b4898b92880095d23dc9c86",
    "author": "Alex Crichton",
    "date": 1424214800,
    "message": "rollup merge of #22024: alexcrichton/ascii\n\n* Move the type parameter on the `AsciiExt` trait to an associated type named\n  `Owned`.\n* Move `ascii::escape_default` to using an iterator.\n\nThis is a breaking change due to the removal of the type parameter on the\n`AsciiExt` trait as well as the modifications to the `escape_default` function\nto returning an iterator. Manual implementations of `AsciiExt` (or `AsciiExt`\nbounds) should be adjusted to remove the type parameter and using the new\n`escape_default` should be relatively straightforward.\n\n[breaking-change]"
  },
  {
    "hash": "235f35b0b724a38a5583112825d46f50c5dde980",
    "author": "Alex Crichton",
    "date": 1424210314,
    "message": "std: Stabilize the `ascii` module\n\nThis commit performs a stabilization pass over the `std::ascii` module taking\nthe following actions:\n\n* the module name is now stable\n* `AsciiExt` is now stable after moving its type parameter to an `Owned`\n  associated type\n* `AsciiExt::is_ascii` is now stable\n* `AsciiExt::to_ascii_uppercase` is now stable\n* `AsciiExt::to_ascii_lowercase` is now stable\n* `AsciiExt::eq_ignore_ascii_case` is now stable\n* `AsciiExt::make_ascii_uppercase` is added to possibly replace\n  `OwnedAsciiExt::into_ascii_uppercase` (similarly for lowercase variants).\n* `escape_default` now returns an iterator and is stable\n* `EscapeDefault` is now stable\n\nTrait implementations are now also marked stable.\n\nPrimarily it is still unstable to *implement* the `AsciiExt` trait due to it\ncontaining some unstable methods.\n\n[breaking-change]"
  },
  {
    "hash": "020e4e4ad981ce0518bd8e3464ac592717c41143",
    "author": "Manish Goregaokar",
    "date": 1424174600,
    "message": "Rollup merge of #22383 - pnkfelix:pass-features-along-during-expansion, r=huonw\n\n Pass features along during expansion\n\nUse the set of passed features to detect uses of feature-gated macros without the corresponding feature enabled.\n\nFix #22234.\n\n----\n\nAlso, the framework this add (passing along a reference to the features in the expansion context) is a necessary precursor for landing a properly feature-gated desugaring-based overloaded-`box` and placement-`in` (#22181).\n\n----\n\nThis is fixing a bug, but since there might be code out there that is unknowingly taking advantage of that bug, I feel obligated to mark this as a:\n\n[breaking-change]"
  },
  {
    "hash": "bf52f2eef578e6fff83611a6276a3aa9f284e1c5",
    "author": "Manish Goregaokar",
    "date": 1424174600,
    "message": "Rollup merge of #22311 - lfairy:consistent-fmt, r=alexcrichton\n\n This brings it in line with its namesake in `std::io`.\n\n[breaking-change]\n\nr? @aturon"
  },
  {
    "hash": "4647d89205992383f8122e8fde0e2615497572bc",
    "author": "Manish Goregaokar",
    "date": 1424174599,
    "message": "Rollup merge of #22364 - Manishearth:rfc-572-forbid-attr, r=nikomatsakis\n\n fixes #22203\n\nr? @nikomatsakis\n\nThis breaks code that might be using attributes randomly, so it's technically a\n\n[breaking-change]"
  },
  {
    "hash": "f9aeea7cb7865a2b82e7102837daabbe549177ea",
    "author": "bors",
    "date": 1424188555,
    "message": "Auto merge of #22311 - lfairy:consistent-fmt, r=alexcrichton\n\nThis brings it in line with its namesake in `std::io`.\r\n\r\n[breaking-change]\r\n\r\nr? @aturon"
  },
  {
    "hash": "bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb",
    "author": "Chris Wong",
    "date": 1423871792,
    "message": "Rename `fmt::Writer` to `fmt::Write`\n\nThis brings it in line with its namesake in `std::io`.\n\n[breaking-change]"
  },
  {
    "hash": "d264ef2b11683337c24cfb16e0335ab386df02ab",
    "author": "Manish Goregaokar",
    "date": 1424134420,
    "message": "Rollup merge of #22313 - japaric:iter, r=aturon\n\n `IntoIterator` now has an extra associated item:\n\n``` rust\ntrait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Self=Self::Item>;\n}\n```\n\nThis lets you bind the iterator \\\"`Item`\\\" directly when writing generic functions:\n\n``` rust\n// hypothetical change, not included in this PR\nimpl Extend<T> for Vec<T> {\n    // you can now write\n    fn extend<I>(&mut self, it: I) where I: IntoIterator<Item=T> { .. }\n    // instead of\n    fn extend<I: IntoIterator>(&mut self, it: I) where I::IntoIter: Iterator<Item=T> { .. }\n}\n```\n\nThe downside is that now you have to write an extra associated type in your `IntoIterator` implementations:\n\n``` diff\n impl<T> IntoIterator for Vec<T> {\n+    type Item = T;\n     type IntoIter = IntoIter<T>;\n\n     fn into_iter(self) -> IntoIter<T> { .. }\n }\n```\n\nBecause this breaks all downstream implementations of `IntoIterator`, this is a [breaking-change]\n\n---\n\nr? @aturon"
  },
  {
    "hash": "f58a1bfa981eee4ba4d4c3c801f94772e4ab0019",
    "author": "Niko Matsakis",
    "date": 1424102137,
    "message": "Fix fallout in libsyntax from RFC 599. Clarity and efficiency seems to be mostly improved, to my eye.\nNonetheless, as this commit demonstrates, the previous commits was a [breaking-change].\n\nIn practice, breakage is focused on functions of this form:\n\n```rust\nfn foo(..., object: Box<FnMut()>)\n````\n\nwhere `FnMut()` could be any trait object type. The older scheme defaulted objects in argument\nposition so that they were bounded by a fresh lifetime:\n\n```rust\nfn foo<'a>(..., object: Box<FnMut()+'a>)\n```\n\nThis meant that the object could contain borrowed data. The newer\nscheme defaults to a lifetime bound of `'static`:\n\n```rust\nfn foo(..., object: Box<FnMut()+'static>)\n```\n\nThis means that the object cannot contain borrowed data. In some cases, the best fix\nis to stop using `Box`:\n\n```rust\nfn foo(..., object: &mut FnMut())\n```\n\nbut another option is to write an explicit annotation for the `'a`\nlifetime that used to be implicit.  Both fixes are demonstrated in\nthis commit."
  },
  {
    "hash": "16b24f15bd042c4f97e1d4826d82c992c0228684",
    "author": "Manish Goregaokar",
    "date": 1424005968,
    "message": "Rollup merge of #22285 - kmcallister:pub-macro, r=nick29581\n\n It's not clear what this means, because a macro in item position can expand to zero or more items.  For now we disallow it, which is technically a\n\n    [breaking-change]\n\nbut is landing without an RFC.  The `pub` keyword previously had no effect, which seems quite unintended.\n\nFixes #18317.\nFixes #14660."
  },
  {
    "hash": "dcd4cef119dc2fdac43b86cfb3694756d8c23f9f",
    "author": "Keegan McAllister",
    "date": 1423864089,
    "message": "Forbid `pub mymacro!();`\n\nIt's not clear what this means, because a macro in item position can expand to\nzero or more items.  For now we disallow it, which is technically a\n\n    [breaking-change]\n\nbut is landing without an RFC.  The `pub` keyword previously had no effect,\nwhich seems quite unintended.\n\nFixes #18317.\nFixes #14660."
  },
  {
    "hash": "f7870b6faa43a9e63b5575d5d9663457003a8ac5",
    "author": "Manish Goregaokar",
    "date": 1424005967,
    "message": "Rollup merge of #22339 - petrochenkov:int, r=huonw\n\n Some function signatures have changed, so this is a [breaking-change].\nIn particular, radixes and numerical values of digits are represented by `u32` now.\n\nPart of #22240"
  },
  {
    "hash": "1b86ebe25751268aa39ef2ad5e2b0e650a6f0291",
    "author": "Manish Goregaokar",
    "date": 1424005964,
    "message": "Rollup merge of #22299 - bluss:range-64-is-not-exact-size, r=alexcrichton\n\n Fixes #22047\n\n`Range<u64>` and `Range<i64>` may be longer than usize::MAX on 32-bit\nplatforms, and thus they cannot fulfill the protocol for\nExactSizeIterator. We don't want a nonobvious platform dependency in\nbasic iterator traits, so the trait impl is removed.\n\nThe logic of this change assumes that usize is at least 32-bit.\n\nThis is technically a breaking change; note that `Range<usize>` and\n`Range<isize>` are always ExactSizeIterators.\n\n[breaking-change]"
  },
  {
    "hash": "b19fda0ceb820af57f00976951dba95a3c0419aa",
    "author": "Ulrik Sverdrup",
    "date": 1423859210,
    "message": "Remove ExactSizeIterator from 64-bit ranges.\n\nFixes #22047\n\nRange<u64> and Range<i64> may be longer than usize::MAX on 32-bit\nplatforms, and thus they cannot fulfill the protocol for\nExactSizeIterator. We don't want a nonobvious platform dependency in\nbasic iterator traits, so the trait impl is removed.\n\nThe logic of this change assumes that usize is at least 32-bit.\n\nThis is technically a breaking change; note that Range<usize> and\nRange<isize> are always ExactSizeIterators.\n\n[breaking-change]"
  },
  {
    "hash": "da1a1f515fbedb32cfd954e2dc9cbf93a02453c8",
    "author": "Manish Goregaokar",
    "date": 1424004940,
    "message": "Rollup merge of #22254 - huonw:float-value--, r=aturon\n\n In `std::f32` and `std::f64`:\n\n- `MIN_VALUE` ‚Üí `MIN`\n- `MAX_VALUE` ‚Üí `MAX`\n- `MIN_POS_VALUE` ‚Üí `MIN_POSITIVE`\n\nThis matches the corresponding integer constants.\n\n[breaking-change]"
  },
  {
    "hash": "e4a9eb95ce4a457e800571d86942561ada28304a",
    "author": "Huon Wilson",
    "date": 1423798857,
    "message": "Remove `_VALUE` from the float extremes constants.\n\nIn `std::f32` and `std::f64`:\n\n- `MIN_VALUE` ‚Üí `MIN`\n- `MAX_VALUE` ‚Üí `MAX`\n- `MIN_POS_VALUE` ‚Üí `MIN_POSITIVE`\n\nThis matches the corresponding integer constants.\n\n[breaking-change]"
  },
  {
    "hash": "8cc3fbd41dddbb11f442a17902cd0d276aa22566",
    "author": "Manish Goregaokar",
    "date": 1424004751,
    "message": "Rollup merge of #22218 - huonw:raw-docs, r=steveklabnik,huonw\n\nThis overhauls the very meager docs that currently exist to clarify\r\nvarious understandable confusions that I've noticed, e.g. people look in\r\n`std::raw` for the \"real\" types of slices like `&[T]`, or think that\r\n`Slice<T>` refers to `[T]` (fixes #22214).\r\n\r\nThis patch takes the liberty of offering some \"style\" guidance around\r\n`raw::Slice`, since there's more restricted ways to duplicate all\r\nfunctionality connected to it: `std::slice::from_raw_parts{,_mut}` for\r\nconstruction and `.as_{,mut_}ptr` & `.len` for deconstruction.\r\n\r\nIt also deprecates the `std::raw::Closure` type which is now useless for\r\nnon-type-erased closures, and replaced by `TraitObject` for `&Fn`, `&mut\r\nFnMut` etc, so I guess it should be called a:\r\n\r\n[breaking-change]"
  },
  {
    "hash": "7a52932f4cd65f57bcc8d77f12e32066b2a9c432",
    "author": "Ulrik Sverdrup",
    "date": 1423873962,
    "message": "Make std::raw::Repr an unsafe trait\n\nThe default implementation of .repr() will call conveniently call\ntransmute_copy which should be appropriate for all implementors, but is\nmemory unsafe if used wrong.\n\nFixes #22260\n\nYou need to use `unsafe impl` to implement the Repr trait now.\n\n[breaking-change]"
  },
  {
    "hash": "5e3ae102dbeeb646e8c7d2d423cea263337a76af",
    "author": "Huon Wilson",
    "date": 1423873928,
    "message": "Dramatically expand the docs of std::raw.\n\nThis overhauls the very meager docs that currently exist to clarify\nvarious understandable confusions that I've noticed, e.g. people look in\n`std::raw` for the \"real\" types of slices like `&[T]`, or think that\n`Slice<T>` refers to `[T]` (fixes #22214).\n\nThis patch takes the liberty of offering some \"style\" guidance around\n`raw::Slice`, since there's more restricted ways to duplicate all\nfunctionality connected to it: `std::slice::from_raw_parts{,_mut}` for\nconstruction and `.as_{,mut_}ptr` & `.len` for deconstruction.\n\nIt also deprecates the `std::raw::Closure` type which is now useless for\nnon-type-erased closures, and replaced by `TraitObject` for `&Fn`, `&mut\nFnMut` etc, so I guess it should be called a:\n\n[breaking-change]"
  },
  {
    "hash": "b63cee4a11fcfecf20ed8419bc3bd6859e6496bc",
    "author": "bors",
    "date": 1423933271,
    "message": "Auto merge of #22158 - Kimundi:the_lonely_uppercase_keyword, r=pnkfelix\n\nIt is only allowed in paths now, where it will either work inside a `trait`\r\nor `impl` item, or not resolve outside of it.\r\n\r\n[breaking-change]\r\n\r\nCloses #22137"
  },
  {
    "hash": "07d00deab22dc07ffc58b8e74d45596242ca8b15",
    "author": "Marvin L√∂bel",
    "date": 1423775071,
    "message": "Made `Self` a keyword.\n\nIt is only allowed in paths now, where it will either work inside a `trait`\nor `impl` item, or not resolve outside of it.\n\n[breaking-change]\n\nCloses #22137"
  },
  {
    "hash": "cf636c233dfeef5abf0de8fb35e23c0a161810d2",
    "author": "bors",
    "date": 1423813481,
    "message": "Auto merge of #22093 - petrochenkov:builtin, r=pnkfelix\n\nNames of structs, enums, traits, type aliases and type parameters (i.e. all identifiers that can be used as full paths in type position) are not allowed to match the names of primitive types.\r\nSee #20427 for more information.\r\n\r\nThis is a minor [breaking-change]"
  },
  {
    "hash": "32d0dbd49a372b9d2e000587497de6ffca9e1cca",
    "author": "Kevin Butler",
    "date": 1423745708,
    "message": "librustc: Forbid partial reinitialization of uninitialized structures or\nenumerations that implement the `Drop` trait.\n\nThis breaks code like:\n\n    struct Struct {\n        f: String,\n        g: String,\n    }\n\n    impl Drop for Struct { ... }\n\n    fn main() {\n        let x = Struct { ... };\n        drop(x);\n        x.f = ...;\n    }\n\nChange this code to not create partially-initialized structures. For\nexample:\n\n    struct Struct {\n        f: String,\n        g: String,\n    }\n\n    impl Drop for Struct { ... }\n\n    fn main() {\n        let x = Struct { ... };\n        drop(x);\n        x = Struct {\n            f: ...,\n            g: ...,\n        }\n    }\n\nCloses #18571.\n\n[breaking-change]\n\n----\n\n(Joint authorship by pcwalton and Ryman; thanks all!)"
  },
  {
    "hash": "f9a1087f2730ab021d5356a5df703baeccffc020",
    "author": "Felix S. Klock II",
    "date": 1423659460,
    "message": "Feature-gate the `#[unsafe_no_drop_flag]` attribute.\n\nSee RFC 320, \"Non-zeroing dynamic drops.\"\n\nFix #22173\n\n[breaking-change]"
  },
  {
    "hash": "9492275106dd4d564a036517ff4726feacaf0720",
    "author": "Alex Crichton",
    "date": 1423692144,
    "message": "rollup merge of #22188: alexcrichton/envv2\n\nThis commit tweaks the interface of the `std::env` module to make it more\nergonomic for common usage:\n\n* `env::var` was renamed to `env::var_os`\n* `env::var_string` was renamed to `env::var`\n* `env::args` was renamed to `env::args_os`\n* `env::args` was re-added as a panicking iterator over string values\n* `env::vars` was renamed to `env::vars_os`\n* `env::vars` was re-added as a panicking iterator over string values.\n\nThis should make common usage (e.g. unicode values everywhere) more ergonomic\nas well as \"the default\". This is also a breaking change due to the differences\nof what's yielded from each of these functions, but migration should be fairly\neasy as the defaults operate over `String` which is a common type to use.\n\n[breaking-change]"
  },
  {
    "hash": "a828e7948069f310dc5b33be8edb65e5e8e0cf9a",
    "author": "Alex Crichton",
    "date": 1423691195,
    "message": "std: Tweak the std::env OsString/String interface\n\nThis commit tweaks the interface of the `std::env` module to make it more\nergonomic for common usage:\n\n* `env::var` was renamed to `env::var_os`\n* `env::var_string` was renamed to `env::var`\n* `env::args` was renamed to `env::args_os`\n* `env::args` was re-added as a panicking iterator over string values\n* `env::vars` was renamed to `env::vars_os`\n* `env::vars` was re-added as a panicking iterator over string values.\n\nThis should make common usage (e.g. unicode values everywhere) more ergonomic\nas well as \"the default\". This is also a breaking change due to the differences\nof what's yielded from each of these functions, but migration should be fairly\neasy as the defaults operate over `String` which is a common type to use.\n\n[breaking-change]"
  },
  {
    "hash": "bbbb571fee01532f63b105150654db8db0b01bf7",
    "author": "Alex Crichton",
    "date": 1423685699,
    "message": "rustc: Fix a number of stability lint holes\n\nThere are a number of holes that the stability lint did not previously cover,\nincluding:\n\n* Types\n* Bounds on type parameters on functions and impls\n* Where clauses\n* Imports\n* Patterns (structs and enums)\n\nThese holes have all been fixed by overriding the `visit_path` function on the\nAST visitor instead of a few specialized cases. This change also necessitated a\nfew stability changes:\n\n* The `collections::fmt` module is now stable (it was already supposed to be).\n* The `thread_local::imp::Key` type is now stable (it was already supposed to\n  be).\n* The `std::rt::{begin_unwind, begin_unwind_fmt}` functions are now stable.\n  These are required via the `panic!` macro.\n* The `std::old_io::stdio::{println, println_args}` functions are now stable.\n  These are required by the `print!` and `println!` macros.\n* The `ops::{FnOnce, FnMut, Fn}` traits are now `#[stable]`. This is required to\n  make bounds with these traits stable. Note that manual implementations of\n  these traits are still gated by default, this stability only allows bounds\n  such as `F: FnOnce()`.\n\nAdditionally, the compiler now has special logic to ignore its own generated\n`__test` module for the `--test` harness in terms of stability.\n\nCloses #8962\nCloses #16360\nCloses #20327\n\n[breaking-change]"
  },
  {
    "hash": "e02b6d17486ecef8541d03bb6a38c52d1a35b339",
    "author": "Felix S. Klock II",
    "date": 1423641027,
    "message": "destructor checker (dropck).\n\nLargely adapted from pcwalton's original branch, with following\nnotable modifications:\n\nUse `regionck::type_must_outlive` to generate `SafeDestructor`\nconstraints.  (this plugged some soundness holes in the analysis).\n\nAvoid exponential time blowup on compile-fail/huge-struct.rs by\nkeeping the breadcrumbs until end of traversal.\n\nAvoid premature return from regionck::visit_expr.\n\nFactored drop-checking code out into dropck module.\n\nAdded `SafeDestructor` to enum `SubregionOrigin` (for error reporting).\n\n----\n\nSince this imposes restrictions on the lifetimes used in types with\ndestructors, this is a (wait for it)\n\n[breaking-change]"
  },
  {
    "hash": "105f70b50097a5776ef0d1a6da6753c25d191aa6",
    "author": "Felix S. Klock II",
    "date": 1423651625,
    "message": "Add `box_patterns` feature gate.\n\nSwitch feature-gate checker from `box_syntax` to `box_patterns` when\nvisiting a pattern.\n\n(Having to opt into both `box_syntax` and `box_patterns` seemed\nunnecessary.)\n\n[breaking-change]"
  },
  {
    "hash": "605225a366b62f29f5fd4b03cc298fff03bc3bdf",
    "author": "Alex Crichton",
    "date": 1423526293,
    "message": "std: Rename IntoIterator::Iter to IntoIter\n\nThis is in preparation for stabilization of the `IntoIterator` trait. All\nimplementations and references to `Iter` need to be renamed to `IntoIter`.\n\n[breaking-change]"
  },
  {
    "hash": "64a4decec779ee0a30585a12352d20a54b722506",
    "author": "Alex Crichton",
    "date": 1423526293,
    "message": "std: Remove typarms from IteratorExt::cloned\n\nWith associated types an where clauses none of the type parameters are\nnecessary.\n\n[breaking-change]"
  },
  {
    "hash": "94c06a1be0ccfcf1a8e105fc98d126de372dbd40",
    "author": "bors",
    "date": 1423566952,
    "message": "Auto merge of #22026 - kmcallister:plugin, r=sfackler\n\n```rust\r\n#[plugin] #[no_link] extern crate bleh;\r\n```\r\n\r\nbecomes a crate attribute\r\n\r\n```rust\r\n#![plugin(bleh)]\r\n```\r\n\r\nThe feature gate is still required.\r\n\r\nIt's almost never correct to link a plugin into the resulting library / executable, because it will bring all of libsyntax and librustc with it. However if you really want this behavior, you can get it with a separate `extern crate` item in addition to the `plugin` attribute.\r\n\r\nFixes #21043.\r\nFixes #20769.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "93b642d9743edea728ef08b2d6fd17229caaad43",
    "author": "Keegan McAllister",
    "date": 1423517247,
    "message": "Use a crate attribute to load plugins\n\n    #[plugin] #[no_link] extern crate bleh;\n\nbecomes a crate attribute\n\n    #![plugin(bleh)]\n\nThe feature gate is still required.\n\nIt's almost never correct to link a plugin into the resulting library /\nexecutable, because it will bring all of libsyntax and librustc with it.\nHowever if you really want this behavior, you can get it with a separate\n`extern crate` item in addition to the `plugin` attribute.\n\nFixes #21043.\nFixes #20769.\n\n[breaking-change]"
  },
  {
    "hash": "74b8740719c1b427f79b67d6bc51e9d448dd9c49",
    "author": "bors",
    "date": 1423355043,
    "message": "Auto merge of #21988 - kmcallister:no-std, r=sfackler\n\nFixes #21833.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton \r\n\r\nThe tests in #21912 will also need `#[feature(no_std)]`. If you're okay with both PRs, I can merge and test them."
  },
  {
    "hash": "d788588dce5525b2bf5674b0c90c791a70582330",
    "author": "Keegan McAllister",
    "date": 1423334998,
    "message": "Feature-gate #![no_std]\n\nFixes #21833.\n\n[breaking-change]"
  },
  {
    "hash": "61626b306314768b273892e3a547b896ef7a4dfd",
    "author": "bors",
    "date": 1423333255,
    "message": "Auto merge of #21984 - pnkfelix:make-for-loops-a-terminating-scope, r=nikomatsakis\n\nmake `for PAT in ITER_EXPR { ... }` a terminating-scope for ITER_EXPR.\r\n\r\nIn effect, temporary anonymous values created during the evaluation of ITER_EXPR no longer not live for the entirety of the block surrounding the for-loop; instead they only live for the extent of the for-loop itself, and no longer.\r\n\r\n----\r\n\r\nThere is one case I know of that this breaks, demonstrated to me by @nikomatsakis  (but it is also a corner-case that is useless in practice).  Here is that case:\r\n\r\n```\r\nfn main() {\r\n    let mut foo: Vec<&i8> = Vec::new();\r\n    for i in &[1, 2, 3] { foo.push(i) }\r\n}\r\n```\r\n\r\nNote that if you add any code following the for-loop above, or even a semicolon to the end of it, then the code will stop compiling (i.e., it gathers a vector of references but the gathered vector cannot actually be used.)\r\n\r\n(The above code, despite being useless, did occur in one run-pass test by accident; that test is updated here to accommodate the new striction.)\r\n\r\n----\r\n\r\nSo, technically this is a:\r\n\r\n[breaking-change]"
  },
  {
    "hash": "b445bf2bd1139236fd815bf93610ddaf17726111",
    "author": "Felix S. Klock II",
    "date": 1423177657,
    "message": "make `for PAT in ITER_EXPR { ... }` a terminating-scope for ITER_EXPR.\n\nIn effect, temporary anonymous values created during the evaluation of\nITER_EXPR no longer not live for the entirety of the block surrounding\nthe for-loop; instead they only live for the extent of the for-loop\nitself, and no longer.\n\n----\n\nThere is one case I know of that this breaks, demonstrated to me by\nniko (but it is also a corner-case that is useless in practice).  Here\nis that case:\n\n```\nfn main() {\n    let mut foo: Vec<&i8> = Vec::new();\n    for i in &[1, 2, 3] { foo.push(i) }\n}\n```\n\nNote that if you add any code following the for-loop above, or even a\nsemicolon to the end of it, then the code will stop compiling (i.e.,\nit gathers a vector of references but the gathered vector cannot\nactually be used.)\n\n(The above code, despite being useless, did occur in one run-pass test\nby accident; that test is updated here to accommodate the new\nstriction.)\n\n----\n\nSo, technically this is a:\n\n[breaking-change]"
  },
  {
    "hash": "8661b3dc0fbb9e21b94266ba62e23cebb8f0603f",
    "author": "bors",
    "date": 1423318118,
    "message": "Auto merge of #21971 - pnkfelix:fsk-restrict-fixdsz-array-moves, r=nikomatsakis\n\nRevised version of PR #21930.\r\n\r\nRestrictions on moves into and out-from fixed-length arrays.\r\n\r\n(There was only one use of this \"feature\" in the compiler source.)\r\n\r\nNote 1: the change to the error message in tests/compile-fail/borrowck-use-in-index-lvalue.rs, where we now report that *w is uninitialized (rather than w), was unintended fallout from the implementation strategy used here. The change appears harmless to me, but I welcome advice on how to bring back the old message, which was slightly cleaner (i.e. less unintelligible) since that the syntactic form *w does not actually appear in the source text.\r\n\r\nNote 2: the move out-from restriction to only apply to expr[i], and not destructuring bind (e.g. f([a, b, c]: Array) { ... }) since the latter is compatible with nonzeroing drop, AFAICT.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "cc8f35f874c81be1a5950d2527902b7dd5a94513",
    "author": "Felix S. Klock II",
    "date": 1423313040,
    "message": "Restrictions on moves out-from and into fixed-length arrays.\n\nNo longer legal: `fn foo(a: [D; 5]) { drop(a); a[2] = D::new(); }`;\none must first initialize the entirety of `a` before assigning to its\nindividual elements.\n\nNo longer legal: `fn foo(arr: [D; 5]) -> D { arr[2] }`, unless `D`\nimplements `Copy`. This \"move out-from\" restriction only affects\n`expr[i]`, and not destructuring (e.g. `f([a, b, c]: Array) { ... }`).\n\nuses mem_categorization to distinguish destructuring-bind from array\nindexing.\n\nSee discussion on RFC PR 533.\n\n[breaking-change]"
  },
  {
    "hash": "0b6dbbc9cfb747df1db646bba16561c022704056",
    "author": "bors",
    "date": 1423282462,
    "message": "Auto merge of #21949 - japaric:index, r=nikomatsakis\n\ncloses #21630\r\n\r\nOverloaded indexing (`&[mut] foo[bar]`) only works when `<Self as Index>::Output` is the same as `<Self as IndexMut>::Output` (see issue above). To restrict implementations of `IndexMut` that doesn't work, this PR makes `IndexMut` a supertrait over `Index`, i.e. `trait IndexMut<I>: Index<I>`, just like in the `trait DerefMut: Deref` case.\r\n\r\nThis breaks all downstream implementations of `IndexMut`, in most cases this simply means removing the `type Output = ..` bit, which is now redundant, from `IndexMut` implementations:\r\n\r\n``` diff\r\n impl Index<Foo> for Bar {\r\n     type Output = Baz;\r\n     ..\r\n }\r\n\r\n impl IndexMut<Foo> for Bar {\r\n-    type Output = Baz;\r\n     ..\r\n }\r\n```\r\n\r\n[breaking-change]\r\n\r\n---\r\n\r\nr? @nikomatsakis"
  },
  {
    "hash": "df7db970dcdb7b7fb1080b9d66baf2e45b689914",
    "author": "Manish Goregaokar",
    "date": 1423250071,
    "message": "Rollup merge of #22009 - japaric:no-mov, r=alexcrichton\n\n If you were still using `MaybeOwnedVector`, update your code to use `CowVec`.\n\n[breaking-change]\n\n---\n\nWe already removed `MaybeOwned` (the string equivalent) long time ago and with a much shorter deprecation period. It's time to let go."
  },
  {
    "hash": "d1a1d339ef3fb89599f74c0cbae2183c7cf2ee25",
    "author": "Manish Goregaokar",
    "date": 1423219867,
    "message": "Rollup merge of #21951 - Gankro:entry, r=aturon\n\n This also removes two erroneous re-exports of the Entry variants, and so is incidentally a [breaking-change], though presumably no one should have been using those.\n\nr? @aturon"
  },
  {
    "hash": "c3e1f77291803d26b2897c0953dce5cf7e70ab65",
    "author": "bors",
    "date": 1423039647,
    "message": "Auto merge of #21892 - huonw:deprecate-rand, r=alexcrichton\n\nUse [`rand`](https://crates.io/crates/rand) and [`derive_rand`](https://crates.io/crates/derive_rand) from crates.io.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "df1ac7aa63ea89a067c57663eab035f7b83f6933",
    "author": "Huon Wilson",
    "date": 1423003180,
    "message": "Deprecate in-tree `rand`, `std::rand` and `#[derive(Rand)]`.\n\nUse the crates.io crate `rand` (version 0.1 should be a drop in\nreplacement for `std::rand`) and `rand_macros` (`#[derive_Rand]` should\nbe a drop-in replacement).\n\n[breaking-change]"
  },
  {
    "hash": "d30f225b492163b14005d5069b7924f3fecf868c",
    "author": "Alex Crichton",
    "date": 1422996083,
    "message": "std: Remove `iter::ByRef` and generalize impls\n\nThis removes the `ByRef` iterator adaptor to stay in line with the changes to\n`std::io`. The `by_ref` method instead just returns `&mut Self`.\n\nThis also removes the implementation of `Iterator for &mut Iterator` and instead\ngeneralizes it to `Iterator for &mut I` where `I: Iterator + ?Sized`. The\n`Box<I>` implementations were also updated.\n\nThis is a breaking change due to the removal of the `std::iter::ByRef` type. All\nmentions of `ByRef<'a, T>` should be replaced with `&mut T` to migrate forward.\n\n[breaking-change]"
  },
  {
    "hash": "8550bf74c1149eb54fc568bb53b78fd2b6caec98",
    "author": "Alex Crichton",
    "date": 1423006553,
    "message": "rollup merge of #21759: aturon/new-path\n\nThis PR implements [path reform](https://github.com/rust-lang/rfcs/pull/474), and motivation and details for the change can be found there.\n\nFor convenience, the old path API is being kept as `old_path` for the time being. Updating after this PR is just a matter of changing imports to `old_path` (which is likely not needed, since the prelude entries still export the old path API).\n\nThis initial PR does not include additional normalization or platform-specific path extensions. These will be done in follow up commits or PRs.\n\n[breaking-change]\n\nCloses #20034\nCloses #12056\nCloses #11594\nCloses #14028\nCloses #14049\nCloses #10035"
  },
  {
    "hash": "3e39f0bc0e96f76610104918edaa5912f4f352df",
    "author": "Aaron Turon",
    "date": 1423002882,
    "message": "Rename std::path to std::old_path\n\nAs part of [RFC 474](https://github.com/rust-lang/rfcs/pull/474), this\ncommit renames `std::path` to `std::old_path`, leaving the existing path\nAPI in place to ease migration to the new one. Updating should be as\nsimple as adjusting imports, and the prelude still maps to the old path\nAPIs for now.\n\n[breaking-change]"
  },
  {
    "hash": "99b2bd4bfa332c5a723114d09e8bb74d5a0c7376",
    "author": "Alex Crichton",
    "date": 1422903676,
    "message": "rollup merge of #21842: alexcrichton/issue-21839\n\nNow that associated types are fully implemented the iterator adaptors only need\ntype parameters which are associated with actual storage. All other type\nparameters can either be derived from these (e.g. they are an associated type)\nor can be bare on the `impl` block itself.\n\nThis is a breaking change due to the removal of type parameters on these\niterator adaptors, but code can fairly easily migrate by just deleting the\nrelevant type parameters for each adaptor. Other behavior should not be\naffected.\n\nCloses #21839\n[breaking-change]"
  },
  {
    "hash": "0e4448409ef61c703b98e4c5b2fd99447308942d",
    "author": "Alex Crichton",
    "date": 1422824723,
    "message": "std: Remove extra type params on iter adaptors\n\nNow that associated types are fully implemented the iterator adaptors only need\ntype parameters which are associated with actual storage. All other type\nparameters can either be derived from these (e.g. they are an associated type)\nor can be bare on the `impl` block itself.\n\nThis is a breaking change due to the removal of type parameters on these\niterator adaptors, but code can fairly easily migrate by just deleting the\nrelevant type parameters for each adaptor. Other behavior should not be\naffected.\n\nCloses #21839\n[breaking-change]"
  },
  {
    "hash": "70ed3a48dfa301c5bb56de3e0a7c25214539b83c",
    "author": "Alex Crichton",
    "date": 1422817695,
    "message": "std: Add a new `env` module\n\nThis is an implementation of [RFC 578][rfc] which adds a new `std::env` module\nto replace most of the functionality in the current `std::os` module. More\ndetails can be found in the RFC itself, but as a summary the following methods\nhave all been deprecated:\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/578\n\n* `os::args_as_bytes`   => `env::args`\n* `os::args`            => `env::args`\n* `os::consts`          => `env::consts`\n* `os::dll_filename`    => no replacement, use `env::consts` directly\n* `os::page_size`       => `env::page_size`\n* `os::make_absolute`   => use `env::current_dir` + `join` instead\n* `os::getcwd`          => `env::current_dir`\n* `os::change_dir`      => `env::set_current_dir`\n* `os::homedir`         => `env::home_dir`\n* `os::tmpdir`          => `env::temp_dir`\n* `os::join_paths`      => `env::join_paths`\n* `os::split_paths`     => `env::split_paths`\n* `os::self_exe_name`   => `env::current_exe`\n* `os::self_exe_path`   => use `env::current_exe` + `pop`\n* `os::set_exit_status` => `env::set_exit_status`\n* `os::get_exit_status` => `env::get_exit_status`\n* `os::env`             => `env::vars`\n* `os::env_as_bytes`    => `env::vars`\n* `os::getenv`          => `env::var` or `env::var_string`\n* `os::getenv_as_bytes` => `env::var`\n* `os::setenv`          => `env::set_var`\n* `os::unsetenv`        => `env::remove_var`\n\nMany function signatures have also been tweaked for various purposes, but the\nmain changes were:\n\n* `Vec`-returning APIs now all return iterators instead\n* All APIs are now centered around `OsString` instead of `Vec<u8>` or `String`.\n  There is currently on convenience API, `env::var_string`, which can be used to\n  get the value of an environment variable as a unicode `String`.\n\nAll old APIs are `#[deprecated]` in-place and will remain for some time to allow\nfor migrations. The semantics of the APIs have been tweaked slightly with regard\nto dealing with invalid unicode (panic instead of replacement).\n\nThe new `std::env` module is all contained within the `env` feature, so crates\nmust add the following to access the new APIs:\n\n    #![feature(env)]\n\n[breaking-change]"
  },
  {
    "hash": "f1f9cb705df95171fce4e575374c959509e58dea",
    "author": "bors",
    "date": 1422785691,
    "message": "Auto merge of #21809 - japaric:no-copy, r=alexcrichton\n\nRemoves `Copy` from `ops::Range` (`a..b`) and `ops::RangeFrom` (`a..`)\r\n\r\n[breaking-change]\r\n\r\n---\r\n\r\nI forgot about these two in #20790, this PR also adds `Clone` to the `Peekable` adapter which used to be `Copy`able.\r\n\r\nr? @nikomatsakis or anyone"
  }
]