[
  {
    "hash": "f8b6e28e758231f611e8e7923aa607cebd150717",
    "author": "bors",
    "date": 1427533790,
    "message": "Auto merge of #23799 - reem:error-no-send, r=aturon\n\nThe Send bound is an unnecessary restriction, and though provided as a convenience, can't be removed by downstream code.\r\n\r\nThe removal of this bound is a [breaking-change] since it removes an implicit Send bound on all `E: Error` and all `Error` trait objects.\r\n\r\nTo migrate, consider if your code actually requires the Send bound and, if so, add it explicitly.\r\n\r\nFixes #23774\r\n\r\nr? @aturon"
  },
  {
    "hash": "3feeea59dbfe397cccc6760b68f7bfb8291540b7",
    "author": "Jonathan Reem",
    "date": 1427499316,
    "message": "Make `std::error::Error` not inherit from Send\n\nThe Send bound is an unnecessary restriction, and though provided as a\nconvenience, can't be removed by downstream code.\n\nThe removal of this bound is a [breaking-change] since it\nremoves an implicit Send bound on all `E: Error` and all\n`Error` trait objects.\n\nTo migrate, consider if your code actually requires the Send\nbound and, if so, add it explicitly.\n\nFixes #23774"
  },
  {
    "hash": "b24a3b82011c3b78573ace4ade3f99d7c4701a11",
    "author": "Alex Crichton",
    "date": 1427476799,
    "message": "rustc: Remove support for hyphens in crate names\n\nThis commit removes parser support for `extern crate \"foo\" as bar` as the\nrenamed crate is now required to be an identifier. Additionally this commit\nenables hard errors on crate names that contain hyphens in them, they must now\nsolely contain alphanumeric characters or underscores.\n\nIf the crate name is inferred from the file name, however, the file name\n`foo-bar.rs` will have the crate name inferred as `foo_bar`. If a binary is\nbeing emitted it will have the name `foo-bar` and a library will have the name\n`libfoo_bar.rlib`.\n\nThis commit is a breaking change for a number of reasons:\n\n* Old syntax is being removed. This was previously only issuing warnings.\n* The output for the compiler when input is received on stdin is now `rust_out`\n  instead of `rust-out`.\n* The crate name for a crate in the file `foo-bar.rs` is now `foo_bar` which can\n  affect infrastructure such as logging.\n\n[breaking-change]"
  },
  {
    "hash": "1639e51f6e4d036478705f4581de3a7417ccec0f",
    "author": "Brian Anderson",
    "date": 1427485849,
    "message": "Feature gate *all* slice patterns. #23121\n\nUntil some backwards-compatibility hazards are fixed in #23121,\nthese need to be unstable.\n\n[breaking-change]"
  },
  {
    "hash": "9754b06cd80cfcc523573535090519bec935fec3",
    "author": "Alex Crichton",
    "date": 1427401533,
    "message": "rustc: Remove support for old_impl_check\n\nThis commit removes compiler support for the `old_impl_check` attribute which\nshould in theory be entirely removed now. The last remaining use of it in the\nstandard library has been updated by moving the type parameter on the\n`old_io::Acceptor` trait into an associated type. As a result, this is a\nbreaking change for all current users of the deprecated `old_io::Acceptor`\ntrait. Code can be migrated by using the `Connection` associated type instead.\n\n[breaking-change]"
  },
  {
    "hash": "45f1324037b098d6e92da7b34cc0aba274fdae97",
    "author": "Alex Crichton",
    "date": 1427476072,
    "message": "rollup merge of #23771: aturon/stab-straggle-1\n\nMarks as `#[stable}`:\n\n* `ok_or`\n* `ok_or_else`\n* `iter_mut`\n* `cloned`\n\nSimilarly to `IteratorExt::cloned`, the `cloned` method is pared down to\nwork only on `Option<&T>`. Thus, this is a:\n\n[breaking-change]\n\nr? @alexcrichton"
  },
  {
    "hash": "c9f600bceeb5086ea292c3872ee3094ce770f9b0",
    "author": "Aaron Turon",
    "date": 1427417233,
    "message": "Stabilize some stragglers in `std::option`\n\nMarks as `#[stable}`:\n\n* `ok_or`\n* `ok_or_else`\n* `iter_mut`\n* `cloned`\n\nSimilarly to `IteratorExt::cloned`, the `cloned` method is pared down to\nwork only on `Option<&T>`. Thus, this is a:\n\n[breaking-change]"
  },
  {
    "hash": "e42521aa58be928dd62b5450c443368d29ab6a65",
    "author": "Alex Crichton",
    "date": 1427476061,
    "message": "rollup merge of #23535: pnkfelix/fsk-filling-drop\n\nReplace zeroing-on-drop with filling-on-drop.\n\nThis is meant to set the stage for removing *all* zeroing and filling (on drop) in the future.\n\nNote that the code is meant to be entirely abstract with respect to the particular values used for the drop flags: the final commit demonstrates how to go from zeroing-on-drop to filling-on-drop by changing the value of three constants (in two files).\n\nSee further discussion on the internals thread:\n  http://internals.rust-lang.org/t/attention-hackers-filling-drop/1715/11\n\n[breaking-change] especially for structs / enums using `#[unsafe_no_drop_flag]`."
  },
  {
    "hash": "3b13b9c2b4e72d08cb1c68024ccc4f50001f4878",
    "author": "Alex Crichton",
    "date": 1427236034,
    "message": "rollup merge of #23638: pnkfelix/fsk-reject-specialized-drops\n\nReject specialized Drop impls.\n\nSee Issue #8142 for discussion.\n\nThis makes it illegal for a Drop impl to be more specialized than the original item.\n\nSo for example, all of the following are now rejected (when they would have been blindly accepted before):\n\n```rust\nstruct S<A> { ... };\nimpl Drop for S<i8> { ... } // error: specialized to concrete type\n\nstruct T<'a> { ... };\nimpl Drop for T<'static> { ... } // error: specialized to concrete region\n\nstruct U<A> { ... };\nimpl<A:Clone> Drop for U<A> { ... } // error: added extra type requirement\n\nstruct V<'a,'b>;\nimpl<'a,'b:a> Drop for V<'a,'b> { ... } // error: added extra region requirement\n```\n\nDue to examples like the above, this is a [breaking-change].\n\n(The fix is to either remove the specialization from the `Drop` impl, or to transcribe the requirements into the struct/enum definition; examples of both are shown in the PR's fixed to `libstd`.)\n\n----\n\nThis is likely to be the last thing blocking the removal of the `#[unsafe_destructor]` attribute.\n\nFix #8142\nFix #23584"
  },
  {
    "hash": "5b2e8693e42dee545d336c0364773b3fbded93a5",
    "author": "Felix S. Klock II",
    "date": 1427232443,
    "message": "Reject specialized Drop impls.\n\nSee Issue 8142 for discussion.\n\nThis makes it illegal for a Drop impl to be more specialized than the\noriginal item.\n\nSo for example, all of the following are now rejected (when they would\nhave been blindly accepted before):\n\n```rust\nstruct S<A> { ... };\nimpl Drop for S<i8> { ... } // error: specialized to concrete type\n\nstruct T<'a> { ... };\nimpl Drop for T<'static> { ... } // error: specialized to concrete region\n\nstruct U<A> { ... };\nimpl<A:Clone> Drop for U<A> { ... } // error: added extra type requirement\n\nstruct V<'a,'b>;\nimpl<'a,'b:a> Drop for V<'a,'b> { ... } // error: added extra region requirement\n```\n\nDue to examples like the above, this is a [breaking-change].\n\n(The fix is to either remove the specialization from the `Drop` impl,\nor to transcribe the requirements into the struct/enum definition;\nexamples of both are shown in the PR's fixed to `libstd`.)\n\n----\n\nThis is likely to be the last thing blocking the removal of the\n`#[unsafe_destructor]` attribute.\n\nIncludes two new error codes for the new dropck check.\n\nUpdate run-pass tests to accommodate new dropck pass.\n\nUpdate tests and docs to reflect new destructor restriction.\n\n----\n\nImplementation notes:\n\nWe identify Drop impl specialization by not being as parametric as the\nstruct/enum definition via unification.\n\nMore specifically:\n\n 1. Attempt unification of a skolemized instance of the struct/enum\n    with an instance of the Drop impl's type expression where all of\n    the impl's generics (i.e. the free variables of the type\n    expression) have been replaced with unification variables.\n\n 2. If unification fails, then reject Drop impl as specialized.\n\n 3. If unification succeeds, check if any of the skolemized\n    variables \"leaked\" into the constraint set for the inference\n    context; if so, then reject Drop impl as specialized.\n\n 4. Otherwise, unification succeeded without leaking skolemized\n    variables: accept the Drop impl.\n\nWe identify whether a Drop impl is injecting new predicates by simply\nlooking whether the predicate, after an appropriate substitution,\nappears on the struct/enum definition."
  },
  {
    "hash": "9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9",
    "author": "Niko Matsakis",
    "date": 1427155050,
    "message": "Fallout from changing fn traits to use inheritance rather than bridge\nimpls. This is a [breaking-change] (for gated code) in that when you\nimplement `Fn` (`FnMut`) you must also implement `FnOnce`. This commit\ndemonstrates how to fix it."
  },
  {
    "hash": "f78815979706bca435bff80155b28acc80a19781",
    "author": "Steve Klabnik",
    "date": 1427144743,
    "message": "Rollup merge of #23119 - nikomatsakis:issue-23116-ref-mut, r=pnkfelix\n\nDon't allow upcasting to a supertype in the type of the match discriminant. Fixes #23116.\r\n\r\nThis is a [breaking-change] in that it closes a type hole that previously existed.\r\n\r\nr? @pnkfelix"
  },
  {
    "hash": "753efb5042563dd34a4a524197fa14a129ddf449",
    "author": "Alex Crichton",
    "date": 1427148650,
    "message": "rollup merge of #23601: nikomatsakis/by-value-index\n\nThis is a [breaking-change]. When indexing a generic map (hashmap, etc) using the `[]` operator, it is now necessary to borrow explicitly, so change `map[key]` to `map[&key]` (consistent with the `get` routine). However, indexing of string-valued maps with constant strings can now be written `map[\"abc\"]`.\n\nr? @japaric\ncc @aturon @Gankro"
  },
  {
    "hash": "2153c581ef66de1537286b58b1b323d24c25d07f",
    "author": "Alex Crichton",
    "date": 1427148549,
    "message": "rollup merge of #23557: aturon/rfc-909\n\nThis commit implements [RFC 909](https://github.com/rust-lang/rfcs/pull/909):\n\nThe `std::thread_local` module is now deprecated, and its contents are\navailable directly in `std::thread` as `LocalKey`, `LocalKeyState`, and\n`ScopedKey`.\n\nThe macros remain exactly as they were, which means little if any code\nshould break. Nevertheless, this is technically a:\n\n[breaking-change]\n\nCloses #23547"
  },
  {
    "hash": "6bd3ab0d8140053475a901ad4e2e80e98955bcb0",
    "author": "Aaron Turon",
    "date": 1427135334,
    "message": "Implement RFC 909: move thread_local into thread\n\nThis commit implements [RFC\n909](https://github.com/rust-lang/rfcs/pull/909):\n\nThe `std::thread_local` module is now deprecated, and its contents are\navailable directly in `std::thread` as `LocalKey`, `LocalKeyState`, and\n`ScopedKey`.\n\nThe macros remain exactly as they were, which means little if any code\nshould break. Nevertheless, this is technically a:\n\n[breaking-change]\n\nCloses #23547"
  },
  {
    "hash": "b97e1cc28e0d3fe6a745a02a7c1750564a090f34",
    "author": "Alex Crichton",
    "date": 1427148548,
    "message": "rollup merge of #23541: aturon/stab-error\n\nThis small commit stabilizes the `Error` trait as-is, except that `Send`\nand `Debug` are added as constraints. The `Send` constraint is because\nmost uses of `Error` will be for trait objects, and by default we would\nlike these objects to be transferrable between threads. The `Debug`\nconstraint is to ensure that e.g. `Box<Error>` is `Debug`, and because\ntypes that implement `Display` should certainly implement `Debug` in any case.\n\nIn the near future we expect to add `Any`-like downcasting features to\n`Error`, but this is waiting on some additional\nmechanisms (`Reflect`). It will be added before 1.0 via default methods.\n\n[breaking-change]\n\nr? @alexcrichton\n\nCloses #21790"
  },
  {
    "hash": "9231ceb6dd273d8101e1b3906e6060f802e6423d",
    "author": "Aaron Turon",
    "date": 1427135239,
    "message": "Stabilize the Error trait\n\nThis small commit stabilizes the `Error` trait as-is, except that `Send`\nand `Debug` are added as constraints. The `Send` constraint is because\nmost uses of `Error` will be for trait objects, and by default we would\nlike these objects to be transferrable between threads. The `Debug`\nconstraint is to ensure that e.g. `Box<Error>` is `Debug`, and because\ntypes that implement `Display` should certainly implement `Debug` in any case.\n\nIn the near future we expect to add `Any`-like downcasting features to\n`Error`, but this is waiting on some additional\nmechanisms (`Reflect`). It will be added before 1.0 via default methods.\n\n[breaking-change]"
  },
  {
    "hash": "8389253df0431e58bfe0a8e0e3949d58ebe7400f",
    "author": "Aaron Turon",
    "date": 1427148105,
    "message": "Add generic conversion traits\n\nThis commit:\n\n* Introduces `std::convert`, providing an implementation of\nRFC 529.\n\n* Deprecates the `AsPath`, `AsOsStr`, and `IntoBytes` traits, all\nin favor of the corresponding generic conversion traits.\n\n  Consequently, various IO APIs now take `AsRef<Path>` rather than\n`AsPath`, and so on. Since the types provided by `std` implement both\ntraits, this should cause relatively little breakage.\n\n* Deprecates many `from_foo` constructors in favor of `from`.\n\n* Changes `PathBuf::new` to take no argument (creating an empty buffer,\n  as per convention). The previous behavior is now available as\n  `PathBuf::from`.\n\n* De-stabilizes `IntoCow`. It's not clear whether we need this separate trait.\n\nCloses #22751\nCloses #14433\n\n[breaking-change]"
  },
  {
    "hash": "19fef72a8c14100029e5ce39cbc5472ab091dad8",
    "author": "Felix S. Klock II",
    "date": 1426847120,
    "message": "Added panic-on-overflow for rhs of left and right shift expressions.\n\nThis includes a slight refactoring of the `cast_shift_rhs` and related\nfunctions in `trans::base`, so that I can call them from much later in\nthe compiler's control flow (so that we can clearly dilineate where\nautomatic conversions of the RHS occur, versus where we check it).\n\nThe rhs-checking and fallback-masking is generalized to 8- and 16-bit\nvalues, and the fallback-masking is turned on unconditionally.\n\nFix #10183.\n\nIs this a [breaking-change]?  I would argue it is not; it only adds a\nstrict definition to what was previously undefined behavior; however,\nthere might be code that was e.g. assuming that `1_i8 << 17` yields 0.\n(This happens in certain contexts and at certain optimization levels.)"
  },
  {
    "hash": "ad41e7cd7a3d1969e666508d7e4a3ba305cee2ec",
    "author": "Alex Crichton",
    "date": 1427148439,
    "message": "rollup merge of #23119: nikomatsakis/issue-23116-ref-mut\n\nDon't allow upcasting to a supertype in the type of the match discriminant. Fixes #23116.\n\nThis is a [breaking-change] in that it closes a type hole that previously existed.\n\nr? @pnkfelix"
  },
  {
    "hash": "45fae882568d9bf36ade39f210a2721d05e556dd",
    "author": "Niko Matsakis",
    "date": 1427103043,
    "message": "When matching against a pattern (either via `match` or `let`) that\ncontains ref-bindings, do not permit any upcasting from the type of\nthe value being matched. Similarly, do not permit coercion in a `let`.\n\nThis is a [breaking-change] in that it closes a type hole that\npreviously existed, and in that coercion is not performed. You should\nbe able to work around the latter by converting:\n\n```rust\nlet ref mut x: T = expr;\n```\n\ninto\n\n```rust\nlet x: T = expr;\nlet ref mut x = x;\n```\n\nRestricting coercion not to apply in the case of `let ref` or `let ref mut` is sort\nof unexciting to me, but seems the best solution:\n\n1. Mixing coercion and `let ref` or `let ref mut` is a bit odd, because you are taking\n   the address of a (coerced) temporary, but only sometimes. It's not syntactically evident,\n   in other words, what's going on. When you're doing a coercion, you're kind of\n\n2. Put another way, I would like to preserve the relationship that\n   `equality <= subtyping <= coercion <= as-coercion`, where this is\n   an indication of the number of `(T1,T2)` pairs that are accepted by\n   the various relations. Trying to mix `let ref mut` and coercion\n   would create another kind of relation that is like coercion, but\n   acts differently in the case where a precise match is needed.\n\n3. In any case, this is strictly more conservative than what we had\n   before and we can undo it in the future if we find a way to make\n   coercion mix with type equality.\n\nThe change to match I feel ok about but similarly unthrilled. There is\nsome subtle text already concerning whether to use eqtype or subtype\nfor identifier bindings. The best fix I think would be to always have\nmatch use strict equality but use subtyping on identifier bindings,\nbut the comment `(*)` explains why that's not working at the moment.\nAs above, I think we can change this as we clean up the code there."
  },
  {
    "hash": "a91eece96b1c945bebb01a7e906dabc2d736a131",
    "author": "Manish Goregaokar",
    "date": 1427066666,
    "message": "Rollup merge of #23559 - aturon:future-proof-map-index, r=Gankro\n\n This commit removes the `IndexMut` impls on `HashMap` and `BTreeMap`, in\norder to future-proof the API against the eventual inclusion of an\n`IndexSet` trait.\n\nIdeally, we would eventually be able to support:\n\n```rust\nmap[owned_key] = val;\nmap[borrowed_key].mutating_method(arguments);\n&mut map[borrowed_key];\n```\n\nbut to keep the design space as unconstrained as possible, we do not\ncurrently want to support `IndexMut`, in case some other strategy will\neventually be needed.\n\nCode currently using mutating index notation can use `get_mut` instead.\n\n[breaking-change]\n\nCloses #23448\n\nr? @Gankro"
  },
  {
    "hash": "5fe0bb743a0af0413f8989a70a4f926fa5c63074",
    "author": "Aaron Turon",
    "date": 1426873591,
    "message": "Future-proof indexing on maps: remove IndexMut\n\nThis commit removes the `IndexMut` impls on `HashMap` and `BTreeMap`, in\norder to future-proof the API against the eventual inclusion of an\n`IndexSet` trait.\n\nIdeally, we would eventually be able to support:\n\n```rust\nmap[owned_key] = val;\nmap[borrowed_key].mutating_method(arguments);\n&mut map[borrowed_key];\n```\n\nbut to keep the design space as unconstrained as possible, we do not\ncurrently want to support `IndexMut`, in case some other strategy will\neventually be needed.\n\nCode currently using mutating index notation can use `get_mut` instead.\n\n[breaking-change]\n\nCloses #23448"
  },
  {
    "hash": "6107e4c0b88d9e22482ed88c52b98c2ec2034bb1",
    "author": "Manish Goregaokar",
    "date": 1426835595,
    "message": "Rollup merge of  #23534 - steveklabnik:remove_sched_threads, r=alexcrichton\n\nAs @alexcrichton says, this was really a libgreen thing, and isn't\nrelevant now.\n\nAs this removes a technically-public function, this is a\n\n[breaking-change]"
  },
  {
    "hash": "71321ff33fa3fe71cc1df541b3d0547b4e208923",
    "author": "Steve Klabnik",
    "date": 1426809967,
    "message": "Remove rt::default_sched_threads and RUST_THREADS.\n\nAs @alexcrichton says, this was really a libgreen thing, and isn't\nrelevant now.\n\nAs this removes a technically-public function, this is a\n\n[breaking-change]\n\nConflicts:\n\tsrc/libtest/lib.rs"
  },
  {
    "hash": "e2d32b74ecedc3f603def4d5130c0c300edce7d1",
    "author": "Manish Goregaokar",
    "date": 1426835591,
    "message": "Rollup merge of #23525 - steveklabnik:test_tasks, r=alexcrichton\n\n We don't use 'task' anymore, these are now threads.\n\nBecause this changes the name of a compiler option, this is\n\n[breaking-change]\n\nI think this is small enough to not need an RFC, nor a period of accepting both. If we want to take both for a while, I can change the patch."
  },
  {
    "hash": "7cbc42849f7586d3c567d7ac8f202839f9b968e8",
    "author": "Steve Klabnik",
    "date": 1426794176,
    "message": "RUST_TEST_TASKS -> RUST_TEST_THREADS\n\nWe don't use 'task' anymore, these are now threads.\n\nBecause this changes the name of a compiler option, this is\n\n[breaking-change]"
  },
  {
    "hash": "3e433738fb1ab9f353c943d60061d72024c6af07",
    "author": "Manish Goregaokar",
    "date": 1426835591,
    "message": "Rollup merge of #23504 - alexcrichton:parse-error-not-unit, r=aturon\n\n The IP and socket address types all had `FromStr` implemented but the\nimplementations were not marked stable, nor was the error type returned ready to\nbe properly stabilized.\n\nThis commit marks the implementations of `FromStr` as stable and also renamed\nthe `ParseError` structure to `AddrParseError`. The error is now also an opaque\nstructure that cannot be constructed outside the standard library.\n\ncc #22949\n[breaking-change]"
  },
  {
    "hash": "fda8673531c2ecea13c86216f964feb6091b4ade",
    "author": "bors",
    "date": 1426825804,
    "message": "Auto merge of #23504 - alexcrichton:parse-error-not-unit, r=aturon\n\nThe IP and socket address types all had `FromStr` implemented but the\r\nimplementations were not marked stable, nor was the error type returned ready to\r\nbe properly stabilized.\r\n\r\nThis commit marks the implementations of `FromStr` as stable and also renamed\r\nthe `ParseError` structure to `AddrParseError`. The error is now also an opaque\r\nstructure that cannot be constructed outside the standard library.\r\n\r\ncc #22949\r\n[breaking-change]"
  },
  {
    "hash": "f2e3c7469b56cd744e613a05a1ea73f441f66401",
    "author": "Alex Crichton",
    "date": 1426734615,
    "message": "std: Stabilize FromStr implementations in std::net\n\nThe IP and socket address types all had `FromStr` implemented but the\nimplementations were not marked stable, nor was the error type returned ready to\nbe properly stabilized.\n\nThis commit marks the implementations of `FromStr` as stable and also renamed\nthe `ParseError` structure to `AddrParseError`. The error is now also an opaque\nstructure that cannot be constructed outside the standard library.\n\ncc #22949\n[breaking-change]"
  },
  {
    "hash": "7f53b943f94b338e4c5401f1ce9efbe7da92b0c5",
    "author": "bors",
    "date": 1426792522,
    "message": "Auto merge of #23430 - alexcrichton:io-error, r=aturon\n\nThis commit stabilizes the `ErrorKind` enumeration which is consumed by and\r\ngenerated by the `io::Error` type. The purpose of this type is to serve as a\r\ncross-platform namespace to categorize errors into. Two specific issues are\r\naddressed as part of this stablization:\r\n\r\n* The naming of each variant was scrutinized and some were tweaked. An example\r\n  is how `FileNotFound` was renamed to simply `NotFound`. These names should not\r\n  show either a Unix or Windows bias and the set of names is intended to grow\r\n  over time. For now the names will likely largely consist of those errors\r\n  generated by the I/O APIs in the standard library.\r\n\r\n* The mapping of OS error codes onto kinds has been altered. Coalescing no\r\n  longer occurs (multiple error codes become one kind). It is intended that each\r\n  OS error code, if bound, corresponds to only one `ErrorKind`. The current set\r\n  of error kinds was expanded slightly to include some networking errors.\r\n\r\nThis commit also adds a `raw_os_error` function which returns an `Option<i32>`\r\nto extract the underlying raw error code from the `Error`.\r\n\r\nCloses #16666\r\n\r\n[breaking-change]"
  },
  {
    "hash": "a32bb1bcc4c6b8806b1058c2f654415341240233",
    "author": "Manish Goregaokar",
    "date": 1426735174,
    "message": "Rollup merge of #23475 - nikomatsakis:closure-ret-syntax, r=acrichto\n\n Require braces when a closure has an explicit return type. This is a [breaking-change]: instead of a closure like `|| -> i32 22`, prefer `|| -> i32 { 22 }`.\n\nFixes #23420."
  },
  {
    "hash": "c225824bded695c8bced713f5a4c62fe327277bc",
    "author": "Niko Matsakis",
    "date": 1426723647,
    "message": "Require braces when a closure has an explicit return type. This is a\n[breaking-change]: instead of a closure like `|| -> i32 22`, prefer `||\n-> i32 { 22 }`.\n\nFixes #23420."
  },
  {
    "hash": "46f649c479ce40f3b4590590dda6c2895e8d60f6",
    "author": "bors",
    "date": 1426667242,
    "message": "Auto merge of #22838 - petrochenkov:bytelit, r=alexcrichton\n\nThis patch changes the type of byte string literals from `&[u8]` to `&[u8; N]`.\r\nIt also implements some necessary traits (`IntoBytes`, `Seek`, `Read`, `BufRead`) for fixed-size arrays (also related to #21725) and adds test for #17233, which seems to be resolved.\r\n\r\nFixes #18465\r\n[breaking-change]"
  },
  {
    "hash": "c10918905fda1344e78bc16e6e73294d096ee97d",
    "author": "bors",
    "date": 1426648932,
    "message": "Auto merge of #23452 - nikomatsakis:unsafety-subtyping, r=nrc\n\nSafe fns are no longer subtypes of unsafe fns, but you can coerce from one to the other.\r\n\r\nThis is a [breaking-change] in that impl fns must now be declared `unsafe` if the trait is declared `unsafe`. In some rare cases, the subtyping change may also direct affect you, but no such cases were encountered in practice.\r\n\r\nFixes #23449.\r\n\r\nr? @nrc"
  },
  {
    "hash": "ea8b82e90c450febb1f26a07862a1ec89c22addd",
    "author": "bors",
    "date": 1426627382,
    "message": "Auto merge of #23376 - eddyb:die-tydesc-die, r=nikomatsakis\n\nFinal remnant of reflection is gone. Also, virtual `Trait` destructors are no longer tied to `Box`.\r\nThat means they can be used to drop any instance of the type (used in libarena to replace TyDesc).\r\n\r\nThis is [breaking-change] for direct users of intrinsics:\r\n* use `intrinsics::type_name::<T>()` instead of `(*intrinsics::get_tydesc::<T>()).name`\r\n* the only way to get the destructor is from a trait object's vtable (see libarena changes)\r\n\r\nr? @pcwalton f? @dotdash"
  },
  {
    "hash": "c64d671671aea2e44ee7fc6eb00ee75fc30ed7b9",
    "author": "bors",
    "date": 1426598988,
    "message": "Auto merge of #23423 - nikomatsakis:issue-18737-trait-subtyping, r=nrc\n\nThis upcast coercion currently never requires vtable changes. It should be generalized. \r\n\r\nThis is a [breaking-change] -- if you have an impl on an object type like `impl SomeTrait`, then this will no longer be applicable to object types like `SomeTrait+Send`. In the standard library, this primarily affected `Any`, and this PR adds impls for `Any+Send` as to keep the API the same in practice. An alternate workaround is to use UFCS form or standalone fns. For more details, see <https://github.com/rust-lang/rust/issues/18737#issuecomment-78450798>.\r\n\r\nr? @nrc"
  },
  {
    "hash": "c2671b59ccbc899b8defbabf453e88f89900c3a0",
    "author": "Manish Goregaokar",
    "date": 1426585797,
    "message": "Rollup merge of #23409 - GBGamer:patch-2, r=alexcrichton\n\n To the correct MAP_NORESERVE. Every other instance is known as MAP_NORESERVE, so this is just a basic typo.\n\nI really doubt this will break anybody's but my own code.\n\n[breaking-change]"
  },
  {
    "hash": "170ccd615f976fc9e90a8f14ce6c373bfdf01533",
    "author": "Nick Cameron",
    "date": 1426457034,
    "message": "Error if `pub use` references a private item.\n\n[breaking-change]\n\nCloses #23266"
  },
  {
    "hash": "e46610966f798a083350724461648c6ffdd151f4",
    "author": "bors",
    "date": 1426562630,
    "message": "Auto merge of #23104 - japaric:inherent, r=nikomatsakis\n\n- Allow inherent implementations on `char`, `str`, `[T]`, `*const T`, `*mut T` and all the numeric primitives.\r\n- copy `unicode::char::CharExt` methods into `impl char`\r\n- remove `unicode::char::CharExt`, its re-export `std::char::CharExt` and `CharExt` from the prelude\r\n- copy `collections::str::StrExt` methods into `impl str`\r\n- remove `collections::str::StrExt` its re-export `std::str::StrExt`, and `StrExt` from the prelude\r\n- copy `collections::slice::SliceExt` methods into `impl<T> [T]`\r\n- remove `collections::slice::SliceExt` its re-export `std::slice::SliceExt`, and `SliceExt` from the prelude\r\n- copy `core::ptr::PtrExt` methods into `impl<T> *const T`\r\n- remove `core::ptr::PtrExt` its re-export `std::ptr::PtrExt`, and `PtrExt` from the prelude\r\n- copy `core::ptr::PtrExt` and `core::ptr::MutPtrExt` methods into `impl<T> *mut T`\r\n- remove `core::ptr::MutPtrExt` its re-export `std::ptr::MutPtrExt`, and `MutPtrExt` from the prelude\r\n- copy `core::num::Int` and `core::num::SignedInt` methods into `impl i{8,16,32,64,size}`\r\n- copy `core::num::Int` and `core::num::UnsignedInt` methods into `impl u{8,16,32,64,size}`\r\n- remove `core::num::UnsignedInt` and its re-export `std::num::UnsignedInt`\r\n- move `collections` tests into its own crate: `collectionstest`\r\n- copy `core::num::Float` methods into `impl f{32,64}`\r\n\r\nBecause this PR removes several traits, this is a [breaking-change], however functionality remains unchanged and breakage due to unresolved imports should be minimal. If you encounter an error due to an unresolved import, simply remove the import:\r\n\r\n``` diff\r\n  fn main() {\r\n-     use std::num::UnsignedInt;  //~ error: unresolved import `std::num::UnsignedInt`.\r\n-\r\n      println!(\"{}\", 8_usize.is_power_of_two());\r\n  }\r\n```\r\n\r\n---\r\n\r\ncc  #16862\r\n[preview docs](http://japaric.github.io/inherent/std/index.html)\r\n[unicode::char](http://japaric.github.io/inherent/unicode/primitive.char.html)\r\n[collections::str](http://japaric.github.io/inherent/collections/primitive.str.html)\r\n[std::f32](http://japaric.github.io/inherent/std/primitive.f32.html)"
  },
  {
    "hash": "a2572885ab62512a2508868a27c22d615382174a",
    "author": "bors",
    "date": 1426553426,
    "message": "Auto merge of #23352 - alexcrichton:stabilize-net, r=aturon\n\nThis commit performs a stabilization pass over the std::net module,\r\nincorporating the changes from RFC 923. Specifically, the following actions were\r\ntaken:\r\n\r\nStable functionality:\r\n\r\n* `net` (the name)\r\n* `Shutdown`\r\n* `Shutdown::{Read, Write, Both}`\r\n* `lookup_host`\r\n* `LookupHost`\r\n* `SocketAddr`\r\n* `SocketAddr::{V4, V6}`\r\n* `SocketAddr::port`\r\n* `SocketAddrV4`\r\n* `SocketAddrV4::{new, ip, port}`\r\n* `SocketAddrV6`\r\n* `SocketAddrV4::{new, ip, port, flowinfo, scope_id}`\r\n* Common trait impls for socket addr structures\r\n* `ToSocketAddrs`\r\n* `ToSocketAddrs::Iter`\r\n* `ToSocketAddrs::to_socket_addrs`\r\n* `ToSocketAddrs for {SocketAddr*, (Ipv*Addr, u16), str, (str, u16)}`\r\n* `Ipv4Addr`\r\n* `Ipv4Addr::{new, octets, to_ipv6_compatible, to_ipv6_mapped}`\r\n* `Ipv6Addr`\r\n* `Ipv6Addr::{new, segments, to_ipv4}`\r\n* `TcpStream`\r\n* `TcpStream::connect`\r\n* `TcpStream::{peer_addr, local_addr, shutdown, try_clone}`\r\n* `{Read,Write} for {TcpStream, &TcpStream}`\r\n* `TcpListener`\r\n* `TcpListener::bind`\r\n* `TcpListener::{local_addr, try_clone, accept, incoming}`\r\n* `Incoming`\r\n* `UdpSocket`\r\n* `UdpSocket::bind`\r\n* `UdpSocket::{recv_from, send_to, local_addr, try_clone}`\r\n\r\nUnstable functionality:\r\n\r\n* Extra methods on `Ipv{4,6}Addr` for various methods of inspecting the address\r\n  and determining qualities of it.\r\n* Extra methods on `TcpStream` to configure various protocol options.\r\n* Extra methods on `UdpSocket` to configure various protocol options.\r\n\r\nDeprecated functionality:\r\n\r\n* The `socket_addr` method has been renamed to `local_addr`\r\n\r\nThis commit is a breaking change due to the restructuring of the `SocketAddr`\r\ntype as well as the renaming of the `socket_addr` method. Migration should be\r\nfairly straightforward, however, after accounting for the new level of\r\nabstraction in `SocketAddr` (protocol distinction at the socket address level,\r\nnot the IP address).\r\n\r\n[breaking-change]"
  },
  {
    "hash": "f798674b86382929ca17c88de422a6e2fdb27f2a",
    "author": "Alex Crichton",
    "date": 1426290462,
    "message": "std: Stabilize the `net` module\n\nThis commit performs a stabilization pass over the std::net module,\nincorporating the changes from RFC 923. Specifically, the following actions were\ntaken:\n\nStable functionality:\n\n* `net` (the name)\n* `Shutdown`\n* `Shutdown::{Read, Write, Both}`\n* `lookup_host`\n* `LookupHost`\n* `SocketAddr`\n* `SocketAddr::{V4, V6}`\n* `SocketAddr::port`\n* `SocketAddrV4`\n* `SocketAddrV4::{new, ip, port}`\n* `SocketAddrV6`\n* `SocketAddrV4::{new, ip, port, flowinfo, scope_id}`\n* Common trait impls for socket addr structures\n* `ToSocketAddrs`\n* `ToSocketAddrs::Iter`\n* `ToSocketAddrs::to_socket_addrs`\n* `ToSocketAddrs for {SocketAddr*, (Ipv*Addr, u16), str, (str, u16)}`\n* `Ipv4Addr`\n* `Ipv4Addr::{new, octets, to_ipv6_compatible, to_ipv6_mapped}`\n* `Ipv6Addr`\n* `Ipv6Addr::{new, segments, to_ipv4}`\n* `TcpStream`\n* `TcpStream::connect`\n* `TcpStream::{peer_addr, local_addr, shutdown, try_clone}`\n* `{Read,Write} for {TcpStream, &TcpStream}`\n* `TcpListener`\n* `TcpListener::bind`\n* `TcpListener::{local_addr, try_clone, accept, incoming}`\n* `Incoming`\n* `UdpSocket`\n* `UdpSocket::bind`\n* `UdpSocket::{recv_from, send_to, local_addr, try_clone}`\n\nUnstable functionality:\n\n* Extra methods on `Ipv{4,6}Addr` for various methods of inspecting the address\n  and determining qualities of it.\n* Extra methods on `TcpStream` to configure various protocol options.\n* Extra methods on `UdpSocket` to configure various protocol options.\n\nDeprecated functionality:\n\n* The `socket_addr` method has been renamed to `local_addr`\n\nThis commit is a breaking change due to the restructuring of the `SocketAddr`\ntype as well as the renaming of the `socket_addr` method. Migration should be\nfairly straightforward, however, after accounting for the new level of\nabstraction in `SocketAddr` (protocol distinction at the socket address level,\nnot the IP address).\n\n[breaking-change]"
  },
  {
    "hash": "92dd995e1705a8c398a5266c8483e2519e494f47",
    "author": "bors",
    "date": 1426544032,
    "message": "Auto merge of #23331 - eddyb:attr-lookahead, r=nikomatsakis\n\nMost of the changes are cleanup facilitated by straight-forward attribute handling.\r\nThis is a minor [breaking-change] for users of `quote_stmt!` (returns `Option<P<Stmt>>` now) and some of the public methods in `Parser` (a few `Vec<Attribute>` arguments/returns were removed).\r\n\r\nr? @nikomatsakis"
  },
  {
    "hash": "bde09eea35113f25d4e0bcc4a8344de971f3069a",
    "author": "bors",
    "date": 1426525331,
    "message": "Auto merge of #23347 - aturon:stab-misc, r=alexcrichton\n\nThis commit deprecates the `count`, `range` and `range_step` functions\r\nin `iter`, in favor of range notation. To recover all existing\r\nfunctionality, a new `step_by` adapter is provided directly on `ops::Range`\r\nand `ops::RangeFrom`.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton"
  },
  {
    "hash": "1d5983aded687149239e8943debd51abdce5d27b",
    "author": "Aaron Turon",
    "date": 1426283113,
    "message": "Deprecate range, range_step, count, distributions\n\nThis commit deprecates the `count`, `range` and `range_step` functions\nin `iter`, in favor of range notation. To recover all existing\nfunctionality, a new `step_by` adapter is provided directly on `ops::Range`\nand `ops::RangeFrom`.\n\n[breaking-change]"
  },
  {
    "hash": "542e2bb3910f8860d49b4b40bcd78d9c74e733ff",
    "author": "bors",
    "date": 1426444974,
    "message": "Auto merge of #23353 - alexcrichton:stabilize-os, r=aturon\n\nThis commit starts to organize the `std::os::$platform` modules and in the\r\nprocess stabilizes some of the functionality contained within. The organization\r\nof these modules will reflect the organization of the standard library itself\r\nwith extension traits for primitives in the same corresponding module.\r\n\r\nThe OS-specific modules will grow more functionality over time including\r\nconcrete types that are not extending functionality of other structures, and\r\nthese will either go into the closest module in `std::os::$platform` or they\r\nwill grow a new module in the hierarchy.\r\n\r\nThe following items are now stable:\r\n\r\n* `os::{unix, windows}`\r\n* `unix::ffi`\r\n* `unix::ffi::OsStrExt`\r\n* `unix::ffi::OsStrExt::{from_bytes, as_bytes, to_cstring}`\r\n* `unix::ffi::OsString`\r\n* `unix::ffi::OsStringExt::{from_vec, into_vec}`\r\n* `unix::process`\r\n* `unix::process::CommandExt`\r\n* `unix::process::CommandExt::{uid, gid}`\r\n* `unix::process::ExitStatusExt`\r\n* `unix::process::ExitStatusExt::signal`\r\n* `unix::prelude`\r\n* `windows::ffi`\r\n* `windows::ffi::OsStringExt`\r\n* `windows::ffi::OsStringExt::from_wide`\r\n* `windows::ffi::OsStrExt`\r\n* `windows::ffi::OsStrExt::encode_wide`\r\n* `windows::prelude`\r\n\r\nThe following items remain unstable:\r\n\r\n* `unix::io`\r\n* `unix::io::{Fd, AsRawFd}`\r\n* `unix::fs::{PermissionsExt, OpenOptionsExt}`\r\n* `windows::io`\r\n* `windows::io::{Handle, AsRawHandle}`\r\n* `windows::io::{Socket, AsRawSocket}`\r\n* `windows::fs`\r\n* `windows::fs::OpenOptionsExt`\r\n\r\nDue to the reorgnization of the platform extension modules, this commit is a\r\nbreaking change. Most imports can be fixed by adding the relevant libstd module\r\nin the `use` path (such as `ffi` or `fs`).\r\n\r\n[breaking-change]"
  },
  {
    "hash": "1f5f76adc36082ec514a6cfa4ad2d7e6655a5253",
    "author": "Alex Crichton",
    "date": 1426440514,
    "message": "std: Stabilize portions of `std::os::$platform`\n\nThis commit starts to organize the `std::os::$platform` modules and in the\nprocess stabilizes some of the functionality contained within. The organization\nof these modules will reflect the organization of the standard library itself\nwith extension traits for primitives in the same corresponding module.\n\nThe OS-specific modules will grow more functionality over time including\nconcrete types that are not extending functionality of other structures, and\nthese will either go into the closest module in `std::os::$platform` or they\nwill grow a new module in the hierarchy.\n\nThe following items are now stable:\n\n* `os::{unix, windows}`\n* `unix::ffi`\n* `unix::ffi::OsStrExt`\n* `unix::ffi::OsStrExt::{from_bytes, as_bytes, to_cstring}`\n* `unix::ffi::OsString`\n* `unix::ffi::OsStringExt::{from_vec, into_vec}`\n* `unix::process`\n* `unix::process::CommandExt`\n* `unix::process::CommandExt::{uid, gid}`\n* `unix::process::ExitStatusExt`\n* `unix::process::ExitStatusExt::signal`\n* `unix::prelude`\n* `windows::ffi`\n* `windows::ffi::OsStringExt`\n* `windows::ffi::OsStringExt::from_wide`\n* `windows::ffi::OsStrExt`\n* `windows::ffi::OsStrExt::encode_wide`\n* `windows::prelude`\n\nThe following items remain unstable:\n\n* `unix::io`\n* `unix::io::{Fd, AsRawFd}`\n* `unix::fs::{PermissionsExt, OpenOptionsExt}`\n* `windows::io`\n* `windows::io::{Handle, AsRawHandle}`\n* `windows::io::{Socket, AsRawSocket}`\n* `windows::fs`\n* `windows::fs::OpenOptionsExt`\n\nDue to the reorgnization of the platform extension modules, this commit is a\nbreaking change. Most imports can be fixed by adding the relevant libstd module\nin the `use` path (such as `ffi` or `fs`).\n\n[breaking-change]"
  },
  {
    "hash": "54660fc392343e4ddee8a0ea1ca196ffc533585b",
    "author": "bors",
    "date": 1426411122,
    "message": "Auto merge of #23316 - alexcrichton:less-question-sized, r=aturon\n\nIt is a frequent pattern among I/O functions to take `P: AsPath + ?Sized` or\r\n`AsOsStr` instead of `AsPath`. Most of these functions do not need to take\r\nownership of their argument, but for libraries in general it's much more\r\nergonomic to not deal with `?Sized` at all and simply require an argument `P`\r\ninstead of `&P`.\r\n\r\nThis change is aimed at removing unsightly `?Sized` bounds while retaining the\r\nsame level of usability as before. All affected functions now take ownership of\r\ntheir arguments instead of taking them by reference, but due to the forwarding\r\nimplementations of `AsOsStr` and `AsPath` all code should continue to work as it\r\ndid before.\r\n\r\nThis is strictly speaking a breaking change due to the signatures of these\r\nfunctions changing, but normal idiomatic usage of these APIs should not break in\r\npractice.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "60a4a2db8837be91bdae051bd51ab181077e5dc6",
    "author": "Alex Crichton",
    "date": 1426400634,
    "message": "std: Remove ?Sized bounds from many I/O functions\n\nIt is a frequent pattern among I/O functions to take `P: AsPath + ?Sized` or\n`AsOsStr` instead of `AsPath`. Most of these functions do not need to take\nownership of their argument, but for libraries in general it's much more\nergonomic to not deal with `?Sized` at all and simply require an argument `P`\ninstead of `&P`.\n\nThis change is aimed at removing unsightly `?Sized` bounds while retaining the\nsame level of usability as before. All affected functions now take ownership of\ntheir arguments instead of taking them by reference, but due to the forwarding\nimplementations of `AsOsStr` and `AsPath` all code should continue to work as it\ndid before.\n\nThis is strictly speaking a breaking change due to the signatures of these\nfunctions changing, but normal idiomatic usage of these APIs should not break in\npractice.\n\n[breaking-change]"
  },
  {
    "hash": "3e4be02b80a3dd27bce20870958fe0aef7e7336d",
    "author": "bors",
    "date": 1426278136,
    "message": "Auto merge of #23292 - alexcrichton:stabilize-io, r=aturon\n\nThe new `std::io` module has had some time to bake now, and this commit\r\nstabilizes its functionality. There are still portions of the module which\r\nremain unstable, and below contains a summart of the actions taken.\r\n\r\nThis commit also deprecates the entire contents of the `old_io` module in a\r\nblanket fashion. All APIs should now have a reasonable replacement in the\r\nnew I/O modules.\r\n\r\nStable APIs:\r\n\r\n* `std::io` (the name)\r\n* `std::io::prelude` (the name)\r\n* `Read`\r\n* `Read::read`\r\n* `Read::{read_to_end, read_to_string}` after being modified to return a `usize`\r\n  for the number of bytes read.\r\n* `ReadExt`\r\n* `Write`\r\n* `Write::write`\r\n* `Write::{write_all, write_fmt}`\r\n* `WriteExt`\r\n* `BufRead`\r\n* `BufRead::{fill_buf, consume}`\r\n* `BufRead::{read_line, read_until}` after being modified to return a `usize`\r\n  for the number of bytes read.\r\n* `BufReadExt`\r\n* `BufReader`\r\n* `BufReader::{new, with_capacity}`\r\n* `BufReader::{get_ref, get_mut, into_inner}`\r\n* `{Read,BufRead} for BufReader`\r\n* `BufWriter`\r\n* `BufWriter::{new, with_capacity}`\r\n* `BufWriter::{get_ref, get_mut, into_inner}`\r\n* `Write for BufWriter`\r\n* `IntoInnerError`\r\n* `IntoInnerError::{error, into_inner}`\r\n* `{Error,Display} for IntoInnerError`\r\n* `LineWriter`\r\n* `LineWriter::{new, with_capacity}` - `with_capacity` was added\r\n* `LineWriter::{get_ref, get_mut, into_inner}` - `get_mut` was added)\r\n* `Write for LineWriter`\r\n* `BufStream`\r\n* `BufStream::{new, with_capacities}`\r\n* `BufStream::{get_ref, get_mut, into_inner}`\r\n* `{BufRead,Read,Write} for BufStream`\r\n* `stdin`\r\n* `Stdin`\r\n* `Stdin::lock`\r\n* `Stdin::read_line` - added method\r\n* `StdinLock`\r\n* `Read for Stdin`\r\n* `{Read,BufRead} for StdinLock`\r\n* `stdout`\r\n* `Stdout`\r\n* `Stdout::lock`\r\n* `StdoutLock`\r\n* `Write for Stdout`\r\n* `Write for StdoutLock`\r\n* `stderr`\r\n* `Stderr`\r\n* `Stderr::lock`\r\n* `StderrLock`\r\n* `Write for Stderr`\r\n* `Write for StderrLock`\r\n* `io::Result`\r\n* `io::Error`\r\n* `io::Error::last_os_error`\r\n* `{Display, Error} for Error`\r\n\r\nUnstable APIs:\r\n\r\n(reasons can be found in the commit itself)\r\n\r\n* `Write::flush`\r\n* `Seek`\r\n* `ErrorKind`\r\n* `Error::new`\r\n* `Error::from_os_error`\r\n* `Error::kind`\r\n\r\nDeprecated APIs\r\n\r\n* `Error::description` - available via the `Error` trait\r\n* `Error::detail` - available via the `Display` implementation\r\n* `thread::Builder::{stdout, stderr}`\r\n\r\nChanges in functionality:\r\n\r\n* `old_io::stdio::set_stderr` is now a noop as the infrastructure for printing\r\n  backtraces has migrated to `std::io`.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "d54bd9f29af67748b7ddf80a5cf285145949ddc2",
    "author": "Alex Crichton",
    "date": 1426217943,
    "message": "std: Stabilize the `io` module\n\nThe new `std::io` module has had some time to bake now, and this commit\nstabilizes its functionality. There are still portions of the module which\nremain unstable, and below contains a summart of the actions taken.\n\nThis commit also deprecates the entire contents of the `old_io` module in a\nblanket fashion. All APIs should now have a reasonable replacement in the\nnew I/O modules.\n\nStable APIs:\n\n* `std::io` (the name)\n* `std::io::prelude` (the name)\n* `Read`\n* `Read::read`\n* `Read::{read_to_end, read_to_string}` after being modified to return a `usize`\n  for the number of bytes read.\n* `Write`\n* `Write::write`\n* `Write::{write_all, write_fmt}`\n* `BufRead`\n* `BufRead::{fill_buf, consume}`\n* `BufRead::{read_line, read_until}` after being modified to return a `usize`\n  for the number of bytes read.\n* `BufReader`\n* `BufReader::{new, with_capacity}`\n* `BufReader::{get_ref, get_mut, into_inner}`\n* `{Read,BufRead} for BufReader`\n* `BufWriter`\n* `BufWriter::{new, with_capacity}`\n* `BufWriter::{get_ref, get_mut, into_inner}`\n* `Write for BufWriter`\n* `IntoInnerError`\n* `IntoInnerError::{error, into_inner}`\n* `{Error,Display} for IntoInnerError`\n* `LineWriter`\n* `LineWriter::{new, with_capacity}` - `with_capacity` was added\n* `LineWriter::{get_ref, get_mut, into_inner}` - `get_mut` was added)\n* `Write for LineWriter`\n* `BufStream`\n* `BufStream::{new, with_capacities}`\n* `BufStream::{get_ref, get_mut, into_inner}`\n* `{BufRead,Read,Write} for BufStream`\n* `stdin`\n* `Stdin`\n* `Stdin::lock`\n* `Stdin::read_line` - added method\n* `StdinLock`\n* `Read for Stdin`\n* `{Read,BufRead} for StdinLock`\n* `stdout`\n* `Stdout`\n* `Stdout::lock`\n* `StdoutLock`\n* `Write for Stdout`\n* `Write for StdoutLock`\n* `stderr`\n* `Stderr`\n* `Stderr::lock`\n* `StderrLock`\n* `Write for Stderr`\n* `Write for StderrLock`\n* `io::Result`\n* `io::Error`\n* `io::Error::last_os_error`\n* `{Display, Error} for Error`\n\nUnstable APIs:\n\n(reasons can be found in the commit itself)\n\n* `Write::flush`\n* `Seek`\n* `ErrorKind`\n* `Error::new`\n* `Error::from_os_error`\n* `Error::kind`\n\nDeprecated APIs\n\n* `Error::description` - available via the `Error` trait\n* `Error::detail` - available via the `Display` implementation\n* `thread::Builder::{stdout, stderr}`\n\nChanges in functionality:\n\n* `old_io::stdio::set_stderr` is now a noop as the infrastructure for printing\n  backtraces has migrated to `std::io`.\n* The `ReadExt`, `WriteExt`, and `BufReadExt` extension traits were all removed\n  by folding functionality into the corresponding trait.\n\n[breaking-change]"
  },
  {
    "hash": "79dd393a4f144fa5e6f81c720c782de3175810d7",
    "author": "bors",
    "date": 1426208402,
    "message": "Auto merge of #23229 - aturon:stab-path, r=alexcrichton\n\nThis commit stabilizes essentially all of the new `std::path` API. The\r\nAPI itself is changed in a couple of ways (which brings it in closer\r\nalignment with the RFC):\r\n\r\n* `.` components are now normalized away, unless they appear at the\r\n  start of a path. This in turn effects the semantics of e.g. asking for\r\n  the file name of `foo/` or `foo/.`, both of which yield `Some(\"foo\")`\r\n  now. This semantics is what the original RFC specified, and is also\r\n  desirable given early experience rolling out the new API.\r\n\r\n* The `parent` method is now `without_file` and succeeds if, and only\r\n  if, `file_name` is `Some(_)`. That means, in particular, that it fails\r\n  for a path like `foo/../`. This change affects `pop` as well.\r\n\r\nIn addition, the `old_path` module is now deprecated.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton"
  },
  {
    "hash": "42c4e481cd98bd392839144c9ac83e55e445a12a",
    "author": "Aaron Turon",
    "date": 1426203538,
    "message": "Stabilize std::path\n\nThis commit stabilizes essentially all of the new `std::path` API. The\nAPI itself is changed in a couple of ways (which brings it in closer\nalignment with the RFC):\n\n* `.` components are now normalized away, unless they appear at the\n  start of a path. This in turn effects the semantics of e.g. asking for\n  the file name of `foo/` or `foo/.`, both of which yield `Some(\"foo\")`\n  now. This semantics is what the original RFC specified, and is also\n  desirable given early experience rolling out the new API.\n\n* The `parent` function now succeeds if, and only if, the path has at\n  least one non-root/prefix component. This change affects `pop` as\n  well.\n\n* The `Prefix` component now involves a separate `PrefixComponent`\n  struct, to better allow for keeping both parsed and unparsed prefix data.\n\nIn addition, the `old_path` module is now deprecated.\n\nCloses #23264\n\n[breaking-change]"
  },
  {
    "hash": "c9b03c24ec346e6405883032094f47805ef9c43e",
    "author": "bors",
    "date": 1426191203,
    "message": "Auto merge of #23265 - eddyb:meth-ast-refactor, r=nikomatsakis\n\nThe end result is that common fields (id, name, attributes, etc.) are stored in now-structures `ImplItem` and `TraitItem`.\r\nThe signature of a method is no longer duplicated between methods with a body (default/impl) and those without, they now share `MethodSig`.\r\n\r\nThis is also a [breaking-change] because of minor bugfixes and changes to syntax extensions:\r\n* `pub fn` methods in a trait no longer parse - remove the `pub`, it has no meaning anymore\r\n* `MacResult::make_methods` is now `make_impl_items` and the return type has changed accordingly\r\n* `quote_method` is gone, because `P<ast::Method>` doesn't exist and it couldn't represent a full method anyways - could be replaced by `quote_impl_item`/`quote_trait_item` in the future, but I do hope we realize how silly that combinatorial macro expansion is and settle on a single `quote` macro + some type hints - or just no types at all (only token-trees)\r\n\r\nr? @nikomatsakis This is necessary (hopefully also sufficient) for associated constants."
  },
  {
    "hash": "cfea8ec41699e25c8fb524d625190f0cb860dc71",
    "author": "bors",
    "date": 1426027510,
    "message": "Auto merge of #23126 - alexcrichton:char-third-pass, r=aturon\n\nThis commit performs another pass over the `std::char` module for stabilization.\r\nSome minor cleanup is performed such as migrating documentation from libcore to\r\nlibunicode (where the `std`-facing trait resides) as well as a slight\r\nreorganiation in libunicode itself. Otherwise, the stability modifications made\r\nare:\r\n\r\n* `char::from_digit` is now stable\r\n* `CharExt::is_digit` is now stable\r\n* `CharExt::to_digit` is now stable\r\n* `CharExt::to_{lower,upper}case` are now stable after being modified to return\r\n  an iterator over characters. While the implementation today has not changed\r\n  this should allow us to implement the full set of case conversions in unicode\r\n  where some characters can map to multiple when doing an upper or lower case\r\n  mapping.\r\n* `StrExt::to_{lower,upper}case` was added as unstable for a convenience of not\r\n  having to worry about characters expanding to more characters when you just\r\n  want the whole string to get into upper or lower case.\r\n\r\nThis is a breaking change due to the change in the signatures of the\r\n`CharExt::to_{upper,lower}case` methods. Code can be updated to use functions\r\nlike `flat_map` or `collect` to handle the difference.\r\n\r\n[breaking-change]\r\n\r\nCloses #20333"
  },
  {
    "hash": "0f6a0b58f9dbc3a741abd898f2d06a8ba78a938d",
    "author": "Alex Crichton",
    "date": 1426025311,
    "message": "std: Stabilize more of the `char` module\n\nThis commit performs another pass over the `std::char` module for stabilization.\nSome minor cleanup is performed such as migrating documentation from libcore to\nlibunicode (where the `std`-facing trait resides) as well as a slight\nreorganiation in libunicode itself. Otherwise, the stability modifications made\nare:\n\n* `char::from_digit` is now stable\n* `CharExt::is_digit` is now stable\n* `CharExt::to_digit` is now stable\n* `CharExt::to_{lower,upper}case` are now stable after being modified to return\n  an iterator over characters. While the implementation today has not changed\n  this should allow us to implement the full set of case conversions in unicode\n  where some characters can map to multiple when doing an upper or lower case\n  mapping.\n* `StrExt::to_{lower,upper}case` was added as unstable for a convenience of not\n  having to worry about characters expanding to more characters when you just\n  want the whole string to get into upper or lower case.\n\nThis is a breaking change due to the change in the signatures of the\n`CharExt::to_{upper,lower}case` methods. Code can be updated to use functions\nlike `flat_map` or `collect` to handle the difference.\n\n[breaking-change]"
  },
  {
    "hash": "668c6474081a10768ef143b9984efcab5376bf68",
    "author": "bors",
    "date": 1425753557,
    "message": "Auto merge of #23137 - kmcallister:derive-sugar, r=sfackler\n\nThis is a hack, but I don't think we can do much better as long as `derive` is running at the syntax expansion phase.\r\n\r\nIf the `custom_derive` feature gate is enabled, this works with user-defined traits and syntax extensions. Without the gate, you can't use e.g. `#[derive_Clone]` directly, so this does not change the stable language.\r\n\r\nTo make this effective, we now check gated attributes both before and after macro expansion. This uncovered a number of tests that were missing feature gates.\r\n\r\nThis PR also cleans up the deriving code somewhat, and forbids some previously-meaningless attribute syntax. For this reason it's technically a\r\n\r\n    [breaking-change]\r\n\r\nr? @sfackler"
  },
  {
    "hash": "491054f08e2aaaa8438f1a9943f115dad9da1c6b",
    "author": "Keegan McAllister",
    "date": 1425694816,
    "message": "Make #[derive(Anything)] into sugar for #[derive_Anything]\n\nThis is a hack, but I don't think we can do much better as long as `derive` is\nrunning at the syntax expansion phase.\n\nIf the custom_derive feature gate is enabled, this works with user-defined\ntraits and syntax extensions. Without the gate, you can't use e.g. #[derive_Clone]\ndirectly, so this does not change the stable language.\n\nThis commit also cleans up the deriving code somewhat, and forbids some\npreviously-meaningless attribute syntax. For this reason it's technically a\n\n    [breaking-change]"
  },
  {
    "hash": "fd86a01bb9f23921c82017485d88fe14448e78fe",
    "author": "Alex Crichton",
    "date": 1425684968,
    "message": "rollup merge of #22813: alexcrichton/deprecate-net\n\nThe `std::net` primitives should be ready for use now and as a result the old\nones are now deprecated and slated for removal. Most TCP/UDP functionality is\nnow available through `std::net` but the `std::old_io::net::pipe` module is\nremoved entirely from the standard library.\n\nUnix socket funtionality can be found in sfackler's [`unix_socket`][unix] crate\nand there is currently no replacement for named pipes on Windows.\n\n[unix]: https://crates.io/crates/unix_socket\n\n[breaking-change]"
  },
  {
    "hash": "9aea749b835a6fdcad6f2840a00adac996cc0339",
    "author": "Alex Crichton",
    "date": 1425666448,
    "message": "std: Deprecate the std::old_io::net primitives\n\nThe `std::net` primitives should be ready for use now and as a result the old\nones are now deprecated and slated for removal. Most TCP/UDP functionality is\nnow available through `std::net` but the `std::old_io::net::pipe` module is\nremoved entirely from the standard library.\n\nUnix socket funtionality can be found in sfackler's [`unix_socket`][unix] crate\nand there is currently no replacement for named pipes on Windows.\n\n[unix]: https://crates.io/crates/unix_socket\n\n[breaking-change]"
  },
  {
    "hash": "fe41c935603be8192c7481fcd846e629d76337b1",
    "author": "Manish Goregaokar",
    "date": 1425612710,
    "message": "Rollup merge of #23081 - alexcrichton:stabilize-fs, r=aturon\n\n This commit performs a stabilization pass over the `std::fs` module now that\nit's had some time to bake. The change was largely just adding `#[stable]` tags,\nbut there are a few APIs that remain `#[unstable]`.\n\nThe following apis are now marked `#[stable]`:\n\n* `std::fs` (the name)\n* `File`\n* `Metadata`\n* `ReadDir`\n* `DirEntry`\n* `OpenOptions`\n* `Permissions`\n* `File::{open, create}`\n* `File::{sync_all, sync_data}`\n* `File::set_len`\n* `File::metadata`\n* Trait implementations for `File` and `&File`\n* `OpenOptions::new`\n* `OpenOptions::{read, write, append, truncate, create}`\n* `OpenOptions::open` - this function was modified, however, to not attempt to\n  reject cross-platform openings of directories. This means that some platforms\n  will succeed in opening a directory and others will fail.\n* `Metadata::{is_dir, is_file, len, permissions}`\n* `Permissions::{readonly, set_readonly}`\n* `Iterator for ReadDir`\n* `DirEntry::path`\n* `remove_file` - like with `OpenOptions::open`, the extra windows code to\n  remove a readonly file has been removed. This means that removing a readonly\n  file will succeed on some platforms but fail on others.\n* `metadata`\n* `rename`\n* `copy`\n* `hard_link`\n* `soft_link`\n* `read_link`\n* `create_dir`\n* `create_dir_all`\n* `remove_dir`\n* `remove_dir_all`\n* `read_dir`\n\nThe following apis remain `#[unstable]`.\n\n* `WalkDir` and `walk` - there are many methods by which a directory walk can be\n  constructed, and it's unclear whether the current semantics are the right\n  ones. For example symlinks are not handled super well currently. This is now\n  behind a new `fs_walk` feature.\n* `File::path` - this is an extra abstraction which the standard library\n  provides on top of what the system offers and it's unclear whether we should\n  be doing so. This is now behind a new `file_path` feature.\n* `Metadata::{accessed, modified}` - we do not currently have a good\n  abstraction for a moment in time which is what these APIs should likely be\n  returning, so these remain `#[unstable]` for now. These are now behind a new\n  `fs_time` feature\n* `set_file_times` - like with `Metadata::accessed`, we do not currently have\n  the appropriate abstraction for the arguments here so this API remains\n  unstable behind the `fs_time` feature gate.\n* `PathExt` - the precise set of methods on this trait may change over time and\n  some methods may be removed. This API remains unstable behind the `path_ext`\n  feature gate.\n* `set_permissions` - we may wish to expose a more granular ability to set the\n  permissions on a file instead of just a blanket \\\"set all permissions\\\" method.\n  This function remains behind the `fs` feature.\n\nThe following apis are now `#[deprecated]`\n\n* The `TempDir` type is now entirely deprecated and is [located on\n  crates.io][tempdir] as the `tempdir` crate with [its source][github] at\n  rust-lang/tempdir.\n\n[tempdir]: https://crates.io/crates/tempdir\n[github]: https://github.com/rust-lang/tempdir\n\nThe stability of some of these APIs has been questioned over the past few weeks\nin using these APIs, and it is intentional that the majority of APIs here are\nmarked `#[stable]`. The `std::fs` module has a lot of room to grow and the\nmaterial is [being tracked in a RFC issue][rfc-issue].\n\n[rfc-issue]: rust-lang/rfcs#939\n\nCloses #22879\n\n[breaking-change]"
  },
  {
    "hash": "73b0b25e326687aba319df99aee4b0c4124d4498",
    "author": "Alex Crichton",
    "date": 1425602981,
    "message": "std: Stabilize the `fs` module\n\nThis commit performs a stabilization pass over the `std::fs` module now that\nit's had some time to bake. The change was largely just adding `#[stable]` tags,\nbut there are a few APIs that remain `#[unstable]`.\n\nThe following apis are now marked `#[stable]`:\n\n* `std::fs` (the name)\n* `File`\n* `Metadata`\n* `ReadDir`\n* `DirEntry`\n* `OpenOptions`\n* `Permissions`\n* `File::{open, create}`\n* `File::{sync_all, sync_data}`\n* `File::set_len`\n* `File::metadata`\n* Trait implementations for `File` and `&File`\n* `OpenOptions::new`\n* `OpenOptions::{read, write, append, truncate, create}`\n* `OpenOptions::open` - this function was modified, however, to not attempt to\n  reject cross-platform openings of directories. This means that some platforms\n  will succeed in opening a directory and others will fail.\n* `Metadata::{is_dir, is_file, len, permissions}`\n* `Permissions::{readonly, set_readonly}`\n* `Iterator for ReadDir`\n* `DirEntry::path`\n* `remove_file` - like with `OpenOptions::open`, the extra windows code to\n  remove a readonly file has been removed. This means that removing a readonly\n  file will succeed on some platforms but fail on others.\n* `metadata`\n* `rename`\n* `copy`\n* `hard_link`\n* `soft_link`\n* `read_link`\n* `create_dir`\n* `create_dir_all`\n* `remove_dir`\n* `remove_dir_all`\n* `read_dir`\n\nThe following apis remain `#[unstable]`.\n\n* `WalkDir` and `walk` - there are many methods by which a directory walk can be\n  constructed, and it's unclear whether the current semantics are the right\n  ones. For example symlinks are not handled super well currently. This is now\n  behind a new `fs_walk` feature.\n* `File::path` - this is an extra abstraction which the standard library\n  provides on top of what the system offers and it's unclear whether we should\n  be doing so. This is now behind a new `file_path` feature.\n* `Metadata::{accessed, modified}` - we do not currently have a good\n  abstraction for a moment in time which is what these APIs should likely be\n  returning, so these remain `#[unstable]` for now. These are now behind a new\n  `fs_time` feature\n* `set_file_times` - like with `Metadata::accessed`, we do not currently have\n  the appropriate abstraction for the arguments here so this API remains\n  unstable behind the `fs_time` feature gate.\n* `PathExt` - the precise set of methods on this trait may change over time and\n  some methods may be removed. This API remains unstable behind the `path_ext`\n  feature gate.\n* `set_permissions` - we may wish to expose a more granular ability to set the\n  permissions on a file instead of just a blanket \"set all permissions\" method.\n  This function remains behind the `fs` feature.\n\nThe following apis are now `#[deprecated]`\n\n* The `TempDir` type is now entirely deprecated and is [located on\n  crates.io][tempdir] as the `tempdir` crate with [its source][github] at\n  rust-lang/tempdir.\n\n[tempdir]: https://crates.io/crates/tempdir\n[github]: https://github.com/rust-lang/tempdir\n\nThe stability of some of these APIs has been questioned over the past few weeks\nin using these APIs, and it is intentional that the majority of APIs here are\nmarked `#[stable]`. The `std::fs` module has a lot of room to grow and the\nmaterial is [being tracked in a RFC issue][rfc-issue].\n\n[rfc-issue]: https://github.com/rust-lang/rfcs/issues/939\n\n[breaking-change]"
  },
  {
    "hash": "c9063e0f98da9eb0cb30427010614ea634b409ed",
    "author": "Manish Goregaokar",
    "date": 1425612697,
    "message": "Rollup merge of #23079 - alexcrichton:deprecate-process, r=aturon\n\n This module is now superseded by the `std::process` module. This module still\nhas some room to expand to get quite back up to parity with the `old_io`\nversion, and there is a [tracking issue][issue] for feature requests as well as\nknown room for expansion.\n\n[issue]: https://github.com/rust-lang/rfcs/issues/941\n[breaking-change]"
  },
  {
    "hash": "7ed418c3b4ede0364bf419b2c12b27f89b706dcf",
    "author": "Alex Crichton",
    "date": 1425580902,
    "message": "std: Deprecate the old_io::process module\n\nThis module is now superseded by the `std::process` module. This module still\nhas some room to expand to get quite back up to parity with the `old_io`\nversion, and there is a [tracking issue][issue] for feature requests as well as\nknown room for expansion.\n\n[issue]: https://github.com/rust-lang/rfcs/issues/941\n[breaking-change]"
  },
  {
    "hash": "32631b4138fbaeca0f6496dd83aa327c76d5a900",
    "author": "Manish Goregaokar",
    "date": 1425612524,
    "message": "Rollup merge of #23010 - alexcrichton:deprecate-some-old-io, r=aturon\n\n The new `io` module has had some time to bake and this commit stabilizes some of\nthe utilities associated with it. This commit also deprecates a number of\n`std::old_io::util` functions and structures.\n\nThese items are now `#[stable]`\n\n* `Cursor`\n* `Cursor::{new, into_inner, get_ref, get_mut, position, set_position}`\n* Implementations of I/O traits for `Cursor<T>`\n* Delegating implementations of I/O traits for references and `Box` pointers\n* Implementations of I/O traits for primitives like slices and `Vec<T>`\n* `ReadExt::bytes`\n* `Bytes` (and impls)\n* `ReadExt::chain`\n* `Chain` (and impls)\n* `ReadExt::take` (and impls)\n* `BufReadExt::lines`\n* `Lines` (and impls)\n* `io::copy`\n* `io::{empty, Empty}` (and impls)\n* `io::{sink, Sink}` (and impls)\n* `io::{repeat, Repeat}` (and impls)\n\nThese items remain `#[unstable]`\n\n* Core I/O traits. These may want a little bit more time to bake along with the\n  commonly used methods like `read_to_end`.\n* `BufReadExt::split` - this function may be renamed to not conflict with\n  `SliceExt::split`.\n* `Error` - there are a number of questions about its representation,\n  `ErrorKind`, and usability.\n\nThese items are now `#[deprecated]` in `old_io`\n\n* `LimitReader` - use `take` instead\n* `NullWriter` - use `io::sink` instead\n* `ZeroReader` - use `io::repeat` instead\n* `NullReader` - use `io::empty` instead\n* `MultiWriter` - use `broadcast` instead\n* `ChainedReader` - use `chain` instead\n* `TeeReader` - use `tee` instead\n* `copy` - use `io::copy` instead\n\n[breaking-change]"
  },
  {
    "hash": "0dfa9978cc57efc8eb51485fc3a333eafd1aa392",
    "author": "Alex Crichton",
    "date": 1425517462,
    "message": "std: Stabilize portions of the `io` module\n\nThe new `io` module has had some time to bake and this commit stabilizes some of\nthe utilities associated with it. This commit also deprecates a number of\n`std::old_io::util` functions and structures.\n\nThese items are now `#[stable]`\n\n* `Cursor`\n* `Cursor::{new, into_inner, get_ref, get_mut, position, set_position}`\n* Implementations of I/O traits for `Cursor<T>`\n* Delegating implementations of I/O traits for references and `Box` pointers\n* Implementations of I/O traits for primitives like slices and `Vec<T>`\n* `ReadExt::bytes`\n* `Bytes` (and impls)\n* `ReadExt::chain`\n* `Chain` (and impls)\n* `ReadExt::take` (and impls)\n* `BufReadExt::lines`\n* `Lines` (and impls)\n* `io::copy`\n* `io::{empty, Empty}` (and impls)\n* `io::{sink, Sink}` (and impls)\n* `io::{repeat, Repeat}` (and impls)\n\nThese items remain `#[unstable]`\n\n* Core I/O traits. These may want a little bit more time to bake along with the\n  commonly used methods like `read_to_end`.\n* `BufReadExt::split` - this function may be renamed to not conflict with\n  `SliceExt::split`.\n* `Error` - there are a number of questions about its representation,\n  `ErrorKind`, and usability.\n\nThese items are now `#[deprecated]` in `old_io`\n\n* `LimitReader` - use `take` instead\n* `NullWriter` - use `io::sink` instead\n* `ZeroReader` - use `io::repeat` instead\n* `NullReader` - use `io::empty` instead\n* `MultiWriter` - use `broadcast` instead\n* `ChainedReader` - use `chain` instead\n* `TeeReader` - use `tee` instead\n* `copy` - use `io::copy` instead\n\n[breaking-change]"
  },
  {
    "hash": "efb487b503d87f04448fc5e6f75038ca98b8670e",
    "author": "Manish Goregaokar",
    "date": 1425612510,
    "message": "Rollup merge of #22980 - alexcrichton:debug-assertions, r=pnkfelix\n\n This commit is an implementation of [RFC 563][rfc] which adds a new\n`cfg(debug_assertions)` directive which is specially recognized and calculated\nby the compiler. The flag is turned off at any optimization level greater than 1\nand may also be explicitly controlled through the `-C debug-assertions`\nflag.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/563\n\nThe `debug_assert!` and `debug_assert_eq!` macros now respect this instead of\nthe `ndebug` variable and `ndebug` no longer holds any meaning to the standard\nlibrary.\n\nCode which was previously relying on `not(ndebug)` to gate expensive code should\nbe updated to rely on `debug_assertions` instead.\n\nCloses #22492\n[breaking-change]"
  },
  {
    "hash": "d5d834551cd5a7e7d89ac9f2ae642a93409ed989",
    "author": "Alex Crichton",
    "date": 1425595898,
    "message": "rustc: Add a debug_assertions #[cfg] directive\n\nThis commit is an implementation of [RFC 563][rfc] which adds a new\n`cfg(debug_assertions)` directive which is specially recognized and calculated\nby the compiler. The flag is turned off at any optimization level greater than 1\nand may also be explicitly controlled through the `-C debug-assertions`\nflag.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/563\n\nThe `debug_assert!` and `debug_assert_eq!` macros now respect this instead of\nthe `ndebug` variable and `ndebug` no longer holds any meaning to the standard\nlibrary.\n\nCode which was previously relying on `not(ndebug)` to gate expensive code should\nbe updated to rely on `debug_assertions` instead.\n\nCloses #22492\n[breaking-change]"
  },
  {
    "hash": "9eb596ce8f4b70ba73e8671f9b42147c91319842",
    "author": "Manish Goregaokar",
    "date": 1425612496,
    "message": "Rollup merge of #22899 - huonw:macro-stability, r=alexcrichton\n\n Unstable items used in a macro expansion will now always trigger\nstability warnings, *unless* the unstable items are directly inside a\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\nunless the span of the unstable item is a subspan of the definition of a\nmacro marked with that attribute.\n\nE.g.\n\n    #[allow_internal_unstable]\n    macro_rules! foo {\n        ($e: expr) => {{\n            $e;\n            unstable(); // no warning\n            only_called_by_foo!();\n        }}\n    }\n\n    macro_rules! only_called_by_foo {\n        () => { unstable() } // warning\n    }\n\n    foo!(unstable()) // warning\n\nThe unstable inside `foo` is fine, due to the attribute. But the\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\nhave the attribute, and the `unstable` passed into `foo` is also not\nfine since it isn't contained in the macro itself (that is, even though\nit is only used directly in the macro).\n\nIn the process this makes the stability tracking much more precise,\ne.g. previously `println!(\\\"{}\\\", unstable())` got no warning, but now it\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\n\nThe attribute is definitely feature gated, since it explicitly allows\nside-stepping the feature gating system.\n\n---\n\nThis updates `thread_local!` macro to use the attribute, since it uses\nunstable features internally (initialising a struct with unstable\nfields)."
  },
  {
    "hash": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e",
    "author": "bors",
    "date": 1425619211,
    "message": "Auto merge of #22899 - huonw:macro-stability, r=alexcrichton\n\nUnstable items used in a macro expansion will now always trigger\r\nstability warnings, *unless* the unstable items are directly inside a\r\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\r\nunless the span of the unstable item is a subspan of the definition of a\r\nmacro marked with that attribute.\r\n\r\nE.g.\r\n\r\n    #[allow_internal_unstable]\r\n    macro_rules! foo {\r\n        ($e: expr) => {{\r\n            $e;\r\n            unstable(); // no warning\r\n            only_called_by_foo!();\r\n        }}\r\n    }\r\n\r\n    macro_rules! only_called_by_foo {\r\n        () => { unstable() } // warning\r\n    }\r\n\r\n    foo!(unstable()) // warning\r\n\r\nThe unstable inside `foo` is fine, due to the attribute. But the\r\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\r\nhave the attribute, and the `unstable` passed into `foo` is also not\r\nfine since it isn't contained in the macro itself (that is, even though\r\nit is only used directly in the macro).\r\n\r\nIn the process this makes the stability tracking much more precise,\r\ne.g. previously `println!(\"{}\", unstable())` got no warning, but now it\r\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\r\n\r\nThe attribute is definitely feature gated, since it explicitly allows\r\nside-stepping the feature gating system.\r\n\r\n---\r\n\r\nThis updates `thread_local!` macro to use the attribute, since it uses\r\nunstable features internally (initialising a struct with unstable\r\nfields)."
  },
  {
    "hash": "84b060ce29bf7dd65fc23e855ad7c5a8748d806c",
    "author": "Huon Wilson",
    "date": 1425561508,
    "message": "Add #[allow_internal_unstable] to track stability for macros better.\n\nUnstable items used in a macro expansion will now always trigger\nstability warnings, *unless* the unstable items are directly inside a\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\nunless the span of the unstable item is a subspan of the definition of a\nmacro marked with that attribute.\n\nE.g.\n\n    #[allow_internal_unstable]\n    macro_rules! foo {\n        ($e: expr) => {{\n            $e;\n            unstable(); // no warning\n            only_called_by_foo!();\n        }}\n    }\n\n    macro_rules! only_called_by_foo {\n        () => { unstable() } // warning\n    }\n\n    foo!(unstable()) // warning\n\nThe unstable inside `foo` is fine, due to the attribute. But the\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\nhave the attribute, and the `unstable` passed into `foo` is also not\nfine since it isn't contained in the macro itself (that is, even though\nit is only used directly in the macro).\n\nIn the process this makes the stability tracking much more precise,\ne.g. previously `println!(\"{}\", unstable())` got no warning, but now it\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\n\nThe attribute is definitely feature gated, since it explicitly allows\nside-stepping the feature gating system."
  },
  {
    "hash": "f0c74f85f363a8081b31f9ab696463717ce312d5",
    "author": "bors",
    "date": 1425577941,
    "message": "Auto merge of #23026 - nikomatsakis:issue-20220-supertrait, r=nikomatsakis\n\nThe main gist of this PR is commit 1077efb which removes the list of supertraits from the `TraitDef` and pulls them into a separate table, which is accessed via `lookup_super_predicates`. This is analogous to `lookup_predicates`, which gets the complete where clause. This allows us to create the `TraitDef`, which contains the list generics and so forth, without fully knowing the list of supertraits. This in turn allows the *supertrait listing* to contain references to associated types like `<Self as Foo>::Item`, which were previously impossible because conversion required having the `TraitDef` for `Foo`.\r\n\r\nWe do not yet support `Self::Item` in a supertrait listing. This doesn't work because to convert that, it attempts to expand out the full set of supertraits, which are in the process of being created. This could potentially be worked out by having the expansion of supertraits proceed in a lazy fashion, but we'd have to define shadowing rules for associated types which we don't currently have.\r\n\r\nAlong the way (in 9de9ec5) I also removed the restriction against duplicate bounds and generalized the code so that it can handle having the same supertrait multiple times with different arguments, e.g. `Foo : Bar<i32> + Bar<u32>`. This restriction was serving no particular purpose, since the same trait could be extended multiple times indirectly, and in the era of multidispatch it is actively harmful.\r\n\r\nThis is technically a [breaking-change] because it affects the definition of a super-trait. Anything in a where clause that looks like `where Self : Foo` is now considered a supertrait. Because cycles are disallowed in supertraits, that could lead to some errors. This has not been observed in any existing code.\r\n\r\nr? @nrc"
  },
  {
    "hash": "cc722a4dd3e8110a8bf7e62eea977e99e3a3d128",
    "author": "bors",
    "date": 1425518355,
    "message": "Auto merge of #22873 - alexcrichton:deprecate-fs, r=aturon\n\nThis commit deprecates the majority of std::old_io::fs in favor of std::fs and\r\nits new functionality. Some functions remain non-deprecated but are now behind a\r\nfeature gate called `old_fs`. These functions will be deprecated once\r\nsuitable replacements have been implemented.\r\n\r\nThe compiler has been migrated to new `std::fs` and `std::path` APIs where\r\nappropriate as part of this change.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "cdfff9db35d037c51dfd5c2bac2174f651294adb",
    "author": "Corey Richardson",
    "date": 1425380947,
    "message": "rustc: implement arithmetic overflow checking\n\nAdds overflow checking to integer addition, multiplication, and subtraction\nwhen `-Z force-overflow-checks` is true, or if `--cfg ndebug` is not passed to\nthe compiler. On overflow, it panics with `arithmetic operation overflowed`.\nAlso adds `overflowing_add`, `overflowing_sub`, and `overflowing_mul`\nintrinsics for doing unchecked arithmetic.\n\n[breaking-change]"
  },
  {
    "hash": "393ce1820e3f639b43d6058d2681b9757123ac1b",
    "author": "Manish Goregaokar",
    "date": 1425382340,
    "message": "Rollup merge of #22876 - Florob:const, r=nikomatsakis\n\n This changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "f35f973cb700c444d8c029ee13b37dc16d560225",
    "author": "Florian Zeitz",
    "date": 1425312711,
    "message": "Use `const`s instead of `static`s where appropriate\n\nThis changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "d0fcb1f53c9f81fbcae5379dd1c0577a8605172c",
    "author": "Manish Goregaokar",
    "date": 1425382276,
    "message": "Rollup merge of #22990 - japaric:privATe, r=alexcrichton\n\n Associated types are now treated as part of the public API by the privacy checker.\n\nIf you were exposing a private type in your public API via an associated type, make that type public:\n\n``` diff\n  pub struct PublicType { .. }\n\n- struct Struct { .. }\n+ pub struct Struct { .. }\n\n  pub trait PublicTrait {\n      type Output;\n\n      fn foo(&self) -> Self::Output;\n  }\n\n  impl PublicTrait for PublicType {\n      type Output = Struct;\n\n      fn foo(&self) -> Struct {  // `Struct` is part of the public API, it must be marked as `pub`lic\n          ..\n      }\n  }\n```\n\n[breaking-change]\n\n---\n\nr? @nikomatsakis\ncloses #22912"
  },
  {
    "hash": "3b30b74692cfee533b45e0380591d237975ec215",
    "author": "Manish Goregaokar",
    "date": 1425382275,
    "message": "Rollup merge of #22943 - ipetkov:lint-recursion, r=alexcrichton\n\n * The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]\n\nI had originally intended for the lint to ignore uses of deprecated items that are declared in the same crate, but this goes against some previous test cases that expect the lint to capture *all* uses of deprecated items, so I maintained the previous approach to avoid changing the expected behavior of the lint.\n\nTested locally on OS X, so hopefully there aren't any deprecated item uses behind a `cfg` that I may have missed."
  },
  {
    "hash": "2b03718618d66e7e672663230be1ee857d3fb89a",
    "author": "Ivan Petkov",
    "date": 1425339348,
    "message": "Enable recursion for visit_ty in lint visitor\n\n* The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Disabled the `exceeding_bitshifts` lint for\n  compile-fail/huge-array-simple test so it doesn't shadow the expected\n  error on 32bit systems\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]"
  },
  {
    "hash": "76e9fa63ba0b6d892aa880db9c8373ede3e67c03",
    "author": "Brian Anderson",
    "date": 1425341566,
    "message": "core: Audit num module for int/uint\n\n* count_ones/zeros, trailing_ones/zeros return u32, not usize\n* rotate_left/right take u32, not usize\n* RADIX, MANTISSA_DIGITS, DIGITS, BITS, BYTES are u32, not usize\n\nDoesn't touch pow because there's another PR for it.\n\n[breaking-change]"
  },
  {
    "hash": "93613a543f0cae68ea82e6a66b9b9cdfa13b673e",
    "author": "Alex Crichton",
    "date": 1425271297,
    "message": "std: Stabilize the `process` module\n\nThis commits blanket marks the API of the `std::process` module as `#[stable]`.\nThe module's API is very similar to the old `std::old_io::process` API and has\ngenerally had quite a bit of time to bake both before and after the new module\nlanded.\n\nThe one modification made to the API is that `Stdio::capture` is now named\n`stdio::piped`.\n\n[breaking-change]"
  },
  {
    "hash": "ef8b20a564bab2050403f2f5c1dab90e0941adf7",
    "author": "Manish Goregaokar",
    "date": 1425248634,
    "message": "Rollup merge of #22821 - ipetkov:lint-method-rename, r=eddyb\n\n Traits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "2fc62244113d01e9524ed712210ba52e8471e2a9",
    "author": "Ivan Petkov",
    "date": 1425160597,
    "message": "Rename LintPass::check_trait_method to check_trait_item\n\nTraits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "157614249594f187f421cd97f928e64c5ab5c1fa",
    "author": "bors",
    "date": 1425219778,
    "message": "Auto merge of #22880 - alexcrichton:deprecate-io-extensions, r=huonw\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\r\nwith no replacement for now.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "d79e91033770fc5a760d34511769f5ba6c872c77",
    "author": "Alex Crichton",
    "date": 1425083193,
    "message": "std: Deprecated the `old_io::extensions` module\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\nwith no replacement for now.\n\n[breaking-change]"
  },
  {
    "hash": "d9fb9765a13d44f051cae9a9a7d010621b8e42cb",
    "author": "Manish Goregaokar",
    "date": 1425183588,
    "message": "Rollup merge of #22907 - dotdash:static_assert_bool, r=eddyb\n\n static_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "d11b48c85c1cceb559ab8a08815ba3f7b3312c44",
    "author": "Björn Steinbrink",
    "date": 1425148129,
    "message": "Error out when using static_assert on a non-boolean value\n\nstatic_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "040a811b9190d2c2c595e09b5d1db07bedffdde9",
    "author": "Manish Goregaokar",
    "date": 1425131340,
    "message": "Rollup merge of #22884 - japaric:obsolete, r=alexcrichton\n\n This is leftover from #21843\n\nIf you still have `|&:| {}` closures in your code, simply remove the `&:` part.\n\n[breaking-change]"
  },
  {
    "hash": "37760c1f25fc55814a92cce1c98edefdc0740188",
    "author": "Manish Goregaokar",
    "date": 1425131339,
    "message": "Rollup merge of #22875 - kmcallister:maceager, r=sfackler\n\n MacEager is a MacResult implementation for the common case where you've already built each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator.\n\nr? @sfackler"
  },
  {
    "hash": "f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad",
    "author": "Keegan McAllister",
    "date": 1425064625,
    "message": "Replace MacExpr / MacPat / MacItems with MacEager\n\nMacEager is a MacResult implementation for the common case where you've already\nbuilt each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator."
  },
  {
    "hash": "48aeaba9347a25b2e3848e0dcbc1d8f6b0076718",
    "author": "bors",
    "date": 1425103578,
    "message": "Auto merge of #22801 - huonw:crateify-lint, r=kmcallister\n\nThis pulls out the implementations of most built-in lints into a\r\nseparate crate, to reduce edit-compile-test iteration times with\r\nlibrustc_lint and increase parallelism. This should enable lints to be\r\nrefactored, added and deleted much more easily as it slashes the\r\nedit-compile cycle to get a minimal working compiler to test with (`make\r\nrustc-stage1`) from\r\n\r\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\r\n        libcore -> ... -> libstd\r\n\r\nto\r\n\r\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\r\n\r\nwhich is significantly faster, mainly due to avoiding the librustc build\r\nitself.\r\n\r\nThe intention would be to move as much as possible of the infrastructure\r\ninto the crate too, but the plumbing is deeply intertwined with librustc\r\nitself at the moment. Also, there are lints for which diagnostics are\r\nregistered directly in the compiler code, not in their own crate\r\ntraversal, and their definitions have to remain in librustc.\r\n\r\nThis is a [breaking-change] for direct users of the compiler APIs:\r\ncallers of `rustc::session::build_session` or\r\n`rustc::session::build_session_` need to manually call\r\n`rustc_lint::register_builtins` on their return value.\r\n\r\nThis should make #22206 easier."
  },
  {
    "hash": "532cd5f85a93921f74f5991db2e419c6da58b188",
    "author": "Huon Wilson",
    "date": 1425098039,
    "message": "Separate most of rustc::lint::builtin into a separate crate.\n\nThis pulls out the implementations of most built-in lints into a\nseparate crate, to reduce edit-compile-test iteration times with\nlibrustc_lint and increase parallelism. This should enable lints to be\nrefactored, added and deleted much more easily as it slashes the\nedit-compile cycle to get a minimal working compiler to test with (`make\nrustc-stage1`) from\n\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\n        libcore -> ... -> libstd\n\nto\n\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\n\nwhich is significantly faster, mainly due to avoiding the librustc build\nitself.\n\nThe intention would be to move as much as possible of the infrastructure\ninto the crate too, but the plumbing is deeply intertwined with librustc\nitself at the moment. Also, there are lints for which diagnostics are\nregistered directly in the compiler code, not in their own crate\ntraversal, and their definitions have to remain in librustc.\n\nThis is a [breaking-change] for direct users of the compiler APIs:\ncallers of `rustc::session::build_session` or\n`rustc::session::build_session_` need to manually call\n`rustc_lint::register_builtins` on their return value.\n\nThis should make #22206 easier."
  },
  {
    "hash": "ce5f1b3216be790be590ad71eabccc16c9b86c74",
    "author": "Manish Goregaokar",
    "date": 1425055023,
    "message": "Rollup merge of #22817 - jmesmon:result-or-type, r=huonw\n\n Changes .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` & `or_else`\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "07dc8d67c92017f950eef3951ec901cb2a3add7e",
    "author": "Cody P Schafer",
    "date": 1424903908,
    "message": "Result::or : avoid over-specializing the type\n\nChanges .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` and `or_else` member\ntypes.\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "91569a95f16580f05f9dcb4b6d6eff50203cdde8",
    "author": "Manish Goregaokar",
    "date": 1425055022,
    "message": "Rollup merge of #22795 - alexcrichton:issue-22617, r=huonw\n\n Keeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "18878b155ebf3c70445f2a461582475f5ef72c92",
    "author": "Alex Crichton",
    "date": 1424844261,
    "message": "std: Require `&mut self` for Iterator::all\n\nKeeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "6c6f2317bae63261123cd94ebe214e80fb6ad78e",
    "author": "Manish Goregaokar",
    "date": 1424840386,
    "message": "Rollup merge of #22729 - alexcrichton:ptr-stabilization, r=aturon\n\n Specifically, the following actions were takend:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n\n[breaking-change]"
  },
  {
    "hash": "ab45694198356ae78972025e0d3beece297431d1",
    "author": "Alex Crichton",
    "date": 1424816553,
    "message": "std: Stabilize some `ptr` functions\n\nSpecifically, the following actions were taken:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n* All type parameters now are `T: ?Sized` wherever possible and new clauses were\n  added to the `offset` functions to require that the type is sized.\n\n[breaking-change]"
  },
  {
    "hash": "b18584cbd942e2559e718d6318fdbc494e9047bd",
    "author": "Manish Goregaokar",
    "date": 1424840379,
    "message": "Rollup merge of #22727 - alexcrichton:prep-env, r=aturon\n\n This commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  },
  {
    "hash": "2d200c9c8bd6659720a68ab8dd74218b1e58c1e9",
    "author": "Alex Crichton",
    "date": 1424820462,
    "message": "std: Move std::env to the new I/O APIs\n\nThis commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  }
]
