[
  {
    "hash": "7648776503040b302fe0589311fb27afe7c1e6cc",
    "author": "bors",
    "date": 1434067227,
    "message": "Auto merge of #26225 - arielb1:raw-self, r=eddyb\n\nThis can't be made to work with the current setup.\r\n\r\nTechnically a [breaking-change], but a simple bug fix.\r\n\r\nFixes #26194."
  },
  {
    "hash": "b70f49b86fa4d8780f46e869880e84e1c24c2f19",
    "author": "bors",
    "date": 1433355669,
    "message": "Auto merge of #24910 - steveklabnik:remove_static_assert, r=alexcrichton\n\nThis was always a weird feature, and isn't being used in the compiler.\r\nStatic assertions should be done better than this.\r\n\r\nFixes #13951\r\nFixes #23008\r\nFixes #6676\r\n\r\nThis is behind a feature gate, but that's still a\r\n\r\n[breaking-change]\r\n\r\n(It's not entirely clear to me that this should or shouldn't have an RFC, but if it does, I'm fine blocking on such a thing.)"
  },
  {
    "hash": "5235065d740cad78ab55a89299fc1f5d32bf8f46",
    "author": "Steve Klabnik",
    "date": 1433338693,
    "message": "Remove #[static_assert]\n\nThis was always a weird feature, and isn't being used in the compiler.\nStatic assertions should be done better than this.\n\nThis implements RFC #1096.\n\nFixes #13951\nFixes #23008\nFixes #6676\n\nThis is behind a feature gate, but that's still a\n\n[breaking-change]"
  },
  {
    "hash": "32211e1d27c258c62cafb6ba357e67db932367bf",
    "author": "Ulrik Sverdrup",
    "date": 1433016940,
    "message": "Mark Arc function get_mut and method make_unique unsafe\n\nThis is a temporary mitigation for issue #24880 which points out that\nthese functions are racy in a particular situation where weak pointers\nexist.\n\nTo mitigate this, mark the functions unsafe until this can be fixed or\nanother decision is made.\n\nThis is a breaking change to unstable API, because the new version\nrequires an `unsafe` block. Review carefully if weak pointers may race\nfor any uses of this API and consider abandoning it.\n\n[breaking-change]"
  },
  {
    "hash": "bd85983d059151c9ef07dbd11a35f1d16463eb94",
    "author": "Steven Fackler",
    "date": 1431909209,
    "message": "Make debug builders take &mut self, add entries method\n\n[breaking-change]"
  },
  {
    "hash": "c23a9d42ea082830593a73d25821842baf9ccf33",
    "author": "bors",
    "date": 1431821134,
    "message": "Auto merge of #25387 - eddyb:syn-file-loader, r=nikomatsakis\n\nThis allows compiling entire crates from memory or preprocessing source files before they are tokenized.\r\n\r\nMinor API refactoring included, which is a [breaking-change] for libsyntax users:\r\n* `ParseSess::{next_node_id, reserve_node_ids}` moved to rustc's `Session`\r\n* `new_parse_sess` -> `ParseSess::new`\r\n* `new_parse_sess_special_handler` -> `ParseSess::with_span_handler`\r\n* `mk_span_handler` -> `SpanHandler::new`\r\n* `default_handler` -> `Handler::new`\r\n* `mk_handler` -> `Handler::with_emitter`\r\n* `string_to_filemap(sess source, path)` -> `sess.codemap().new_filemap(path, source)`"
  },
  {
    "hash": "2e07b0d6be3d2ffcfb154b5cbbe02bc166014172",
    "author": "Adolfo Ochagavía",
    "date": 1422700727,
    "message": "Deprecate SyntaxExtension::Modifier\n\nReplaced by SyntaxExtension::MultiModifier\n\n[breaking-change]"
  },
  {
    "hash": "6f233aaa0c743cc6ca7e42d7dcd4b7d92ef4ad9a",
    "author": "Adolfo Ochagavía",
    "date": 1422700727,
    "message": "Deprecate SyntaxExtension::Decorator\n\nIt has been replaced by SyntaxExtension::MultiDecorator\n\n[breaking-change]"
  },
  {
    "hash": "57690399a2ab6dd579ea1f97e9866b213f8b14d4",
    "author": "Adolfo Ochagavía",
    "date": 1422700725,
    "message": "Deprecate ItemDecorator in favor of MultiItemDecorator\n\n[breaking-change]"
  },
  {
    "hash": "53579e6d866eea41f2d3d8d0ddff42c73e75cea1",
    "author": "Adolfo Ochagavía",
    "date": 1422700724,
    "message": "Deprecate ItemModifier in favor of MultiItemModifier\n\n[breaking-change]"
  },
  {
    "hash": "67ba6dcf68860d8a20891faad88a33b35ed58df5",
    "author": "bors",
    "date": 1431183416,
    "message": "Auto merge of #24612 - lifthrasiir:flt2dec, r=pnkfelix\n\nThis is a direct port of my prior work on the float formatting. The detailed description is available [here](https://github.com/lifthrasiir/rust-strconv#flt2dec). In brief,\r\n\r\n* This adds a new hidden module `core::num::flt2dec` for testing from `libcoretest`. Why is it in `core::num` instead of `core::fmt`? Because I envision that the table used by `flt2dec` is directly applicable to `dec2flt` (cf. #24557) as well, which exceeds the realm of \"formatting\".\r\n* This contains both Dragon4 algorithm (exact, complete but slow) and Grisu3 algorithm (exact, fast but incomplete).\r\n* The code is accompanied with a large amount of self-tests and some exhaustive tests. In particular, `libcoretest` gets a new dependency on `librand`. For the external interface it relies on the existing test suite.\r\n* It is known that, in the best case, the entire formatting code has about 30 KBs of binary overhead (judged from strconv experiments). Not too bad but there might be a potential room for improvements.\r\n\r\nThis is rather large code. I did my best to comment and annotate the code, but you have been warned.\r\n\r\nFor the maximal availability the original code was licensed in CC0, but I've also dual-licensed it in MIT/Apache as well so there should be no licensing concern.\r\n\r\nThis is [breaking-change] as it changes the float output slightly (and it also affects the casing of `inf` and `nan`). I hope this is not a big deal though :)\r\n\r\nFixes #7030, #18038 and #24556. Also related to #6220 and #20870.\r\n\r\n## Known Issues\r\n\r\n- [x] I've yet to finish `make check-stage1`. It does pass main test suites including `run-pass` but there might be some unknown edges on the doctests.\r\n- [ ] Figure out how this PR affects rustc.\r\n- [ ] Determine which internal routine is mapped to the formatting specifier. Depending on the decision, some internal routine can be safely removed (for instance, currently `to_shortest_str` is unused)."
  },
  {
    "hash": "5aa9f38285b47e2eadaaac0e343da90b922994f1",
    "author": "Kang Seonghoon",
    "date": 1430889701,
    "message": "core: made the core formatter to use a new flt2dec.\n\nAs a side effect `core::fmt::float` is gone now. This also slightly\nchanges the float output, so this is:\n\n[breaking-change]"
  },
  {
    "hash": "3906edf41e8faa0610daea954ffbda39841fbc0d",
    "author": "bors",
    "date": 1431163243,
    "message": "Auto merge of #25212 - pnkfelix:dropck-box-trait, r=nikomatsakis\n\ndropck: must assume `Box<Trait + 'a>` has a destructor of interest.\r\n\r\nFix #25199.\r\n\r\nThis detail was documented in [RFC 769]; the implementation was just missing.\r\n\r\n[breaking-change]\r\n\r\nThe breakage here falls into both obvious and non-obvious cases.\r\n\r\nThe obvious case: if you were relying on the unsoundness this exposes (namely being able to reference dead storage from a destructor, by doing it via a boxed trait object bounded by the lifetime of the dead storage), then this change disallows that.\r\n\r\nThe non-obvious cases: The way dropck works, it causes lifetimes to be extended to longer extents than they covered before. I.e.  lifetimes that are attached as trait-bounds may become longer than they were previously.\r\n\r\n* This includes lifetimes that are only *implicitly* attached as trait-bounds (due to [RFC 599]). So you may have code that was e.g. taking a parameter of type `&'a Box<Trait>` (which expands to `&'a Box<Trait+'a>`), that now may need to be assigned type `&'a Box<Trait+'static>` to ensure that `'a` is not inadvertantly inferred to a region that is actually too long.  (See commit ee06263 for an example of this.)\r\n\r\n[RFC 769]: https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#the-drop-check-rule\r\n\r\n[RFC 599]: https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md"
  },
  {
    "hash": "b5b5a177588c0e8dfc6b9e79540bcbd1eeb9ef91",
    "author": "Felix S. Klock II",
    "date": 1431090376,
    "message": "dropck: must assume `Box<Trait + 'a>` has a destructor of interest.\n\nImplements this (previously overlooked) note from [RFC 769]:\n\n> (Note: When encountering a D of the form `Box<Trait+'b>`, we\n> conservatively assume that such a type has a Drop implementation\n> parametric in 'b.)\n\nFix #25199.\n\n[breaking-change]\n\nThe breakage here falls into both obvious and non-obvious cases.\n\nThe obvious case: if you were relying on the unsoundness this exposes\n(namely being able to reference dead storage from a destructor, by\ndoing it via a boxed trait object bounded by the lifetime of the dead\nstorage), then this change disallows that.\n\nThe non-obvious cases: The way dropck works, it causes lifetimes to be\nextended to longer extents than they covered before. I.e.  lifetimes\nthat are attached as trait-bounds may become longer than they were\npreviously.\n\n* This includes lifetimes that are only *implicitly* attached as\n  trait-bounds (due to [RFC 599]). So you may have code that was\n  e.g. taking a parameter of type `&'a Box<Trait>` (which expands to\n  `&'a Box<Trait+'a>`), that now may need to be assigned type `&'a\n  Box<Trait+'static>` to ensure that `'a` is not inadvertantly\n  inferred to a region that is actually too long.  (See earlier commit\n  in this PR for an example of this.)\n\n[RFC 769]: https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#the-drop-check-rule\n\n[RFC 599]: https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md"
  },
  {
    "hash": "5ae026e8923d71d16a4d2b9a592bbcab92d8723a",
    "author": "bors",
    "date": 1431035111,
    "message": "Auto merge of #25157 - alexcrichton:remove-vec-add, r=aturon\n\nIdeally this trait implementation would be unstable, requiring crates to opt-in\r\nif they would like the functionality, but that's not currently how stability\r\nworks so the implementation needs to be removed entirely.\r\n\r\nThis may come back at a future date, but for now the conservative option is to\r\nremove it.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "8d3f84e235b22688dd1592cfb86f31459a79ac5f",
    "author": "Alex Crichton",
    "date": 1430934754,
    "message": "std: Remove addition on vectors for now\n\nIdeally this trait implementation would be unstable, requiring crates to opt-in\nif they would like the functionality, but that's not currently how stability\nworks so the implementation needs to be removed entirely.\n\nThis may come back at a future date, but for now the conservative option is to\nremove it.\n\n[breaking-change]"
  },
  {
    "hash": "d131f335579b8c080a2416a65ca703169fae560b",
    "author": "Sean McArthur",
    "date": 1430889983,
    "message": "lint: deny transmuting from immutable to mutable, since it's undefined behavior\n\n[breaking-change] Technically breaking, since code that had been using\nthese transmutes before will no longer compile. However, it was\nundefined behavior, so really, it's a good thing. Fixing your code would\nrequire some re-working to use an UnsafeCell instead.\n\nCloses #13146"
  },
  {
    "hash": "eae692e375cec222803efb7175c79fedc228eea9",
    "author": "bors",
    "date": 1430849907,
    "message": "Auto merge of #25009 - alexcrichton:less-buffered-stream, r=aturon\n\nAs pointed out in #17136 the semantics of a `BufStream` aren't always what one\r\nexpects, and it looks like other [languages like C#][c-sharp] implement a\r\nbuffered stream with only one underlying buffer. For now this commit\r\ndestabilizes the primitive in the `std::io` module to give us some more time in\r\nfiguring out what to do with it.\r\n\r\n[c-sharp]: https://msdn.microsoft.com/en-us/library/system.io.bufferedstream%28v=vs.110%29.aspx\r\n\r\n[breaking-change]"
  },
  {
    "hash": "db477eef72924c7b34e9617627eaae37c71bdc1c",
    "author": "Alex Crichton",
    "date": 1430434978,
    "message": "std: Destabilize io::BufStream\n\nAs pointed out in #17136 the semantics of a `BufStream` aren't always what one\nexpects, and it looks like other [languages like C#][c-sharp] implement a\nbuffered stream with only one underlying buffer. For now this commit\ndestabilizes the primitive in the `std::io` module to give us some more time in\nfiguring out what to do with it.\n\n[c-sharp]: https://msdn.microsoft.com/en-us/library/system.io.bufferedstream%28v=vs.110%29.aspx\n\n[breaking-change]"
  },
  {
    "hash": "f6574c5b0404f55c4dd4056be47d37eff33684b5",
    "author": "bors",
    "date": 1430520849,
    "message": "Auto merge of #25006 - alexcrichton:unstable-indexing, r=aturon\n\nThese implementations were intended to be unstable, but currently the stability\r\nattributes cannot handle a stable trait with an unstable `impl` block. This\r\ncommit also audits the rest of the standard library for explicitly-`#[unstable]`\r\nimpl blocks. No others were removed but some annotations were changed to\r\n`#[stable]` as they're defacto stable anyway.\r\n\r\nOne particularly interesting `impl` marked `#[stable]` as part of this commit\r\nis the `Add<&[T]>` impl for `Vec<T>`, which uses `push_all` and implicitly\r\nclones all elements of the vector provided.\r\n\r\nCloses #24791\r\n\r\n[breaking-change]"
  },
  {
    "hash": "5c710b593b429d39ea01375172a9ce968f43ab26",
    "author": "bors",
    "date": 1430454173,
    "message": "Auto merge of #24793 - aturon:io-error-any, r=alexcrichton\n\nThis commit brings the `Error` trait in line with the [Error interoperation\r\nRFC](https://github.com/rust-lang/rfcs/pull/201) by adding downcasting,\r\nwhich has long been intended. This change means that for any `Error`\r\ntrait objects that are `'static`, you can downcast to concrete error\r\ntypes.\r\n\r\nTo make this work, it is necessary for `Error` to inherit from\r\n`Reflect` (which is currently used to mark concrete types as \"permitted\r\nfor reflection, aka downcasting\"). This is a breaking change: it means\r\nthat impls like\r\n\r\n```rust\r\nimpl<T> Error for MyErrorType<T> { ... }\r\n```\r\n\r\nmust change to\r\n\r\n```rust\r\nimpl<T: Reflect> Error for MyErrorType<T> { ... }\r\n```\r\n\r\nThis commit furthermore marks `Reflect` as stable, since we are already\r\nessentially committed to it via `Any`. Note that in the future, if we\r\ndetermine that the parametricity aspects of `Reflect` are not needed, we\r\ncan deprecate the trait and provide a blanket implementation for it\r\nfor *all* types (rather than by using OIBIT), which would allow all\r\nmentions of `Reflect` to be dropped over time. So there is not a strong\r\ncommitment here.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton"
  },
  {
    "hash": "a5762625a168f195afbc5b74d674a93f8c692a8e",
    "author": "Aaron Turon",
    "date": 1430443222,
    "message": "Add downcasting to std::error::Error\n\nThis commit brings the `Error` trait in line with the [Error interoperation\nRFC](https://github.com/rust-lang/rfcs/pull/201) by adding downcasting,\nwhich has long been intended. This change means that for any `Error`\ntrait objects that are `'static`, you can downcast to concrete error\ntypes.\n\nTo make this work, it is necessary for `Error` to inherit from\n`Reflect` (which is currently used to mark concrete types as \"permitted\nfor reflection, aka downcasting\"). This is a breaking change: it means\nthat impls like\n\n```rust\nimpl<T> Error for MyErrorType<T> { ... }\n```\n\nmust change to something like\n\n```rust\nimpl<T: Reflect> Error for MyErrorType<T> { ... }\n```\n\nexcept that `Reflect` is currently unstable (and should remain so for\nthe time being). For now, code can instead bound by `Any`:\n\n```rust\nimpl<T: Any> Error for MyErrorType<T> { ... }\n```\n\nwhich *is* stable and has `Reflect` as a super trait. The downside is\nthat this imposes a `'static` constraint, but that only\nconstrains *when* `Error` is implemented -- it does not actually\nconstrain the types that can implement `Error`.\n\n[breaking-change]"
  },
  {
    "hash": "b475fc7d6aa1cafa91790c273908fddfb669a82e",
    "author": "Ulrik Sverdrup",
    "date": 1430213913,
    "message": "collections: Implement vec::drain(range) according to RFC 574\n\nOld `.drain()` on vec is performed using `.drain(..)` now.\n\n`.drain(range)` is unstable and under feature(collections_drain)\n\n[breaking-change]"
  },
  {
    "hash": "441b3f0c26c2e30ddb012be968141da7ce7d9d62",
    "author": "bors",
    "date": 1430241156,
    "message": "Auto merge of #24906 - pnkfelix:fsk-fix-24895, r=alexcrichton\n\ndropck: Remove `Copy` from special-cased traits\r\n\r\nFix #24895.\r\n\r\n[breaking-change]\r\n\r\nWhat does this break?  Basically, code that implements `Drop` and is\r\nusing `T:Copy` for one of its type parameters and is relying on the\r\nDrop Check rule not applying to it.\r\n\r\nHere is an example:\r\n\r\n```rust\r\n#![allow(dead_code,unused_variables,unused_assignments)]\r\nstruct D<T:Copy>(T);\r\nimpl<T:Copy> Drop for D<T> { fn drop(&mut self) { } }\r\n\r\ntrait UserT { fn c(&self) { } }\r\nimpl<T:Copy> UserT for T { }\r\nstruct E<T:UserT>(T);\r\nimpl<T:UserT> Drop for E<T> { fn drop(&mut self) { } }\r\n\r\n// This one will start breaking.\r\nfn foo() { let (d2, d1); d1 = D(34); d2 = D(&d1); }\r\n\r\n#[cfg(this_one_does_and_should_always_break)]\r\nfn bar() { let (e2, e1); e1 = E(34); e2 = E(&e1); }\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```"
  },
  {
    "hash": "b892264ea4f048feb5f380d3e659d82ba463f5b7",
    "author": "Felix S. Klock II",
    "date": 1430236036,
    "message": "Fix #24895.\n\n[breaking-change]\n\nWhat does this break?  Basically, code that implements `Drop` and is\nusing `T:Copy` for one of its type parameters and is relying on the\nDrop Check rule not applying to it.\n\nHere is an example:\n\n```rust\n#![allow(dead_code,unused_variables,unused_assignments)]\nstruct D<T:Copy>(T);\nimpl<T:Copy> Drop for D<T> { fn drop(&mut self) { } }\n\ntrait UserT { fn c(&self) { } }\nimpl<T:Copy> UserT for T { }\nstruct E<T:UserT>(T);\nimpl<T:UserT> Drop for E<T> { fn drop(&mut self) { } }\n\n// This one will start breaking.\nfn foo() { let (d2, d1); d1 = D(34); d2 = D(&d1); }\n\n#[cfg(this_one_does_and_should_always_break)]\nfn bar() { let (e2, e1); e1 = E(34); e2 = E(&e1); }\n\nfn main() {\n    foo();\n}\n```"
  },
  {
    "hash": "9c88f3be126d0fe02a92c20e1d78192f4b648401",
    "author": "bors",
    "date": 1430167608,
    "message": "Auto merge of #24765 - pnkfelix:fsk-enum-swapindrop, r=nikomatsakis\n\nInspect enum discriminant *after* calling its destructor\r\n\r\nIncludes some drive-by cleanup (e.g. changed some field and method names to reflect fill-on-drop; added comments about zero-variant enums being classified as `_match::Single`).\r\n\r\nProbably the most invasive change was the expansion of the maps `available_drop_glues` and `drop_glues` to now hold two different kinds of drop glues; there is the (old) normal drop glue, and there is (new) drop-contents glue that jumps straight to dropping the contents of a struct or enum, skipping its destructor.\r\n\r\n * For all types that do not have user-defined Drop implementations, the normal glue is generated as usual (i.e. recursively dropping the fields of the data structure).\r\n\r\n  (And this actually is exactly what the newly-added drop-contents glue does as well.)\r\n\r\n * For types that have user-defined Drop implementations, the \"normal\" drop glue now schedules a cleanup before invoking the `Drop::drop` method that will call the drop-contents glue after that invocation returns.\r\n\r\nFix #23611.\r\n\r\n----\r\n\r\nIs this a breaking change?  The prior behavior was totally unsound, and it seems unreasonable that anyone was actually relying on it.\r\n\r\nNonetheless, since there is a user-visible change to the language semantics, I guess I will conservatively mark this as a:\r\n\r\n[breaking-change]\r\n\r\n(To see an example of what sort of user-visible change this causes, see the comments in the regression test.)"
  },
  {
    "hash": "6365080c5cd27b74ec87420c351a3e7bdcff988e",
    "author": "bors",
    "date": 1430041948,
    "message": "Auto merge of #23085 - goffrie:interpolating-quote, r=huonw\n\nThis changes the `ToTokens` implementations for expressions, statements, etc. with almost-trivial ones that produce `Interpolated(*Nt(...))` pseudo-tokens. In this way, quasiquote now works the same way as macros do: already-parsed AST fragments are used as-is, not reparsed.\r\n\r\nThe `ToSource` trait is removed. Quasiquote no longer involves pretty-printing at all, which removes the need for the `encode_with_hygiene` hack. All associated machinery is removed.\r\n\r\nNew `Nonterminal`s are added: NtArm, NtImplItem, and NtTraitItem. These are just for quasiquote, not macros.\r\n\r\n`ToTokens` is no longer implemented for `Arg` (although this could be added again) and `Generics` (which I don't think makes sense).\r\n\r\nThis breaks any compiler extensions that relied on the ability of `ToTokens` to turn AST fragments back into inspectable token trees. For this reason, this closes #16987.\r\n\r\nAs such, this is a [breaking-change].\r\n\r\nFixes #16472.\r\nFixes #15962.\r\nFixes #17397.\r\nFixes #16617."
  },
  {
    "hash": "2d9831dea598d8a45c69e8c799503e8a397aacc0",
    "author": "Geoffry Song",
    "date": 1430012530,
    "message": "Interpolate AST nodes in quasiquote.\n\nThis changes the `ToTokens` implementations for expressions, statements,\netc. with almost-trivial ones that produce `Interpolated(*Nt(...))`\npseudo-tokens. In this way, quasiquote now works the same way as macros\ndo: already-parsed AST fragments are used as-is, not reparsed.\n\nThe `ToSource` trait is removed. Quasiquote no longer involves\npretty-printing at all, which removes the need for the\n`encode_with_hygiene` hack. All associated machinery is removed.\n\nA new `Nonterminal` is added, NtArm, which the parser now interpolates.\nThis is just for quasiquote, not macros (although it could be in the\nfuture).\n\n`ToTokens` is no longer implemented for `Arg` (although this could be\nadded again) and `Generics` (which I don't think makes sense).\n\nThis breaks any compiler extensions that relied on the ability of\n`ToTokens` to turn AST fragments back into inspectable token trees. For\nthis reason, this closes #16987.\n\nAs such, this is a [breaking-change].\n\nFixes #16472.\nFixes #15962.\nFixes #17397.\nFixes #16617."
  },
  {
    "hash": "00c48d3779fb4c372d2dfe7a8654c6cd1e065511",
    "author": "bors",
    "date": 1429998290,
    "message": "Auto merge of #24547 - bombless:comma, r=pnkfelix\n\nCloses #20616 \r\nIt breaks code such as <https://github.com/rust-lang/rust/blob/c64feb63418fd05bd6e5adc6f9ad763aa6a594b1/src/librustc_typeck/check/method/suggest.rs#L367>, so this is a [breaking-change], you have to add missing comma after the last lifetime arguement now."
  },
  {
    "hash": "eeb94886adccb3f13003f92f117115d17846ce1f",
    "author": "Alex Crichton",
    "date": 1429641463,
    "message": "std: Remove deprecated/unstable num functionality\n\nThis commit removes all the old casting/generic traits from `std::num` that are\nno longer in use by the standard library. This additionally removes the old\n`strconv` module which has not seen much use in quite a long time. All generic\nfunctionality has been supplanted with traits in the `num` crate and the\n`strconv` module is supplanted with the [rust-strconv crate][rust-strconv].\n\n[rust-strconv]: https://github.com/lifthrasiir/rust-strconv\n\nThis is a breaking change due to the removal of these deprecated crates, and the\nalternative crates are listed above.\n\n[breaking-change]"
  },
  {
    "hash": "98e9765d973d46faa5c80fb37a48040ca9e87b28",
    "author": "Alex Crichton",
    "date": 1429655286,
    "message": "rollup merge of #24541: alexcrichton/issue-24538\n\nThis is an implementation of [RFC 1030][rfc] which adds these traits to the\nprelude and additionally removes all inherent `into_iter` methods on collections\nin favor of the trait implementation (which is now accessible by default).\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1030\n\nThis is technically a breaking change due to the prelude additions and removal\nof inherent methods, but it is expected that essentially no code breaks in\npractice.\n\n[breaking-change]\nCloses #24538"
  },
  {
    "hash": "8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14",
    "author": "Alex Crichton",
    "date": 1429313850,
    "message": "std: Add Default/IntoIterator/ToOwned to the prelude\n\nThis is an implementation of [RFC 1030][rfc] which adds these traits to the\nprelude and additionally removes all inherent `into_iter` methods on collections\nin favor of the trait implementation (which is now accessible by default).\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1030\n\nThis is technically a breaking change due to the prelude additions and removal\nof inherent methods, but it is expected that essentially no code breaks in\npractice.\n\n[breaking-change]\nCloses #24538"
  },
  {
    "hash": "efa6a46a8eceb4ab792d5ec8e28cf3baaaa96491",
    "author": "bors",
    "date": 1429325633,
    "message": "Auto merge of #24133 - kballard:add-sync-to-io-error, r=alexcrichton\n\nThis allows `io::Error` values to be stored in `Arc` properly.\r\n\r\nBecause this requires `Sync` of any value passed to `io::Error::new()`\r\nand modifies the relevant `convert::From` impls, this is a\r\n\r\n[breaking-change]\r\n\r\nFixes #24049."
  },
  {
    "hash": "986852911464df87088007e64780165cc538f9b9",
    "author": "Kevin Ballard",
    "date": 1428366023,
    "message": "Add `Sync` to the bounds in `io::Error`\n\nThis allows `io::Error` values to be stored in `Arc` properly.\n\nBecause this requires `Sync` of any value passed to `io::Error::new()`\nand modifies the relevant `convert::From` impls, this is a\n\n[breaking-change]\n\nFixes #24049."
  },
  {
    "hash": "e40449e0d545561c73a9b9b324b5971b533a87b7",
    "author": "bors",
    "date": 1429147024,
    "message": "Auto merge of #24485 - brson:is, r=alexcrichton\n\nIt was an oversight that this was not done in the great int upheaval.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "5a3a599428f5af024857d19b5d360b148e885fa2",
    "author": "Brian Anderson",
    "date": 1429139606,
    "message": "Forbid is/us suffixes. Fixes #22496\n\nIt was an oversight that this was not done in the great int upheaval.\n\n[breaking-change]"
  },
  {
    "hash": "07f807d01f191ced1d7f4857c73fc57fbe31f421",
    "author": "bors",
    "date": 1429131916,
    "message": "Auto merge of #24330 - pnkfelix:issue-24267, r=nikomatsakis\n\nExtend rustc::middle::dataflow to allow filtering kills from flow-exits.\r\n\r\nFix borrowck analysis so that it will not treat a break that pops through an assignment\r\n```rust\r\nx = { ... break; ... }\r\n```\r\nas a kill of the \"moved-out\" bit for `x`.\r\n\r\nFix #24267.\r\n\r\n[breaking-change], but really, its only breaking code that was already buggy."
  },
  {
    "hash": "6e0fb70ff6effe7b7be2c5fe951e9161613e6707",
    "author": "Aaron Turon",
    "date": 1428961697,
    "message": "Generalize `spawn` beyond unit closures\n\n`thread::spawn` was previously restricted to closures that return `()`,\nwhich limited the utility of joining on a spawned thread. However, there\nis no reason for this restriction, and this commit allows arbitrary\nreturn types.\n\nSince it introduces a type parameter to `JoinHandle`, it's technically\na:\n\n[breaking-change]\n\nHowever, no code is actually expected to break."
  },
  {
    "hash": "6399bb425b3a82111cd554737f194c95b8f6bad5",
    "author": "Aaron Turon",
    "date": 1428952528,
    "message": "De-stabilize `thread::scoped` and friends\n\nIssue #24292 demonstrates that the `scoped` API as currently offered can\nbe memory-unsafe: the `JoinGuard` can be moved into a context that will\nfail to execute destructors prior to the stack frame being popped (for\nexample, by creating an `Rc` cycle).\n\nThis commit reverts the APIs to `unstable` status while a long-term\nsolution is worked out.\n\n(There are several possible ways to address this issue; it's not a\nfundamental problem with the `scoped` idea, but rather an indication\nthat Rust doesn't currently provide a good way to ensure that\ndestructors are run within a particular stack frame.)\n\n[breaking-change]"
  },
  {
    "hash": "e6a812402828f0f11b0de7a7e0c08c1d85a437f1",
    "author": "bors",
    "date": 1428970070,
    "message": "Auto merge of #24251 - alexcrichton:unsafe-from-raw-fd, r=aturon\n\nAs pointed out in [RFC issue 1043][rfc] it is quite useful to have the standard\r\nI/O types to provide the contract that they are the sole owner of the underlying\r\nobject they represent. This guarantee enables writing safe interfaces like the\r\n`MemoryMap` API sketched out in that issue.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/issues/1043\r\n\r\nAs constructing objects from these raw handles may end up violating these\r\nownership gurantees, the functions for construction are now marked unsafe.\r\n\r\n[breaking-change]\r\nCloses rust-lang/rfcs#1043"
  },
  {
    "hash": "2705051e2067e8f467b4cb9bc75e801a5cd4f0e7",
    "author": "Alex Crichton",
    "date": 1428621153,
    "message": "std: Make FromRawFd::from_raw_fd an unsafe method\n\nAs pointed out in [RFC issue 1043][rfc] it is quite useful to have the standard\nI/O types to provide the contract that they are the sole owner of the underlying\nobject they represent. This guarantee enables writing safe interfaces like the\n`MemoryMap` API sketched out in that issue.\n\n[rfc]: https://github.com/rust-lang/rfcs/issues/1043\n\nAs constructing objects from these raw handles may end up violating these\nownership gurantees, the functions for construction are now marked unsafe.\n\n[breaking-change]\nCloses rust-lang/rfcs#1043"
  },
  {
    "hash": "f55e66aaed42589dcda0221a4545dbaaec68e577",
    "author": "bors",
    "date": 1428946754,
    "message": "Auto merge of #24198 - alexcrichton:windows-readlink, r=aturon\n\nThe current implementation of using GetFinalPathNameByHandle actually reads all\r\nintermediate links instead of just looking at the current link. This commit\r\nalters the behavior of the function to use a different API which correctly reads\r\nonly one level of the soft link.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "f3f99fb44eea1d7037f94259aef6cbc39837ebee",
    "author": "Alex Crichton",
    "date": 1428514419,
    "message": "std: Fix fs::read_link behavior on Windows\n\nThe current implementation of using GetFinalPathNameByHandle actually reads all\nintermediate links instead of just looking at the current link. This commit\nalters the behavior of the function to use a different API which correctly reads\nonly one level of the soft link.\n\n[breaking-change]"
  },
  {
    "hash": "524547551cd6c9b33a9677e1a58e9a9d1e19c0fc",
    "author": "bors",
    "date": 1428912503,
    "message": "Auto merge of #24339 - lfairy:remove-regex-data, r=alexcrichton\n\nThe regex crate keeps its own tables now (rust-lang/regex#41) so we\r\ndon't need them here.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "5308ac939a330b74540bea5920b0086a2d954648",
    "author": "Chris Wong",
    "date": 1428877810,
    "message": "Remove regex module from libunicode\n\nThe regex crate keeps its own tables now (rust-lang/regex#41) so we\ndon't need them here.\n\n[breaking-change]"
  },
  {
    "hash": "5afa2704a6fdee62b267a5df9ca0934350dfc3d1",
    "author": "bors",
    "date": 1428802013,
    "message": "Auto merge of #23011 - nagisa:the-war-of-symbol-and-symbol, r=pnkfelix\n\nWe provide tools to tell what exact symbols to emit for any fn or static, but\r\ndon’t quite check if that won’t cause any issues later on. Some of the issues\r\ninclude LLVM mangling our names again and our names pointing to wrong locations,\r\nus generating dumb foreign call wrappers, linker errors, extern functions\r\nresolving to different symbols altogether (`extern {fn fail();} fail();` in some\r\ncases calling `fail1()`), etc.\r\n\r\nBefore the commit we had a function called `note_unique_llvm_symbol`, so it is\r\nclear somebody was aware of the issue at some point, but the function was barely\r\nused, mostly in irrelevant locations.\r\n\r\nAlong with working on it I took liberty to start refactoring trans/base into\r\na few smaller modules. The refactoring is incomplete and I hope I will find some\r\nmotivation to carry on with it.\r\n\r\nThis is possibly a [breaking-change] because it makes dumbly written code\r\nproperly invalid.\r\n\r\nThis fixes all those issues about incorrect use of #[no_mangle] being not reported/misreported/ICEd by the compiler.\r\n\r\nNB. This PR does not attempt to tackle the parallel codegen issue that was mentioned in https://github.com/rust-lang/rust/pull/22811, but I believe it should be very straightforward in a follow up PR by modifying `trans::declare::get_defined_value` to look at all the contexts.\r\n\r\ncc @alexcrichton @huonw @nrc because you commented on the original RFC issue.\r\n\r\nEDIT: wow, this became much bigger than I initially intended."
  },
  {
    "hash": "f1dabed82bfed643fbbfc93203473e384c58d20a",
    "author": "Simonas Kazlauskas",
    "date": 1428065287,
    "message": "Introduce trans::declare\n\nWe provide tools to tell what exact symbols to emit for any fn or static, but\ndon’t quite check if that won’t cause any issues later on. Some of the issues\ninclude LLVM mangling our names again and our names pointing to wrong locations,\nus generating dumb foreign call wrappers, linker errors, extern functions\nresolving to different symbols altogether (extern {fn fail();} fail(); in some\ncases calling fail1()), etc.\n\nBefore the commit we had a function called note_unique_llvm_symbol, so it is\nclear somebody was aware of the issue at some point, but the function was barely\nused, mostly in irrelevant locations.\n\nAlong with working on it I took liberty to start refactoring trans/base into\na few smaller modules. The refactoring is incomplete and I hope I will find some\nmotivation to carry on with it.\n\nThis is possibly a [breaking-change] because it makes dumbly written code\nproperly invalid."
  },
  {
    "hash": "93f7fe32d30b67baa6abf09c073c5862a978dc57",
    "author": "bors",
    "date": 1428709764,
    "message": "Auto merge of #24270 - pnkfelix:use-disr-val-for-derive-ord, r=brson\n\nUse `discriminant_value` intrinsic for `derive(PartialOrd)`\r\n\r\n[breaking-change]\r\n\r\nThis is a [breaking-change] because it can change the result of comparison operators when enum discriminants have been explicitly assigned.  Notably in a case like:\r\n```rust\r\n#[derive(PartialOrd)]\r\nenum E { A = 2, B = 1}\r\n```\r\n\r\nUnder the old deriving, `A < B` held, because `A` came before `B` in the order of declaration.  But now we use the ordering according to the provided values, and thus `A > B`.  (However, this change is very unlikely to break much, if any, code, since the orderings themselves should all remain well-defined, total, etc.)\r\n\r\nFix #15523"
  },
  {
    "hash": "d6c72306c8fc2ec0fd9d6e499c32f2bf52f0b8ba",
    "author": "Alex Crichton",
    "date": 1428624422,
    "message": "std: Set CLOEXEC for all fds opened on unix\n\nThis commit starts to set the CLOEXEC flag for all files and sockets opened by\nthe standard library by default on all unix platforms. There are a few points of\nnote in this commit:\n\n* The implementation is not 100% satisfactory in the face of threads. File\n  descriptors only have the `F_CLOEXEC` flag set *after* they are opened,\n  allowing for a fork/exec to happen in the middle and leak the descriptor.\n  Some platforms do support atomically opening a descriptor while setting the\n  `CLOEXEC` flag, and it is left as a future extension to bind these apis as it\n  is unclear how to do so nicely at this time.\n\n* The implementation does not offer a method of opting into the old behavior of\n  not setting `CLOEXEC`. This will possibly be added in the future through\n  extensions on `OpenOptions`, for example.\n\n* This change does not yet audit any Windows APIs to see if the handles are\n  inherited by default by accident.\n\nThis is a breaking change for users who call `fork` or `exec` outside of the\nstandard library itself and expect file descriptors to be inherted. All file\ndescriptors created by the standard library will no longer be inherited.\n\n[breaking-change]"
  },
  {
    "hash": "e3f324cd9d7b27eda6133c407a4751a8b0217631",
    "author": "Aaron Turon",
    "date": 1428594849,
    "message": "Improve bounds in Iterator API\n\nThis commit changes `Iterator`'s API by:\n\n* Generalizing bounds from `Iterator` to `IntoIterator` whenever\n  possible, matching the semantics and ergonomics of `for` loops.\n\n* Tightens up a few method-level bounds so that you get an error\n  earlier. For example, `rev` did not require `DoubleEndedIterator` even\n  though the result is only an `Iterator` when the original iterator was\n  double-ended.\n\nCloses #23587\n\nThe bound-tightening is technically a:\n\n[breaking-change]\n\nbut no code should break in practice."
  },
  {
    "hash": "5daee19eca622030c598042d9615df17d4ad035f",
    "author": "Manish Goregaokar",
    "date": 1428605683,
    "message": "Rollup merge of #24212 - alexcrichton:destabilize-begin-unwind, r=huonw\n\n Now that we have a `#[allow_internal_unstable]` attribute for macros there's no\nneed for these two `begin_unwind` functions to be stable. Right now the `panic!`\ninterface is the only one we wish to stabilize, so remove the stability markers\nfrom these functions.\n\nWhile this is a breaking change, it is highly unlikely to break any actual code.\nIt is recommended to use the `panic!` macro instead if it breaks explicit calls\ninto `std::rt`.\n\n[breaking-change]\ncc #24208"
  },
  {
    "hash": "65e3f0325a64d8f1affa146b3575a4b7c90458d7",
    "author": "Alex Crichton",
    "date": 1428533326,
    "message": "std: Destabilize the internals of panic!\n\nNow that we have a `#[allow_internal_unstable]` attribute for macros there's no\nneed for these two `begin_unwind` functions to be stable. Right now the `panic!`\ninterface is the only one we wish to stabilize, so remove the stability markers\nfrom these functions.\n\nWhile this is a breaking change, it is highly unlikely to break any actual code.\nIt is recommended to use the `panic!` macro instead if it breaks explicit calls\ninto `std::rt`.\n\n[breaking-change]\ncc #24208"
  },
  {
    "hash": "97f24a85965c3c51a2c18be029091ae52bbd7920",
    "author": "Tobias Bucher",
    "date": 1428445595,
    "message": "Make `sum` and `product` inherent methods on `Iterator`\n\nIn addition to being nicer, this also allows you to use `sum` and `product` for\niterators yielding custom types aside from the standard integers.\n\nDue to removing the `AdditiveIterator` and `MultiplicativeIterator` trait, this\nis a breaking change.\n\n[breaking-change]"
  },
  {
    "hash": "82dcec7ee4a8a71fdfb8e8771ae6785261ec1d5b",
    "author": "bors",
    "date": 1428045231,
    "message": "Auto merge of #23934 - lfairy:write-no-deref, r=alexcrichton\n\nThis means passing in e.g. a `Vec<u8>` or `String` will work as\r\nintended, rather than deref-ing to `&mut [u8]` or `&mut str`.\r\n\r\n[breaking-change]\r\n\r\nCloses #23768"
  },
  {
    "hash": "7c3efcc5bb260234fc163340c9fd7aad3d8d780e",
    "author": "Chris Wong",
    "date": 1427870929,
    "message": "Don't reborrow the target of a `write!()`\n\nThis means passing in e.g. a `Vec<u8>` or `String` will work as\nintended, rather than deref-ing to `&mut [u8]` or `&mut str`.\n\n[breaking-change]\n\nCloses #23768"
  },
  {
    "hash": "fc98b19cf72ea45851ebb7b28af160be92b19128",
    "author": "bors",
    "date": 1428035392,
    "message": "Auto merge of #23832 - petrochenkov:usize, r=aturon\n\nThese constants are small and can fit even in `u8`, but semantically they have type `usize` because they denote sizes and are almost always used in `usize` context. The change of their type to `u32` during the integer audit led only to the large amount of `as usize` noise (see the second commit, which removes this noise).\r\n\r\nThis is a minor [breaking-change] to an unstable interface.\r\n\r\nr? @aturon"
  },
  {
    "hash": "655634e6ab00707ef98034dcfb32000cbfa7a01c",
    "author": "Alex Crichton",
    "date": 1427921780,
    "message": "rollup merge of #23949: aturon/stab-timeout\n\nThis commit renames and stabilizes:\n\n* `Condvar::wait_timeout_ms` (renamed from `wait_timeout`)\n* `thread::park_timeout_ms` (renamed from `park_timeout`)\n* `thread::sleep_ms` (renamed from `sleep`)\n\nIn each case, the timeout is taken as a `u32` number of milliseconds,\nrather than a `Duration`.\n\nThese functions are likely to be deprecated once a stable form of\n`Duration` is available, but there is little cost to having these named\nvariants around, and it's crucial functionality for 1.0.\n\n[breaking-change]\n\nr? @alexcrichton\n\ncc @sfackler @carllerche"
  },
  {
    "hash": "371277fb0d210152eb8c79e30bd7f7749c5af63c",
    "author": "Aaron Turon",
    "date": 1427921025,
    "message": "Stabilize basic timeout functionality\n\nThis commit renames and stabilizes:\n\n* `Condvar::wait_timeout_ms` (renamed from `wait_timeout`)\n* `thread::park_timeout_ms` (renamed from `park_timeout`)\n* `thread::sleep_ms` (renamed from `sleep`)\n\nIn each case, the timeout is taken as a `u32` number of milliseconds,\nrather than a `Duration`.\n\nThese functions are likely to be deprecated once a stable form of\n`Duration` is available, but there is little cost to having these named\nvariants around, and it's crucial functionality for 1.0.\n\n[breaking-change]"
  },
  {
    "hash": "cade32acf6f5ff209ee082d70350d9bc0362985a",
    "author": "Niko Matsakis",
    "date": 1427913681,
    "message": "Remove `Thunk` struct and `Invoke` trait; change `Thunk` to be an alias\nfor `Box<FnBox()>`. I found the alias was still handy because it is\nshorter than the fully written type.\n\nThis is a [breaking-change]: convert code using `Invoke` to use `FnBox`,\nwhich is usually pretty straight-forward. Code using thunk mostly works\nif you change `Thunk::new => Box::new` and `foo.invoke(arg)` to\n`foo(arg)`."
  },
  {
    "hash": "e9bacbaa2c9c88aaecf07ee30f02d08a1999e5c6",
    "author": "Alex Crichton",
    "date": 1427920208,
    "message": "rollup merge of #23951: alexcrichton/splitn\n\nThis commit is an implementation of [RFC 979][rfc] which changes the meaning of\nthe count parameter to the `splitn` function on strings and slices. The\nparameter now means the number of items that are returned from the iterator, not\nthe number of splits that are made.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/979\n\nCloses #23911\n[breaking-change]"
  },
  {
    "hash": "e98dce3e00a7b6bfd264418ef993bbf9cdb1f0b6",
    "author": "Alex Crichton",
    "date": 1427920182,
    "message": "std: Changing the meaning of the count to splitn\n\nThis commit is an implementation of [RFC 979][rfc] which changes the meaning of\nthe count parameter to the `splitn` function on strings and slices. The\nparameter now means the number of items that are returned from the iterator, not\nthe number of splits that are made.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/979\n\nCloses #23911\n[breaking-change]"
  },
  {
    "hash": "ac77392f8ab1c201b0c927f6a2d30b632b95acda",
    "author": "Alex Crichton",
    "date": 1427843568,
    "message": "std: Stabilize last bits of io::Error\n\nThis commit stabilizes a few remaining bits of the `io::Error` type:\n\n* The `Error::new` method is now stable. The last `detail` parameter was removed\n  and the second `desc` parameter was generalized to `E: Into<Box<Error>>` to\n  allow creating an I/O error from any form of error. Currently there is no form\n  of downcasting, but this will be added in time.\n\n* An implementation of `From<&str> for Box<Error>` was added to liballoc to\n  allow construction of errors from raw strings.\n\n* The `Error::raw_os_error` method was stabilized as-is.\n\n* Trait impls for `Clone`, `Eq`, and `PartialEq` were removed from `Error` as it\n  is not possible to use them with trait objects.\n\nThis is a breaking change due to the modification of the `new` method as well as\nthe removal of the trait implementations for the `Error` type.\n\n[breaking-change]"
  },
  {
    "hash": "3422be3666cba57f1a6fb6ab3deb1a6df66b7695",
    "author": "Alex Crichton",
    "date": 1427842775,
    "message": "rollup merge of #23288: alexcrichton/issue-19470\n\nThis is a deprecated attribute that is slated for removal, and it also affects\nall implementors of the trait. This commit removes the attribute and fixes up\nimplementors accordingly. The primary implementation which was lost was the\nability to compare `&[T]` and `Vec<T>` (in that order).\n\nThis change also modifies the `assert_eq!` macro to not consider both directions\nof equality, only the one given in the left/right forms to the macro. This\nmodification is motivated due to the fact that `&[T] == Vec<T>` no longer\ncompiles, causing hundreds of errors in unit tests in the standard library (and\nlikely throughout the community as well).\n\nCloses #19470\n[breaking-change]"
  },
  {
    "hash": "5cf126ae2f6af1cdac901f6995e3c2bab35e587f",
    "author": "Alex Crichton",
    "date": 1427834354,
    "message": "std: Remove #[old_orphan_check] from PartialEq\n\nThis is a deprecated attribute that is slated for removal, and it also affects\nall implementors of the trait. This commit removes the attribute and fixes up\nimplementors accordingly. The primary implementation which was lost was the\nability to compare `&[T]` and `Vec<T>` (in that order).\n\nThis change also modifies the `assert_eq!` macro to not consider both directions\nof equality, only the one given in the left/right forms to the macro. This\nmodification is motivated due to the fact that `&[T] == Vec<T>` no longer\ncompiles, causing hundreds of errors in unit tests in the standard library (and\nlikely throughout the community as well).\n\ncc #19470\n[breaking-change]"
  },
  {
    "hash": "80bf31dd514055177b22c3dc66836d39eb5b1648",
    "author": "bors",
    "date": 1427813446,
    "message": "Auto merge of #23549 - aturon:stab-num, r=alexcrichton\n\nThis commit stabilizes the `std::num` module:\r\n\r\n* The `Int` and `Float` traits are deprecated in favor of (1) the\r\n  newly-added inherent methods and (2) the generic traits available in\r\n  rust-lang/num.\r\n\r\n* The `Zero` and `One` traits are reintroduced in `std::num`, which\r\n  together with various other traits allow you to recover the most\r\n  common forms of generic programming.\r\n\r\n* The `FromStrRadix` trait, and associated free function, is deprecated\r\n  in favor of inherent implementations.\r\n\r\n* A wide range of methods and constants for both integers and floating\r\n  point numbers are now `#[stable]`, having been adjusted for integer\r\n  guidelines.\r\n\r\n* `is_positive` and `is_negative` are renamed to `is_sign_positive` and\r\n  `is_sign_negative`, in order to address #22985\r\n\r\n* The `Wrapping` type is moved to `std::num` and stabilized;\r\n  `WrappingOps` is deprecated in favor of inherent methods on the\r\n  integer types, and direct implementation of operations on\r\n  `Wrapping<X>` for each concrete integer type `X`.\r\n\r\nCloses #22985\r\nCloses #21069\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton"
  },
  {
    "hash": "e17f4fc1d4545f5c17b21805c5145b05495484ee",
    "author": "Sean McArthur",
    "date": 1427764138,
    "message": "convert: remove FromError, use From<E> instead\n\nThis removes the FromError trait, since it can now be expressed using\nthe new convert::Into trait. All implementations of FromError<E> where\nchanged to From<E>, and `try!` was changed to use From::from instead.\n\nBecause this removes FromError, it is a breaking change, but fixing it\nsimply requires changing the words `FromError` to `From`, and\n`from_error` to `from`.\n\n[breaking-change]"
  },
  {
    "hash": "da04788efca6ec1e421139fb4916a5aacd49a2e2",
    "author": "Alex Crichton",
    "date": 1427842406,
    "message": "rollup merge of #23875: aturon/revise-convert-2\n\n* Marks `#[stable]` the contents of the `std::convert` module.\n\n* Added methods `PathBuf::as_path`, `OsString::as_os_str`,\n  `String::as_str`, `Vec::{as_slice, as_mut_slice}`.\n\n* Deprecates `OsStr::from_str` in favor of a new, stable, and more\n  general `OsStr::new`.\n\n* Adds unstable methods `OsString::from_bytes` and `OsStr::{to_bytes,\n  to_cstring}` for ergonomic FFI usage.\n\n[breaking-change]\n\nr? @alexcrichton"
  },
  {
    "hash": "9fc51efe3344a32d9e522f08383f052277b6ab63",
    "author": "Aaron Turon",
    "date": 1427826278,
    "message": "Stabilize `std::convert` and related code\n\n* Marks `#[stable]` the contents of the `std::convert` module.\n\n* Added methods `PathBuf::as_path`, `OsString::as_os_str`,\n  `String::as_str`, `Vec::{as_slice, as_mut_slice}`.\n\n* Deprecates `OsStr::from_str` in favor of a new, stable, and more\n  general `OsStr::new`.\n\n* Adds unstable methods `OsString::from_bytes` and `OsStr::{to_bytes,\n  to_cstring}` for ergonomic FFI usage.\n\n[breaking-change]"
  },
  {
    "hash": "606f50c46dd9a3852d36456d2015e1ccf832642e",
    "author": "Huon Wilson",
    "date": 1427764602,
    "message": "Lex binary and octal literals more eagerly.\n\nPreviously 0b12 was considered two tokens, 0b1 and 2, as 2 isn't a valid\nbase 2 digit. This patch changes that to collapse them into one (and\nmakes `0b12` etc. an error: 2 isn't a valid base 2 digit).\n\nThis may break some macro invocations of macros with `tt` (or syntax\nextensions) that rely on adjacent digits being separate tokens and hence\nis a\n\n[breaking-change]\n\nThe fix is to separate the tokens, e.g. `0b12` -> `0b1 2`.\n\ncc https://github.com/rust-lang/rfcs/pull/879"
  },
  {
    "hash": "d03120afd36f9e3f4c1305e9e5ca0d24a3b4a32f",
    "author": "Alex Crichton",
    "date": 1427842151,
    "message": "rollup merge of #23876: alexcrichton/stabilize-any\n\nThis commit stabilizes the following APIs:\n\n* `TypeId::of` - now that it has an `Any` bound it's ready to be stable.\n* `Box<Any>::downcast` - now that an inherent impl on `Box<Any>` as well as\n  `Box<Any+Send>` is allowed the `BoxAny` trait is removed in favor of these\n  inherent methods.\n\nThis is a breaking change due to the removal of the `BoxAny` trait, but\nconsumers can simply remove imports to fix crates.\n\n[breaking-change]"
  },
  {
    "hash": "f19e763e0824a73118ed715f526cb7bdd584d4c4",
    "author": "Alex Crichton",
    "date": 1427759051,
    "message": "std: Stabilize the rest of Any/BoxAny\n\nThis commit stabilizes the following APIs:\n\n* `TypeId::of` - now that it has an `Any` bound it's ready to be stable.\n* `Box<Any>::downcast` - now that an inherent impl on `Box<Any>` as well as\n  `Box<Any+Send>` is allowed the `BoxAny` trait is removed in favor of these\n  inherent methods.\n\nThis is a breaking change due to the removal of the `BoxAny` trait, but\nconsumers can simply remove imports to fix crates.\n\n[breaking-change]"
  },
  {
    "hash": "890f0ab10a81720606805db36628f61f29d0e816",
    "author": "Alex Crichton",
    "date": 1427842150,
    "message": "rollup merge of #23766: alexcrichton/stabilize-raw-fd\n\nThis commit stabilizes the platform-specific `io` modules, specifically around\nthe traits having to do with the raw representation of each object on each\nplatform.\n\nSpecifically, the following material was stabilized:\n\n* `AsRaw{Fd,Socket,Handle}`\n* `RawFd` (renamed from `Fd`)\n* `RawHandle` (renamed from `Handle`)\n* `RawSocket` (renamed from `Socket`)\n* `AsRaw{Fd,Socket,Handle}` implementations\n* `std::os::{unix, windows}::io`\n\nThe following material was added as `#[unstable]`:\n\n* `FromRaw{Fd,Socket,Handle}`\n* Implementations for various primitives\n\nThere are a number of future improvements that are possible to make to this\nmodule, but this should cover a good bit of functionality desired from these\nmodules for now. Some specific future additions may include:\n\n* `IntoRawXXX` traits to consume the raw representation and cancel the\n  auto-destructor.\n* `Fd`, `Socket`, and `Handle` abstractions that behave like Rust objects and\n  have nice methods for various syscalls.\n\nAt this time though, these are considered backwards-compatible extensions and\nwill not be stabilized at this time.\n\nThis commit is a breaking change due to the addition of `Raw` in from of the\ntype aliases in each of the platform-specific modules.\n\n[breaking-change]"
  },
  {
    "hash": "6370f2978e485fd46bcb64f51a1c003395acfedc",
    "author": "Alex Crichton",
    "date": 1427413236,
    "message": "std: Stabilize parts of std::os::platform::io\n\nThis commit stabilizes the platform-specific `io` modules, specifically around\nthe traits having to do with the raw representation of each object on each\nplatform.\n\nSpecifically, the following material was stabilized:\n\n* `AsRaw{Fd,Socket,Handle}`\n* `RawFd` (renamed from `Fd`)\n* `RawHandle` (renamed from `Handle`)\n* `RawSocket` (renamed from `Socket`)\n* `AsRaw{Fd,Socket,Handle}` implementations\n* `std::os::{unix, windows}::io`\n\nThe following material was added as `#[unstable]`:\n\n* `FromRaw{Fd,Socket,Handle}`\n* Implementations for various primitives\n\nThere are a number of future improvements that are possible to make to this\nmodule, but this should cover a good bit of functionality desired from these\nmodules for now. Some specific future additions may include:\n\n* `IntoRawXXX` traits to consume the raw representation and cancel the\n  auto-destructor.\n* `Fd`, `Socket`, and `Handle` abstractions that behave like Rust objects and\n  have nice methods for various syscalls.\n\nAt this time though, these are considered backwards-compatible extensions and\nwill not be stabilized at this time.\n\nThis commit is a breaking change due to the addition of `Raw` in from of the\ntype aliases in each of the platform-specific modules.\n\n[breaking-change]"
  },
  {
    "hash": "5d0beb7d85e8e711334c7fb6f2c5da270e5200cb",
    "author": "Alex Crichton",
    "date": 1427822126,
    "message": "rollup merge of #23549: aturon/stab-num\n\nThis commit stabilizes the `std::num` module:\n\n* The `Int` and `Float` traits are deprecated in favor of (1) the\n  newly-added inherent methods and (2) the generic traits available in\n  rust-lang/num.\n\n* The `Zero` and `One` traits are reintroduced in `std::num`, which\n  together with various other traits allow you to recover the most\n  common forms of generic programming.\n\n* The `FromStrRadix` trait, and associated free function, is deprecated\n  in favor of inherent implementations.\n\n* A wide range of methods and constants for both integers and floating\n  point numbers are now `#[stable]`, having been adjusted for integer\n  guidelines.\n\n* `is_positive` and `is_negative` are renamed to `is_sign_positive` and\n  `is_sign_negative`, in order to address #22985\n\n* The `Wrapping` type is moved to `std::num` and stabilized;\n  `WrappingOps` is deprecated in favor of inherent methods on the\n  integer types, and direct implementation of operations on\n  `Wrapping<X>` for each concrete integer type `X`.\n\nCloses #22985\nCloses #21069\n\n[breaking-change]\n\nr? @alexcrichton"
  },
  {
    "hash": "232424d9952700682373ccf2d578109f401ff023",
    "author": "Aaron Turon",
    "date": 1427813425,
    "message": "Stabilize std::num\n\nThis commit stabilizes the `std::num` module:\n\n* The `Int` and `Float` traits are deprecated in favor of (1) the\n  newly-added inherent methods and (2) the generic traits available in\n  rust-lang/num.\n\n* The `Zero` and `One` traits are reintroduced in `std::num`, which\n  together with various other traits allow you to recover the most\n  common forms of generic programming.\n\n* The `FromStrRadix` trait, and associated free function, is deprecated\n  in favor of inherent implementations.\n\n* A wide range of methods and constants for both integers and floating\n  point numbers are now `#[stable]`, having been adjusted for integer\n  guidelines.\n\n* `is_positive` and `is_negative` are renamed to `is_sign_positive` and\n  `is_sign_negative`, in order to address #22985\n\n* The `Wrapping` type is moved to `std::num` and stabilized;\n  `WrappingOps` is deprecated in favor of inherent methods on the\n  integer types, and direct implementation of operations on\n  `Wrapping<X>` for each concrete integer type `X`.\n\nCloses #22985\nCloses #21069\n\n[breaking-change]"
  },
  {
    "hash": "57938041c18ee1c1bef362e60f24f5b2d3a46213",
    "author": "Manish Goregaokar",
    "date": 1427772878,
    "message": "Rollup merge of #23866 - alexcrichton:switch-some-orders, r=aturon\n\nThis functions swaps the order of arguments to a few functions that previously\r\ntook (output, input) parameters, but now take (input, output) parameters (in\r\nthat order).\r\n\r\nThe affected functions are:\r\n\r\n* ptr::copy\r\n* ptr::copy_nonoverlapping\r\n* slice::bytes::copy_memory\r\n* intrinsics::copy\r\n* intrinsics::copy_nonoverlapping\r\n\r\nCloses #22890\r\n[breaking-change]"
  },
  {
    "hash": "acd48a2b3e7fcc0372f7718a2fac1cf80e03db95",
    "author": "Alex Crichton",
    "date": 1427749720,
    "message": "std: Standardize (input, output) param orderings\n\nThis functions swaps the order of arguments to a few functions that previously\ntook (output, input) parameters, but now take (input, output) parameters (in\nthat order).\n\nThe affected functions are:\n\n* ptr::copy\n* ptr::copy_nonoverlapping\n* slice::bytes::copy_memory\n* intrinsics::copy\n* intrinsics::copy_nonoverlapping\n\nCloses #22890\n[breaking-change]"
  },
  {
    "hash": "c92bdcb232da3973a8a548e6b2044b610e286210",
    "author": "Niko Matsakis",
    "date": 1427706140,
    "message": "Fallout where types must be specified.\n\nThis is due to a [breaking-change] to operators. The primary affected\ncode is uses of the `Rng` trait where we used to (incorrectly) infer the\nright-hand-side type from the left-hand-side, in the case that the LHS\ntype was a scalar like `i32`. The fix is to add a type annotation like\n`x + rng.gen::<i32>()`."
  },
  {
    "hash": "14192d6df5cc714e5c9a3ca70b08f2514d977be2",
    "author": "bors",
    "date": 1427715352,
    "message": "Auto merge of #23848 - cmr:no-compiler-docs, r=huonw\n\nThis saves a bunch of a time and will make distributions smaller, as well as\navoiding filling the implementors page with internal garbage. Turn it back on\nwith `--enable-compiler-docs` if you want them.\n\n(Crates behind the facade are not documented at all)\n\n[breaking-change]"
  },
  {
    "hash": "e64b677ca66d742e7c06738bacf3a160cba827a7",
    "author": "Corey Richardson",
    "date": 1427624151,
    "message": "mk: don't build docs for internal or behind-the-facade crates in beta/stable\n\nThis saves a bunch of a time and will make distributions smaller, as well as\navoiding filling the implementors page with internal garbage. Turn it back on\nwith `--enable-compiler-docs` if you want compiler docs during development.\n\nCrates behind the facade are only documented on nightly/dev builds (where they\ncan be used).\n\n[breaking-change]\n\nCloses #23772\nCloses #21297"
  },
  {
    "hash": "227b46bdede794d5c8476b810bb1c30926bd9c04",
    "author": "bors",
    "date": 1427606489,
    "message": "Auto merge of #23810 - sfackler:debug-collections, r=alexcrichton\n\nThe collections debug helpers no longer prefix output with the\r\ncollection name, in line with the current conventions for Debug\r\nimplementations. Implementations that want to preserve the current\r\nbehavior can simply add a `try!(write!(fmt, \"TypeName \"));` at the\r\nbeginning of the `fmt` method.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "4037f2a368edd75c561bc6f3d8c6f0d644bc4180",
    "author": "Steven Fackler",
    "date": 1427564031,
    "message": "Update debug helpers and add list builder\n\nThe collections debug helpers no longer prefix output with the\ncollection name, in line with the current conventions for Debug\nimplementations. Implementations that want to preserve the current\nbehavior can simply add a `try!(write!(fmt, \"TypeName \"));` at the\nbeginning of the `fmt` method.\n\n[breaking-change]"
  },
  {
    "hash": "c89de2c56baeb61e7cc434924dcc8bedd32b26b8",
    "author": "bors",
    "date": 1427580709,
    "message": "Auto merge of #23300 - sfackler:rm-iterator-ext, r=alexcrichton\n\nAll methods are inlined into Iterator with `Self: Sized` bounds to make\r\nsure Iterator is still object safe.\r\n\r\n[breaking-change]\r\n\r\nThis is blocked on ICEs: https://gist.github.com/sfackler/5aff7c57cf8d896e2c6f\r\nSeem to be similar to #23281."
  },
  {
    "hash": "d502f4221fd5472c4a7905cdc3c59533e9612822",
    "author": "Steven Fackler",
    "date": 1427576025,
    "message": "Remove IteratorExt\n\nAll methods are inlined into Iterator with `Self: Sized` bounds to make\nsure Iterator is still object safe.\n\n[breaking-change]"
  },
  {
    "hash": "f8b6e28e758231f611e8e7923aa607cebd150717",
    "author": "bors",
    "date": 1427533790,
    "message": "Auto merge of #23799 - reem:error-no-send, r=aturon\n\nThe Send bound is an unnecessary restriction, and though provided as a convenience, can't be removed by downstream code.\r\n\r\nThe removal of this bound is a [breaking-change] since it removes an implicit Send bound on all `E: Error` and all `Error` trait objects.\r\n\r\nTo migrate, consider if your code actually requires the Send bound and, if so, add it explicitly.\r\n\r\nFixes #23774\r\n\r\nr? @aturon"
  },
  {
    "hash": "3feeea59dbfe397cccc6760b68f7bfb8291540b7",
    "author": "Jonathan Reem",
    "date": 1427499316,
    "message": "Make `std::error::Error` not inherit from Send\n\nThe Send bound is an unnecessary restriction, and though provided as a\nconvenience, can't be removed by downstream code.\n\nThe removal of this bound is a [breaking-change] since it\nremoves an implicit Send bound on all `E: Error` and all\n`Error` trait objects.\n\nTo migrate, consider if your code actually requires the Send\nbound and, if so, add it explicitly.\n\nFixes #23774"
  },
  {
    "hash": "b24a3b82011c3b78573ace4ade3f99d7c4701a11",
    "author": "Alex Crichton",
    "date": 1427476799,
    "message": "rustc: Remove support for hyphens in crate names\n\nThis commit removes parser support for `extern crate \"foo\" as bar` as the\nrenamed crate is now required to be an identifier. Additionally this commit\nenables hard errors on crate names that contain hyphens in them, they must now\nsolely contain alphanumeric characters or underscores.\n\nIf the crate name is inferred from the file name, however, the file name\n`foo-bar.rs` will have the crate name inferred as `foo_bar`. If a binary is\nbeing emitted it will have the name `foo-bar` and a library will have the name\n`libfoo_bar.rlib`.\n\nThis commit is a breaking change for a number of reasons:\n\n* Old syntax is being removed. This was previously only issuing warnings.\n* The output for the compiler when input is received on stdin is now `rust_out`\n  instead of `rust-out`.\n* The crate name for a crate in the file `foo-bar.rs` is now `foo_bar` which can\n  affect infrastructure such as logging.\n\n[breaking-change]"
  },
  {
    "hash": "1639e51f6e4d036478705f4581de3a7417ccec0f",
    "author": "Brian Anderson",
    "date": 1427485849,
    "message": "Feature gate *all* slice patterns. #23121\n\nUntil some backwards-compatibility hazards are fixed in #23121,\nthese need to be unstable.\n\n[breaking-change]"
  },
  {
    "hash": "9754b06cd80cfcc523573535090519bec935fec3",
    "author": "Alex Crichton",
    "date": 1427401533,
    "message": "rustc: Remove support for old_impl_check\n\nThis commit removes compiler support for the `old_impl_check` attribute which\nshould in theory be entirely removed now. The last remaining use of it in the\nstandard library has been updated by moving the type parameter on the\n`old_io::Acceptor` trait into an associated type. As a result, this is a\nbreaking change for all current users of the deprecated `old_io::Acceptor`\ntrait. Code can be migrated by using the `Connection` associated type instead.\n\n[breaking-change]"
  },
  {
    "hash": "45f1324037b098d6e92da7b34cc0aba274fdae97",
    "author": "Alex Crichton",
    "date": 1427476072,
    "message": "rollup merge of #23771: aturon/stab-straggle-1\n\nMarks as `#[stable}`:\n\n* `ok_or`\n* `ok_or_else`\n* `iter_mut`\n* `cloned`\n\nSimilarly to `IteratorExt::cloned`, the `cloned` method is pared down to\nwork only on `Option<&T>`. Thus, this is a:\n\n[breaking-change]\n\nr? @alexcrichton"
  },
  {
    "hash": "c9f600bceeb5086ea292c3872ee3094ce770f9b0",
    "author": "Aaron Turon",
    "date": 1427417233,
    "message": "Stabilize some stragglers in `std::option`\n\nMarks as `#[stable}`:\n\n* `ok_or`\n* `ok_or_else`\n* `iter_mut`\n* `cloned`\n\nSimilarly to `IteratorExt::cloned`, the `cloned` method is pared down to\nwork only on `Option<&T>`. Thus, this is a:\n\n[breaking-change]"
  },
  {
    "hash": "e42521aa58be928dd62b5450c443368d29ab6a65",
    "author": "Alex Crichton",
    "date": 1427476061,
    "message": "rollup merge of #23535: pnkfelix/fsk-filling-drop\n\nReplace zeroing-on-drop with filling-on-drop.\n\nThis is meant to set the stage for removing *all* zeroing and filling (on drop) in the future.\n\nNote that the code is meant to be entirely abstract with respect to the particular values used for the drop flags: the final commit demonstrates how to go from zeroing-on-drop to filling-on-drop by changing the value of three constants (in two files).\n\nSee further discussion on the internals thread:\n  http://internals.rust-lang.org/t/attention-hackers-filling-drop/1715/11\n\n[breaking-change] especially for structs / enums using `#[unsafe_no_drop_flag]`."
  },
  {
    "hash": "3b13b9c2b4e72d08cb1c68024ccc4f50001f4878",
    "author": "Alex Crichton",
    "date": 1427236034,
    "message": "rollup merge of #23638: pnkfelix/fsk-reject-specialized-drops\n\nReject specialized Drop impls.\n\nSee Issue #8142 for discussion.\n\nThis makes it illegal for a Drop impl to be more specialized than the original item.\n\nSo for example, all of the following are now rejected (when they would have been blindly accepted before):\n\n```rust\nstruct S<A> { ... };\nimpl Drop for S<i8> { ... } // error: specialized to concrete type\n\nstruct T<'a> { ... };\nimpl Drop for T<'static> { ... } // error: specialized to concrete region\n\nstruct U<A> { ... };\nimpl<A:Clone> Drop for U<A> { ... } // error: added extra type requirement\n\nstruct V<'a,'b>;\nimpl<'a,'b:a> Drop for V<'a,'b> { ... } // error: added extra region requirement\n```\n\nDue to examples like the above, this is a [breaking-change].\n\n(The fix is to either remove the specialization from the `Drop` impl, or to transcribe the requirements into the struct/enum definition; examples of both are shown in the PR's fixed to `libstd`.)\n\n----\n\nThis is likely to be the last thing blocking the removal of the `#[unsafe_destructor]` attribute.\n\nFix #8142\nFix #23584"
  },
  {
    "hash": "5b2e8693e42dee545d336c0364773b3fbded93a5",
    "author": "Felix S. Klock II",
    "date": 1427232443,
    "message": "Reject specialized Drop impls.\n\nSee Issue 8142 for discussion.\n\nThis makes it illegal for a Drop impl to be more specialized than the\noriginal item.\n\nSo for example, all of the following are now rejected (when they would\nhave been blindly accepted before):\n\n```rust\nstruct S<A> { ... };\nimpl Drop for S<i8> { ... } // error: specialized to concrete type\n\nstruct T<'a> { ... };\nimpl Drop for T<'static> { ... } // error: specialized to concrete region\n\nstruct U<A> { ... };\nimpl<A:Clone> Drop for U<A> { ... } // error: added extra type requirement\n\nstruct V<'a,'b>;\nimpl<'a,'b:a> Drop for V<'a,'b> { ... } // error: added extra region requirement\n```\n\nDue to examples like the above, this is a [breaking-change].\n\n(The fix is to either remove the specialization from the `Drop` impl,\nor to transcribe the requirements into the struct/enum definition;\nexamples of both are shown in the PR's fixed to `libstd`.)\n\n----\n\nThis is likely to be the last thing blocking the removal of the\n`#[unsafe_destructor]` attribute.\n\nIncludes two new error codes for the new dropck check.\n\nUpdate run-pass tests to accommodate new dropck pass.\n\nUpdate tests and docs to reflect new destructor restriction.\n\n----\n\nImplementation notes:\n\nWe identify Drop impl specialization by not being as parametric as the\nstruct/enum definition via unification.\n\nMore specifically:\n\n 1. Attempt unification of a skolemized instance of the struct/enum\n    with an instance of the Drop impl's type expression where all of\n    the impl's generics (i.e. the free variables of the type\n    expression) have been replaced with unification variables.\n\n 2. If unification fails, then reject Drop impl as specialized.\n\n 3. If unification succeeds, check if any of the skolemized\n    variables \"leaked\" into the constraint set for the inference\n    context; if so, then reject Drop impl as specialized.\n\n 4. Otherwise, unification succeeded without leaking skolemized\n    variables: accept the Drop impl.\n\nWe identify whether a Drop impl is injecting new predicates by simply\nlooking whether the predicate, after an appropriate substitution,\nappears on the struct/enum definition."
  },
  {
    "hash": "9330bae4bde720dbdf8d379bd5529a1bb7a6f1e9",
    "author": "Niko Matsakis",
    "date": 1427155050,
    "message": "Fallout from changing fn traits to use inheritance rather than bridge\nimpls. This is a [breaking-change] (for gated code) in that when you\nimplement `Fn` (`FnMut`) you must also implement `FnOnce`. This commit\ndemonstrates how to fix it."
  },
  {
    "hash": "f78815979706bca435bff80155b28acc80a19781",
    "author": "Steve Klabnik",
    "date": 1427144743,
    "message": "Rollup merge of #23119 - nikomatsakis:issue-23116-ref-mut, r=pnkfelix\n\nDon't allow upcasting to a supertype in the type of the match discriminant. Fixes #23116.\r\n\r\nThis is a [breaking-change] in that it closes a type hole that previously existed.\r\n\r\nr? @pnkfelix"
  },
  {
    "hash": "753efb5042563dd34a4a524197fa14a129ddf449",
    "author": "Alex Crichton",
    "date": 1427148650,
    "message": "rollup merge of #23601: nikomatsakis/by-value-index\n\nThis is a [breaking-change]. When indexing a generic map (hashmap, etc) using the `[]` operator, it is now necessary to borrow explicitly, so change `map[key]` to `map[&key]` (consistent with the `get` routine). However, indexing of string-valued maps with constant strings can now be written `map[\"abc\"]`.\n\nr? @japaric\ncc @aturon @Gankro"
  },
  {
    "hash": "2153c581ef66de1537286b58b1b323d24c25d07f",
    "author": "Alex Crichton",
    "date": 1427148549,
    "message": "rollup merge of #23557: aturon/rfc-909\n\nThis commit implements [RFC 909](https://github.com/rust-lang/rfcs/pull/909):\n\nThe `std::thread_local` module is now deprecated, and its contents are\navailable directly in `std::thread` as `LocalKey`, `LocalKeyState`, and\n`ScopedKey`.\n\nThe macros remain exactly as they were, which means little if any code\nshould break. Nevertheless, this is technically a:\n\n[breaking-change]\n\nCloses #23547"
  },
  {
    "hash": "6bd3ab0d8140053475a901ad4e2e80e98955bcb0",
    "author": "Aaron Turon",
    "date": 1427135334,
    "message": "Implement RFC 909: move thread_local into thread\n\nThis commit implements [RFC\n909](https://github.com/rust-lang/rfcs/pull/909):\n\nThe `std::thread_local` module is now deprecated, and its contents are\navailable directly in `std::thread` as `LocalKey`, `LocalKeyState`, and\n`ScopedKey`.\n\nThe macros remain exactly as they were, which means little if any code\nshould break. Nevertheless, this is technically a:\n\n[breaking-change]\n\nCloses #23547"
  },
  {
    "hash": "b97e1cc28e0d3fe6a745a02a7c1750564a090f34",
    "author": "Alex Crichton",
    "date": 1427148548,
    "message": "rollup merge of #23541: aturon/stab-error\n\nThis small commit stabilizes the `Error` trait as-is, except that `Send`\nand `Debug` are added as constraints. The `Send` constraint is because\nmost uses of `Error` will be for trait objects, and by default we would\nlike these objects to be transferrable between threads. The `Debug`\nconstraint is to ensure that e.g. `Box<Error>` is `Debug`, and because\ntypes that implement `Display` should certainly implement `Debug` in any case.\n\nIn the near future we expect to add `Any`-like downcasting features to\n`Error`, but this is waiting on some additional\nmechanisms (`Reflect`). It will be added before 1.0 via default methods.\n\n[breaking-change]\n\nr? @alexcrichton\n\nCloses #21790"
  }
]
