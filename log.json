[
  {
    "hash": "542e2bb3910f8860d49b4b40bcd78d9c74e733ff",
    "author": "bors",
    "date": 1426444974,
    "message": "Auto merge of #23353 - alexcrichton:stabilize-os, r=aturon\n\nThis commit starts to organize the `std::os::$platform` modules and in the\r\nprocess stabilizes some of the functionality contained within. The organization\r\nof these modules will reflect the organization of the standard library itself\r\nwith extension traits for primitives in the same corresponding module.\r\n\r\nThe OS-specific modules will grow more functionality over time including\r\nconcrete types that are not extending functionality of other structures, and\r\nthese will either go into the closest module in `std::os::$platform` or they\r\nwill grow a new module in the hierarchy.\r\n\r\nThe following items are now stable:\r\n\r\n* `os::{unix, windows}`\r\n* `unix::ffi`\r\n* `unix::ffi::OsStrExt`\r\n* `unix::ffi::OsStrExt::{from_bytes, as_bytes, to_cstring}`\r\n* `unix::ffi::OsString`\r\n* `unix::ffi::OsStringExt::{from_vec, into_vec}`\r\n* `unix::process`\r\n* `unix::process::CommandExt`\r\n* `unix::process::CommandExt::{uid, gid}`\r\n* `unix::process::ExitStatusExt`\r\n* `unix::process::ExitStatusExt::signal`\r\n* `unix::prelude`\r\n* `windows::ffi`\r\n* `windows::ffi::OsStringExt`\r\n* `windows::ffi::OsStringExt::from_wide`\r\n* `windows::ffi::OsStrExt`\r\n* `windows::ffi::OsStrExt::encode_wide`\r\n* `windows::prelude`\r\n\r\nThe following items remain unstable:\r\n\r\n* `unix::io`\r\n* `unix::io::{Fd, AsRawFd}`\r\n* `unix::fs::{PermissionsExt, OpenOptionsExt}`\r\n* `windows::io`\r\n* `windows::io::{Handle, AsRawHandle}`\r\n* `windows::io::{Socket, AsRawSocket}`\r\n* `windows::fs`\r\n* `windows::fs::OpenOptionsExt`\r\n\r\nDue to the reorgnization of the platform extension modules, this commit is a\r\nbreaking change. Most imports can be fixed by adding the relevant libstd module\r\nin the `use` path (such as `ffi` or `fs`).\r\n\r\n[breaking-change]"
  },
  {
    "hash": "1f5f76adc36082ec514a6cfa4ad2d7e6655a5253",
    "author": "Alex Crichton",
    "date": 1426440514,
    "message": "std: Stabilize portions of `std::os::$platform`\n\nThis commit starts to organize the `std::os::$platform` modules and in the\nprocess stabilizes some of the functionality contained within. The organization\nof these modules will reflect the organization of the standard library itself\nwith extension traits for primitives in the same corresponding module.\n\nThe OS-specific modules will grow more functionality over time including\nconcrete types that are not extending functionality of other structures, and\nthese will either go into the closest module in `std::os::$platform` or they\nwill grow a new module in the hierarchy.\n\nThe following items are now stable:\n\n* `os::{unix, windows}`\n* `unix::ffi`\n* `unix::ffi::OsStrExt`\n* `unix::ffi::OsStrExt::{from_bytes, as_bytes, to_cstring}`\n* `unix::ffi::OsString`\n* `unix::ffi::OsStringExt::{from_vec, into_vec}`\n* `unix::process`\n* `unix::process::CommandExt`\n* `unix::process::CommandExt::{uid, gid}`\n* `unix::process::ExitStatusExt`\n* `unix::process::ExitStatusExt::signal`\n* `unix::prelude`\n* `windows::ffi`\n* `windows::ffi::OsStringExt`\n* `windows::ffi::OsStringExt::from_wide`\n* `windows::ffi::OsStrExt`\n* `windows::ffi::OsStrExt::encode_wide`\n* `windows::prelude`\n\nThe following items remain unstable:\n\n* `unix::io`\n* `unix::io::{Fd, AsRawFd}`\n* `unix::fs::{PermissionsExt, OpenOptionsExt}`\n* `windows::io`\n* `windows::io::{Handle, AsRawHandle}`\n* `windows::io::{Socket, AsRawSocket}`\n* `windows::fs`\n* `windows::fs::OpenOptionsExt`\n\nDue to the reorgnization of the platform extension modules, this commit is a\nbreaking change. Most imports can be fixed by adding the relevant libstd module\nin the `use` path (such as `ffi` or `fs`).\n\n[breaking-change]"
  },
  {
    "hash": "54660fc392343e4ddee8a0ea1ca196ffc533585b",
    "author": "bors",
    "date": 1426411122,
    "message": "Auto merge of #23316 - alexcrichton:less-question-sized, r=aturon\n\nIt is a frequent pattern among I/O functions to take `P: AsPath + ?Sized` or\r\n`AsOsStr` instead of `AsPath`. Most of these functions do not need to take\r\nownership of their argument, but for libraries in general it's much more\r\nergonomic to not deal with `?Sized` at all and simply require an argument `P`\r\ninstead of `&P`.\r\n\r\nThis change is aimed at removing unsightly `?Sized` bounds while retaining the\r\nsame level of usability as before. All affected functions now take ownership of\r\ntheir arguments instead of taking them by reference, but due to the forwarding\r\nimplementations of `AsOsStr` and `AsPath` all code should continue to work as it\r\ndid before.\r\n\r\nThis is strictly speaking a breaking change due to the signatures of these\r\nfunctions changing, but normal idiomatic usage of these APIs should not break in\r\npractice.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "60a4a2db8837be91bdae051bd51ab181077e5dc6",
    "author": "Alex Crichton",
    "date": 1426400634,
    "message": "std: Remove ?Sized bounds from many I/O functions\n\nIt is a frequent pattern among I/O functions to take `P: AsPath + ?Sized` or\n`AsOsStr` instead of `AsPath`. Most of these functions do not need to take\nownership of their argument, but for libraries in general it's much more\nergonomic to not deal with `?Sized` at all and simply require an argument `P`\ninstead of `&P`.\n\nThis change is aimed at removing unsightly `?Sized` bounds while retaining the\nsame level of usability as before. All affected functions now take ownership of\ntheir arguments instead of taking them by reference, but due to the forwarding\nimplementations of `AsOsStr` and `AsPath` all code should continue to work as it\ndid before.\n\nThis is strictly speaking a breaking change due to the signatures of these\nfunctions changing, but normal idiomatic usage of these APIs should not break in\npractice.\n\n[breaking-change]"
  },
  {
    "hash": "3e4be02b80a3dd27bce20870958fe0aef7e7336d",
    "author": "bors",
    "date": 1426278136,
    "message": "Auto merge of #23292 - alexcrichton:stabilize-io, r=aturon\n\nThe new `std::io` module has had some time to bake now, and this commit\r\nstabilizes its functionality. There are still portions of the module which\r\nremain unstable, and below contains a summart of the actions taken.\r\n\r\nThis commit also deprecates the entire contents of the `old_io` module in a\r\nblanket fashion. All APIs should now have a reasonable replacement in the\r\nnew I/O modules.\r\n\r\nStable APIs:\r\n\r\n* `std::io` (the name)\r\n* `std::io::prelude` (the name)\r\n* `Read`\r\n* `Read::read`\r\n* `Read::{read_to_end, read_to_string}` after being modified to return a `usize`\r\n  for the number of bytes read.\r\n* `ReadExt`\r\n* `Write`\r\n* `Write::write`\r\n* `Write::{write_all, write_fmt}`\r\n* `WriteExt`\r\n* `BufRead`\r\n* `BufRead::{fill_buf, consume}`\r\n* `BufRead::{read_line, read_until}` after being modified to return a `usize`\r\n  for the number of bytes read.\r\n* `BufReadExt`\r\n* `BufReader`\r\n* `BufReader::{new, with_capacity}`\r\n* `BufReader::{get_ref, get_mut, into_inner}`\r\n* `{Read,BufRead} for BufReader`\r\n* `BufWriter`\r\n* `BufWriter::{new, with_capacity}`\r\n* `BufWriter::{get_ref, get_mut, into_inner}`\r\n* `Write for BufWriter`\r\n* `IntoInnerError`\r\n* `IntoInnerError::{error, into_inner}`\r\n* `{Error,Display} for IntoInnerError`\r\n* `LineWriter`\r\n* `LineWriter::{new, with_capacity}` - `with_capacity` was added\r\n* `LineWriter::{get_ref, get_mut, into_inner}` - `get_mut` was added)\r\n* `Write for LineWriter`\r\n* `BufStream`\r\n* `BufStream::{new, with_capacities}`\r\n* `BufStream::{get_ref, get_mut, into_inner}`\r\n* `{BufRead,Read,Write} for BufStream`\r\n* `stdin`\r\n* `Stdin`\r\n* `Stdin::lock`\r\n* `Stdin::read_line` - added method\r\n* `StdinLock`\r\n* `Read for Stdin`\r\n* `{Read,BufRead} for StdinLock`\r\n* `stdout`\r\n* `Stdout`\r\n* `Stdout::lock`\r\n* `StdoutLock`\r\n* `Write for Stdout`\r\n* `Write for StdoutLock`\r\n* `stderr`\r\n* `Stderr`\r\n* `Stderr::lock`\r\n* `StderrLock`\r\n* `Write for Stderr`\r\n* `Write for StderrLock`\r\n* `io::Result`\r\n* `io::Error`\r\n* `io::Error::last_os_error`\r\n* `{Display, Error} for Error`\r\n\r\nUnstable APIs:\r\n\r\n(reasons can be found in the commit itself)\r\n\r\n* `Write::flush`\r\n* `Seek`\r\n* `ErrorKind`\r\n* `Error::new`\r\n* `Error::from_os_error`\r\n* `Error::kind`\r\n\r\nDeprecated APIs\r\n\r\n* `Error::description` - available via the `Error` trait\r\n* `Error::detail` - available via the `Display` implementation\r\n* `thread::Builder::{stdout, stderr}`\r\n\r\nChanges in functionality:\r\n\r\n* `old_io::stdio::set_stderr` is now a noop as the infrastructure for printing\r\n  backtraces has migrated to `std::io`.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "d54bd9f29af67748b7ddf80a5cf285145949ddc2",
    "author": "Alex Crichton",
    "date": 1426217943,
    "message": "std: Stabilize the `io` module\n\nThe new `std::io` module has had some time to bake now, and this commit\nstabilizes its functionality. There are still portions of the module which\nremain unstable, and below contains a summart of the actions taken.\n\nThis commit also deprecates the entire contents of the `old_io` module in a\nblanket fashion. All APIs should now have a reasonable replacement in the\nnew I/O modules.\n\nStable APIs:\n\n* `std::io` (the name)\n* `std::io::prelude` (the name)\n* `Read`\n* `Read::read`\n* `Read::{read_to_end, read_to_string}` after being modified to return a `usize`\n  for the number of bytes read.\n* `Write`\n* `Write::write`\n* `Write::{write_all, write_fmt}`\n* `BufRead`\n* `BufRead::{fill_buf, consume}`\n* `BufRead::{read_line, read_until}` after being modified to return a `usize`\n  for the number of bytes read.\n* `BufReader`\n* `BufReader::{new, with_capacity}`\n* `BufReader::{get_ref, get_mut, into_inner}`\n* `{Read,BufRead} for BufReader`\n* `BufWriter`\n* `BufWriter::{new, with_capacity}`\n* `BufWriter::{get_ref, get_mut, into_inner}`\n* `Write for BufWriter`\n* `IntoInnerError`\n* `IntoInnerError::{error, into_inner}`\n* `{Error,Display} for IntoInnerError`\n* `LineWriter`\n* `LineWriter::{new, with_capacity}` - `with_capacity` was added\n* `LineWriter::{get_ref, get_mut, into_inner}` - `get_mut` was added)\n* `Write for LineWriter`\n* `BufStream`\n* `BufStream::{new, with_capacities}`\n* `BufStream::{get_ref, get_mut, into_inner}`\n* `{BufRead,Read,Write} for BufStream`\n* `stdin`\n* `Stdin`\n* `Stdin::lock`\n* `Stdin::read_line` - added method\n* `StdinLock`\n* `Read for Stdin`\n* `{Read,BufRead} for StdinLock`\n* `stdout`\n* `Stdout`\n* `Stdout::lock`\n* `StdoutLock`\n* `Write for Stdout`\n* `Write for StdoutLock`\n* `stderr`\n* `Stderr`\n* `Stderr::lock`\n* `StderrLock`\n* `Write for Stderr`\n* `Write for StderrLock`\n* `io::Result`\n* `io::Error`\n* `io::Error::last_os_error`\n* `{Display, Error} for Error`\n\nUnstable APIs:\n\n(reasons can be found in the commit itself)\n\n* `Write::flush`\n* `Seek`\n* `ErrorKind`\n* `Error::new`\n* `Error::from_os_error`\n* `Error::kind`\n\nDeprecated APIs\n\n* `Error::description` - available via the `Error` trait\n* `Error::detail` - available via the `Display` implementation\n* `thread::Builder::{stdout, stderr}`\n\nChanges in functionality:\n\n* `old_io::stdio::set_stderr` is now a noop as the infrastructure for printing\n  backtraces has migrated to `std::io`.\n* The `ReadExt`, `WriteExt`, and `BufReadExt` extension traits were all removed\n  by folding functionality into the corresponding trait.\n\n[breaking-change]"
  },
  {
    "hash": "79dd393a4f144fa5e6f81c720c782de3175810d7",
    "author": "bors",
    "date": 1426208402,
    "message": "Auto merge of #23229 - aturon:stab-path, r=alexcrichton\n\nThis commit stabilizes essentially all of the new `std::path` API. The\r\nAPI itself is changed in a couple of ways (which brings it in closer\r\nalignment with the RFC):\r\n\r\n* `.` components are now normalized away, unless they appear at the\r\n  start of a path. This in turn effects the semantics of e.g. asking for\r\n  the file name of `foo/` or `foo/.`, both of which yield `Some(\"foo\")`\r\n  now. This semantics is what the original RFC specified, and is also\r\n  desirable given early experience rolling out the new API.\r\n\r\n* The `parent` method is now `without_file` and succeeds if, and only\r\n  if, `file_name` is `Some(_)`. That means, in particular, that it fails\r\n  for a path like `foo/../`. This change affects `pop` as well.\r\n\r\nIn addition, the `old_path` module is now deprecated.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton"
  },
  {
    "hash": "42c4e481cd98bd392839144c9ac83e55e445a12a",
    "author": "Aaron Turon",
    "date": 1426203538,
    "message": "Stabilize std::path\n\nThis commit stabilizes essentially all of the new `std::path` API. The\nAPI itself is changed in a couple of ways (which brings it in closer\nalignment with the RFC):\n\n* `.` components are now normalized away, unless they appear at the\n  start of a path. This in turn effects the semantics of e.g. asking for\n  the file name of `foo/` or `foo/.`, both of which yield `Some(\"foo\")`\n  now. This semantics is what the original RFC specified, and is also\n  desirable given early experience rolling out the new API.\n\n* The `parent` function now succeeds if, and only if, the path has at\n  least one non-root/prefix component. This change affects `pop` as\n  well.\n\n* The `Prefix` component now involves a separate `PrefixComponent`\n  struct, to better allow for keeping both parsed and unparsed prefix data.\n\nIn addition, the `old_path` module is now deprecated.\n\nCloses #23264\n\n[breaking-change]"
  },
  {
    "hash": "c9b03c24ec346e6405883032094f47805ef9c43e",
    "author": "bors",
    "date": 1426191203,
    "message": "Auto merge of #23265 - eddyb:meth-ast-refactor, r=nikomatsakis\n\nThe end result is that common fields (id, name, attributes, etc.) are stored in now-structures `ImplItem` and `TraitItem`.\r\nThe signature of a method is no longer duplicated between methods with a body (default/impl) and those without, they now share `MethodSig`.\r\n\r\nThis is also a [breaking-change] because of minor bugfixes and changes to syntax extensions:\r\n* `pub fn` methods in a trait no longer parse - remove the `pub`, it has no meaning anymore\r\n* `MacResult::make_methods` is now `make_impl_items` and the return type has changed accordingly\r\n* `quote_method` is gone, because `P<ast::Method>` doesn't exist and it couldn't represent a full method anyways - could be replaced by `quote_impl_item`/`quote_trait_item` in the future, but I do hope we realize how silly that combinatorial macro expansion is and settle on a single `quote` macro + some type hints - or just no types at all (only token-trees)\r\n\r\nr? @nikomatsakis This is necessary (hopefully also sufficient) for associated constants."
  },
  {
    "hash": "cfea8ec41699e25c8fb524d625190f0cb860dc71",
    "author": "bors",
    "date": 1426027510,
    "message": "Auto merge of #23126 - alexcrichton:char-third-pass, r=aturon\n\nThis commit performs another pass over the `std::char` module for stabilization.\r\nSome minor cleanup is performed such as migrating documentation from libcore to\r\nlibunicode (where the `std`-facing trait resides) as well as a slight\r\nreorganiation in libunicode itself. Otherwise, the stability modifications made\r\nare:\r\n\r\n* `char::from_digit` is now stable\r\n* `CharExt::is_digit` is now stable\r\n* `CharExt::to_digit` is now stable\r\n* `CharExt::to_{lower,upper}case` are now stable after being modified to return\r\n  an iterator over characters. While the implementation today has not changed\r\n  this should allow us to implement the full set of case conversions in unicode\r\n  where some characters can map to multiple when doing an upper or lower case\r\n  mapping.\r\n* `StrExt::to_{lower,upper}case` was added as unstable for a convenience of not\r\n  having to worry about characters expanding to more characters when you just\r\n  want the whole string to get into upper or lower case.\r\n\r\nThis is a breaking change due to the change in the signatures of the\r\n`CharExt::to_{upper,lower}case` methods. Code can be updated to use functions\r\nlike `flat_map` or `collect` to handle the difference.\r\n\r\n[breaking-change]\r\n\r\nCloses #20333"
  },
  {
    "hash": "0f6a0b58f9dbc3a741abd898f2d06a8ba78a938d",
    "author": "Alex Crichton",
    "date": 1426025311,
    "message": "std: Stabilize more of the `char` module\n\nThis commit performs another pass over the `std::char` module for stabilization.\nSome minor cleanup is performed such as migrating documentation from libcore to\nlibunicode (where the `std`-facing trait resides) as well as a slight\nreorganiation in libunicode itself. Otherwise, the stability modifications made\nare:\n\n* `char::from_digit` is now stable\n* `CharExt::is_digit` is now stable\n* `CharExt::to_digit` is now stable\n* `CharExt::to_{lower,upper}case` are now stable after being modified to return\n  an iterator over characters. While the implementation today has not changed\n  this should allow us to implement the full set of case conversions in unicode\n  where some characters can map to multiple when doing an upper or lower case\n  mapping.\n* `StrExt::to_{lower,upper}case` was added as unstable for a convenience of not\n  having to worry about characters expanding to more characters when you just\n  want the whole string to get into upper or lower case.\n\nThis is a breaking change due to the change in the signatures of the\n`CharExt::to_{upper,lower}case` methods. Code can be updated to use functions\nlike `flat_map` or `collect` to handle the difference.\n\n[breaking-change]"
  },
  {
    "hash": "668c6474081a10768ef143b9984efcab5376bf68",
    "author": "bors",
    "date": 1425753557,
    "message": "Auto merge of #23137 - kmcallister:derive-sugar, r=sfackler\n\nThis is a hack, but I don't think we can do much better as long as `derive` is running at the syntax expansion phase.\r\n\r\nIf the `custom_derive` feature gate is enabled, this works with user-defined traits and syntax extensions. Without the gate, you can't use e.g. `#[derive_Clone]` directly, so this does not change the stable language.\r\n\r\nTo make this effective, we now check gated attributes both before and after macro expansion. This uncovered a number of tests that were missing feature gates.\r\n\r\nThis PR also cleans up the deriving code somewhat, and forbids some previously-meaningless attribute syntax. For this reason it's technically a\r\n\r\n    [breaking-change]\r\n\r\nr? @sfackler"
  },
  {
    "hash": "491054f08e2aaaa8438f1a9943f115dad9da1c6b",
    "author": "Keegan McAllister",
    "date": 1425694816,
    "message": "Make #[derive(Anything)] into sugar for #[derive_Anything]\n\nThis is a hack, but I don't think we can do much better as long as `derive` is\nrunning at the syntax expansion phase.\n\nIf the custom_derive feature gate is enabled, this works with user-defined\ntraits and syntax extensions. Without the gate, you can't use e.g. #[derive_Clone]\ndirectly, so this does not change the stable language.\n\nThis commit also cleans up the deriving code somewhat, and forbids some\npreviously-meaningless attribute syntax. For this reason it's technically a\n\n    [breaking-change]"
  },
  {
    "hash": "fd86a01bb9f23921c82017485d88fe14448e78fe",
    "author": "Alex Crichton",
    "date": 1425684968,
    "message": "rollup merge of #22813: alexcrichton/deprecate-net\n\nThe `std::net` primitives should be ready for use now and as a result the old\nones are now deprecated and slated for removal. Most TCP/UDP functionality is\nnow available through `std::net` but the `std::old_io::net::pipe` module is\nremoved entirely from the standard library.\n\nUnix socket funtionality can be found in sfackler's [`unix_socket`][unix] crate\nand there is currently no replacement for named pipes on Windows.\n\n[unix]: https://crates.io/crates/unix_socket\n\n[breaking-change]"
  },
  {
    "hash": "9aea749b835a6fdcad6f2840a00adac996cc0339",
    "author": "Alex Crichton",
    "date": 1425666448,
    "message": "std: Deprecate the std::old_io::net primitives\n\nThe `std::net` primitives should be ready for use now and as a result the old\nones are now deprecated and slated for removal. Most TCP/UDP functionality is\nnow available through `std::net` but the `std::old_io::net::pipe` module is\nremoved entirely from the standard library.\n\nUnix socket funtionality can be found in sfackler's [`unix_socket`][unix] crate\nand there is currently no replacement for named pipes on Windows.\n\n[unix]: https://crates.io/crates/unix_socket\n\n[breaking-change]"
  },
  {
    "hash": "fe41c935603be8192c7481fcd846e629d76337b1",
    "author": "Manish Goregaokar",
    "date": 1425612710,
    "message": "Rollup merge of #23081 - alexcrichton:stabilize-fs, r=aturon\n\n This commit performs a stabilization pass over the `std::fs` module now that\nit's had some time to bake. The change was largely just adding `#[stable]` tags,\nbut there are a few APIs that remain `#[unstable]`.\n\nThe following apis are now marked `#[stable]`:\n\n* `std::fs` (the name)\n* `File`\n* `Metadata`\n* `ReadDir`\n* `DirEntry`\n* `OpenOptions`\n* `Permissions`\n* `File::{open, create}`\n* `File::{sync_all, sync_data}`\n* `File::set_len`\n* `File::metadata`\n* Trait implementations for `File` and `&File`\n* `OpenOptions::new`\n* `OpenOptions::{read, write, append, truncate, create}`\n* `OpenOptions::open` - this function was modified, however, to not attempt to\n  reject cross-platform openings of directories. This means that some platforms\n  will succeed in opening a directory and others will fail.\n* `Metadata::{is_dir, is_file, len, permissions}`\n* `Permissions::{readonly, set_readonly}`\n* `Iterator for ReadDir`\n* `DirEntry::path`\n* `remove_file` - like with `OpenOptions::open`, the extra windows code to\n  remove a readonly file has been removed. This means that removing a readonly\n  file will succeed on some platforms but fail on others.\n* `metadata`\n* `rename`\n* `copy`\n* `hard_link`\n* `soft_link`\n* `read_link`\n* `create_dir`\n* `create_dir_all`\n* `remove_dir`\n* `remove_dir_all`\n* `read_dir`\n\nThe following apis remain `#[unstable]`.\n\n* `WalkDir` and `walk` - there are many methods by which a directory walk can be\n  constructed, and it's unclear whether the current semantics are the right\n  ones. For example symlinks are not handled super well currently. This is now\n  behind a new `fs_walk` feature.\n* `File::path` - this is an extra abstraction which the standard library\n  provides on top of what the system offers and it's unclear whether we should\n  be doing so. This is now behind a new `file_path` feature.\n* `Metadata::{accessed, modified}` - we do not currently have a good\n  abstraction for a moment in time which is what these APIs should likely be\n  returning, so these remain `#[unstable]` for now. These are now behind a new\n  `fs_time` feature\n* `set_file_times` - like with `Metadata::accessed`, we do not currently have\n  the appropriate abstraction for the arguments here so this API remains\n  unstable behind the `fs_time` feature gate.\n* `PathExt` - the precise set of methods on this trait may change over time and\n  some methods may be removed. This API remains unstable behind the `path_ext`\n  feature gate.\n* `set_permissions` - we may wish to expose a more granular ability to set the\n  permissions on a file instead of just a blanket \\\"set all permissions\\\" method.\n  This function remains behind the `fs` feature.\n\nThe following apis are now `#[deprecated]`\n\n* The `TempDir` type is now entirely deprecated and is [located on\n  crates.io][tempdir] as the `tempdir` crate with [its source][github] at\n  rust-lang/tempdir.\n\n[tempdir]: https://crates.io/crates/tempdir\n[github]: https://github.com/rust-lang/tempdir\n\nThe stability of some of these APIs has been questioned over the past few weeks\nin using these APIs, and it is intentional that the majority of APIs here are\nmarked `#[stable]`. The `std::fs` module has a lot of room to grow and the\nmaterial is [being tracked in a RFC issue][rfc-issue].\n\n[rfc-issue]: rust-lang/rfcs#939\n\nCloses #22879\n\n[breaking-change]"
  },
  {
    "hash": "73b0b25e326687aba319df99aee4b0c4124d4498",
    "author": "Alex Crichton",
    "date": 1425602981,
    "message": "std: Stabilize the `fs` module\n\nThis commit performs a stabilization pass over the `std::fs` module now that\nit's had some time to bake. The change was largely just adding `#[stable]` tags,\nbut there are a few APIs that remain `#[unstable]`.\n\nThe following apis are now marked `#[stable]`:\n\n* `std::fs` (the name)\n* `File`\n* `Metadata`\n* `ReadDir`\n* `DirEntry`\n* `OpenOptions`\n* `Permissions`\n* `File::{open, create}`\n* `File::{sync_all, sync_data}`\n* `File::set_len`\n* `File::metadata`\n* Trait implementations for `File` and `&File`\n* `OpenOptions::new`\n* `OpenOptions::{read, write, append, truncate, create}`\n* `OpenOptions::open` - this function was modified, however, to not attempt to\n  reject cross-platform openings of directories. This means that some platforms\n  will succeed in opening a directory and others will fail.\n* `Metadata::{is_dir, is_file, len, permissions}`\n* `Permissions::{readonly, set_readonly}`\n* `Iterator for ReadDir`\n* `DirEntry::path`\n* `remove_file` - like with `OpenOptions::open`, the extra windows code to\n  remove a readonly file has been removed. This means that removing a readonly\n  file will succeed on some platforms but fail on others.\n* `metadata`\n* `rename`\n* `copy`\n* `hard_link`\n* `soft_link`\n* `read_link`\n* `create_dir`\n* `create_dir_all`\n* `remove_dir`\n* `remove_dir_all`\n* `read_dir`\n\nThe following apis remain `#[unstable]`.\n\n* `WalkDir` and `walk` - there are many methods by which a directory walk can be\n  constructed, and it's unclear whether the current semantics are the right\n  ones. For example symlinks are not handled super well currently. This is now\n  behind a new `fs_walk` feature.\n* `File::path` - this is an extra abstraction which the standard library\n  provides on top of what the system offers and it's unclear whether we should\n  be doing so. This is now behind a new `file_path` feature.\n* `Metadata::{accessed, modified}` - we do not currently have a good\n  abstraction for a moment in time which is what these APIs should likely be\n  returning, so these remain `#[unstable]` for now. These are now behind a new\n  `fs_time` feature\n* `set_file_times` - like with `Metadata::accessed`, we do not currently have\n  the appropriate abstraction for the arguments here so this API remains\n  unstable behind the `fs_time` feature gate.\n* `PathExt` - the precise set of methods on this trait may change over time and\n  some methods may be removed. This API remains unstable behind the `path_ext`\n  feature gate.\n* `set_permissions` - we may wish to expose a more granular ability to set the\n  permissions on a file instead of just a blanket \"set all permissions\" method.\n  This function remains behind the `fs` feature.\n\nThe following apis are now `#[deprecated]`\n\n* The `TempDir` type is now entirely deprecated and is [located on\n  crates.io][tempdir] as the `tempdir` crate with [its source][github] at\n  rust-lang/tempdir.\n\n[tempdir]: https://crates.io/crates/tempdir\n[github]: https://github.com/rust-lang/tempdir\n\nThe stability of some of these APIs has been questioned over the past few weeks\nin using these APIs, and it is intentional that the majority of APIs here are\nmarked `#[stable]`. The `std::fs` module has a lot of room to grow and the\nmaterial is [being tracked in a RFC issue][rfc-issue].\n\n[rfc-issue]: https://github.com/rust-lang/rfcs/issues/939\n\n[breaking-change]"
  },
  {
    "hash": "c9063e0f98da9eb0cb30427010614ea634b409ed",
    "author": "Manish Goregaokar",
    "date": 1425612697,
    "message": "Rollup merge of #23079 - alexcrichton:deprecate-process, r=aturon\n\n This module is now superseded by the `std::process` module. This module still\nhas some room to expand to get quite back up to parity with the `old_io`\nversion, and there is a [tracking issue][issue] for feature requests as well as\nknown room for expansion.\n\n[issue]: https://github.com/rust-lang/rfcs/issues/941\n[breaking-change]"
  },
  {
    "hash": "7ed418c3b4ede0364bf419b2c12b27f89b706dcf",
    "author": "Alex Crichton",
    "date": 1425580902,
    "message": "std: Deprecate the old_io::process module\n\nThis module is now superseded by the `std::process` module. This module still\nhas some room to expand to get quite back up to parity with the `old_io`\nversion, and there is a [tracking issue][issue] for feature requests as well as\nknown room for expansion.\n\n[issue]: https://github.com/rust-lang/rfcs/issues/941\n[breaking-change]"
  },
  {
    "hash": "32631b4138fbaeca0f6496dd83aa327c76d5a900",
    "author": "Manish Goregaokar",
    "date": 1425612524,
    "message": "Rollup merge of #23010 - alexcrichton:deprecate-some-old-io, r=aturon\n\n The new `io` module has had some time to bake and this commit stabilizes some of\nthe utilities associated with it. This commit also deprecates a number of\n`std::old_io::util` functions and structures.\n\nThese items are now `#[stable]`\n\n* `Cursor`\n* `Cursor::{new, into_inner, get_ref, get_mut, position, set_position}`\n* Implementations of I/O traits for `Cursor<T>`\n* Delegating implementations of I/O traits for references and `Box` pointers\n* Implementations of I/O traits for primitives like slices and `Vec<T>`\n* `ReadExt::bytes`\n* `Bytes` (and impls)\n* `ReadExt::chain`\n* `Chain` (and impls)\n* `ReadExt::take` (and impls)\n* `BufReadExt::lines`\n* `Lines` (and impls)\n* `io::copy`\n* `io::{empty, Empty}` (and impls)\n* `io::{sink, Sink}` (and impls)\n* `io::{repeat, Repeat}` (and impls)\n\nThese items remain `#[unstable]`\n\n* Core I/O traits. These may want a little bit more time to bake along with the\n  commonly used methods like `read_to_end`.\n* `BufReadExt::split` - this function may be renamed to not conflict with\n  `SliceExt::split`.\n* `Error` - there are a number of questions about its representation,\n  `ErrorKind`, and usability.\n\nThese items are now `#[deprecated]` in `old_io`\n\n* `LimitReader` - use `take` instead\n* `NullWriter` - use `io::sink` instead\n* `ZeroReader` - use `io::repeat` instead\n* `NullReader` - use `io::empty` instead\n* `MultiWriter` - use `broadcast` instead\n* `ChainedReader` - use `chain` instead\n* `TeeReader` - use `tee` instead\n* `copy` - use `io::copy` instead\n\n[breaking-change]"
  },
  {
    "hash": "0dfa9978cc57efc8eb51485fc3a333eafd1aa392",
    "author": "Alex Crichton",
    "date": 1425517462,
    "message": "std: Stabilize portions of the `io` module\n\nThe new `io` module has had some time to bake and this commit stabilizes some of\nthe utilities associated with it. This commit also deprecates a number of\n`std::old_io::util` functions and structures.\n\nThese items are now `#[stable]`\n\n* `Cursor`\n* `Cursor::{new, into_inner, get_ref, get_mut, position, set_position}`\n* Implementations of I/O traits for `Cursor<T>`\n* Delegating implementations of I/O traits for references and `Box` pointers\n* Implementations of I/O traits for primitives like slices and `Vec<T>`\n* `ReadExt::bytes`\n* `Bytes` (and impls)\n* `ReadExt::chain`\n* `Chain` (and impls)\n* `ReadExt::take` (and impls)\n* `BufReadExt::lines`\n* `Lines` (and impls)\n* `io::copy`\n* `io::{empty, Empty}` (and impls)\n* `io::{sink, Sink}` (and impls)\n* `io::{repeat, Repeat}` (and impls)\n\nThese items remain `#[unstable]`\n\n* Core I/O traits. These may want a little bit more time to bake along with the\n  commonly used methods like `read_to_end`.\n* `BufReadExt::split` - this function may be renamed to not conflict with\n  `SliceExt::split`.\n* `Error` - there are a number of questions about its representation,\n  `ErrorKind`, and usability.\n\nThese items are now `#[deprecated]` in `old_io`\n\n* `LimitReader` - use `take` instead\n* `NullWriter` - use `io::sink` instead\n* `ZeroReader` - use `io::repeat` instead\n* `NullReader` - use `io::empty` instead\n* `MultiWriter` - use `broadcast` instead\n* `ChainedReader` - use `chain` instead\n* `TeeReader` - use `tee` instead\n* `copy` - use `io::copy` instead\n\n[breaking-change]"
  },
  {
    "hash": "efb487b503d87f04448fc5e6f75038ca98b8670e",
    "author": "Manish Goregaokar",
    "date": 1425612510,
    "message": "Rollup merge of #22980 - alexcrichton:debug-assertions, r=pnkfelix\n\n This commit is an implementation of [RFC 563][rfc] which adds a new\n`cfg(debug_assertions)` directive which is specially recognized and calculated\nby the compiler. The flag is turned off at any optimization level greater than 1\nand may also be explicitly controlled through the `-C debug-assertions`\nflag.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/563\n\nThe `debug_assert!` and `debug_assert_eq!` macros now respect this instead of\nthe `ndebug` variable and `ndebug` no longer holds any meaning to the standard\nlibrary.\n\nCode which was previously relying on `not(ndebug)` to gate expensive code should\nbe updated to rely on `debug_assertions` instead.\n\nCloses #22492\n[breaking-change]"
  },
  {
    "hash": "d5d834551cd5a7e7d89ac9f2ae642a93409ed989",
    "author": "Alex Crichton",
    "date": 1425595898,
    "message": "rustc: Add a debug_assertions #[cfg] directive\n\nThis commit is an implementation of [RFC 563][rfc] which adds a new\n`cfg(debug_assertions)` directive which is specially recognized and calculated\nby the compiler. The flag is turned off at any optimization level greater than 1\nand may also be explicitly controlled through the `-C debug-assertions`\nflag.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/563\n\nThe `debug_assert!` and `debug_assert_eq!` macros now respect this instead of\nthe `ndebug` variable and `ndebug` no longer holds any meaning to the standard\nlibrary.\n\nCode which was previously relying on `not(ndebug)` to gate expensive code should\nbe updated to rely on `debug_assertions` instead.\n\nCloses #22492\n[breaking-change]"
  },
  {
    "hash": "9eb596ce8f4b70ba73e8671f9b42147c91319842",
    "author": "Manish Goregaokar",
    "date": 1425612496,
    "message": "Rollup merge of #22899 - huonw:macro-stability, r=alexcrichton\n\n Unstable items used in a macro expansion will now always trigger\nstability warnings, *unless* the unstable items are directly inside a\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\nunless the span of the unstable item is a subspan of the definition of a\nmacro marked with that attribute.\n\nE.g.\n\n    #[allow_internal_unstable]\n    macro_rules! foo {\n        ($e: expr) => {{\n            $e;\n            unstable(); // no warning\n            only_called_by_foo!();\n        }}\n    }\n\n    macro_rules! only_called_by_foo {\n        () => { unstable() } // warning\n    }\n\n    foo!(unstable()) // warning\n\nThe unstable inside `foo` is fine, due to the attribute. But the\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\nhave the attribute, and the `unstable` passed into `foo` is also not\nfine since it isn't contained in the macro itself (that is, even though\nit is only used directly in the macro).\n\nIn the process this makes the stability tracking much more precise,\ne.g. previously `println!(\\\"{}\\\", unstable())` got no warning, but now it\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\n\nThe attribute is definitely feature gated, since it explicitly allows\nside-stepping the feature gating system.\n\n---\n\nThis updates `thread_local!` macro to use the attribute, since it uses\nunstable features internally (initialising a struct with unstable\nfields)."
  },
  {
    "hash": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e",
    "author": "bors",
    "date": 1425619211,
    "message": "Auto merge of #22899 - huonw:macro-stability, r=alexcrichton\n\nUnstable items used in a macro expansion will now always trigger\r\nstability warnings, *unless* the unstable items are directly inside a\r\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\r\nunless the span of the unstable item is a subspan of the definition of a\r\nmacro marked with that attribute.\r\n\r\nE.g.\r\n\r\n    #[allow_internal_unstable]\r\n    macro_rules! foo {\r\n        ($e: expr) => {{\r\n            $e;\r\n            unstable(); // no warning\r\n            only_called_by_foo!();\r\n        }}\r\n    }\r\n\r\n    macro_rules! only_called_by_foo {\r\n        () => { unstable() } // warning\r\n    }\r\n\r\n    foo!(unstable()) // warning\r\n\r\nThe unstable inside `foo` is fine, due to the attribute. But the\r\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\r\nhave the attribute, and the `unstable` passed into `foo` is also not\r\nfine since it isn't contained in the macro itself (that is, even though\r\nit is only used directly in the macro).\r\n\r\nIn the process this makes the stability tracking much more precise,\r\ne.g. previously `println!(\"{}\", unstable())` got no warning, but now it\r\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\r\n\r\nThe attribute is definitely feature gated, since it explicitly allows\r\nside-stepping the feature gating system.\r\n\r\n---\r\n\r\nThis updates `thread_local!` macro to use the attribute, since it uses\r\nunstable features internally (initialising a struct with unstable\r\nfields)."
  },
  {
    "hash": "84b060ce29bf7dd65fc23e855ad7c5a8748d806c",
    "author": "Huon Wilson",
    "date": 1425561508,
    "message": "Add #[allow_internal_unstable] to track stability for macros better.\n\nUnstable items used in a macro expansion will now always trigger\nstability warnings, *unless* the unstable items are directly inside a\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\nunless the span of the unstable item is a subspan of the definition of a\nmacro marked with that attribute.\n\nE.g.\n\n    #[allow_internal_unstable]\n    macro_rules! foo {\n        ($e: expr) => {{\n            $e;\n            unstable(); // no warning\n            only_called_by_foo!();\n        }}\n    }\n\n    macro_rules! only_called_by_foo {\n        () => { unstable() } // warning\n    }\n\n    foo!(unstable()) // warning\n\nThe unstable inside `foo` is fine, due to the attribute. But the\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\nhave the attribute, and the `unstable` passed into `foo` is also not\nfine since it isn't contained in the macro itself (that is, even though\nit is only used directly in the macro).\n\nIn the process this makes the stability tracking much more precise,\ne.g. previously `println!(\"{}\", unstable())` got no warning, but now it\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\n\nThe attribute is definitely feature gated, since it explicitly allows\nside-stepping the feature gating system."
  },
  {
    "hash": "f0c74f85f363a8081b31f9ab696463717ce312d5",
    "author": "bors",
    "date": 1425577941,
    "message": "Auto merge of #23026 - nikomatsakis:issue-20220-supertrait, r=nikomatsakis\n\nThe main gist of this PR is commit 1077efb which removes the list of supertraits from the `TraitDef` and pulls them into a separate table, which is accessed via `lookup_super_predicates`. This is analogous to `lookup_predicates`, which gets the complete where clause. This allows us to create the `TraitDef`, which contains the list generics and so forth, without fully knowing the list of supertraits. This in turn allows the *supertrait listing* to contain references to associated types like `<Self as Foo>::Item`, which were previously impossible because conversion required having the `TraitDef` for `Foo`.\r\n\r\nWe do not yet support `Self::Item` in a supertrait listing. This doesn't work because to convert that, it attempts to expand out the full set of supertraits, which are in the process of being created. This could potentially be worked out by having the expansion of supertraits proceed in a lazy fashion, but we'd have to define shadowing rules for associated types which we don't currently have.\r\n\r\nAlong the way (in 9de9ec5) I also removed the restriction against duplicate bounds and generalized the code so that it can handle having the same supertrait multiple times with different arguments, e.g. `Foo : Bar<i32> + Bar<u32>`. This restriction was serving no particular purpose, since the same trait could be extended multiple times indirectly, and in the era of multidispatch it is actively harmful.\r\n\r\nThis is technically a [breaking-change] because it affects the definition of a super-trait. Anything in a where clause that looks like `where Self : Foo` is now considered a supertrait. Because cycles are disallowed in supertraits, that could lead to some errors. This has not been observed in any existing code.\r\n\r\nr? @nrc"
  },
  {
    "hash": "cc722a4dd3e8110a8bf7e62eea977e99e3a3d128",
    "author": "bors",
    "date": 1425518355,
    "message": "Auto merge of #22873 - alexcrichton:deprecate-fs, r=aturon\n\nThis commit deprecates the majority of std::old_io::fs in favor of std::fs and\r\nits new functionality. Some functions remain non-deprecated but are now behind a\r\nfeature gate called `old_fs`. These functions will be deprecated once\r\nsuitable replacements have been implemented.\r\n\r\nThe compiler has been migrated to new `std::fs` and `std::path` APIs where\r\nappropriate as part of this change.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "cdfff9db35d037c51dfd5c2bac2174f651294adb",
    "author": "Corey Richardson",
    "date": 1425380947,
    "message": "rustc: implement arithmetic overflow checking\n\nAdds overflow checking to integer addition, multiplication, and subtraction\nwhen `-Z force-overflow-checks` is true, or if `--cfg ndebug` is not passed to\nthe compiler. On overflow, it panics with `arithmetic operation overflowed`.\nAlso adds `overflowing_add`, `overflowing_sub`, and `overflowing_mul`\nintrinsics for doing unchecked arithmetic.\n\n[breaking-change]"
  },
  {
    "hash": "393ce1820e3f639b43d6058d2681b9757123ac1b",
    "author": "Manish Goregaokar",
    "date": 1425382340,
    "message": "Rollup merge of #22876 - Florob:const, r=nikomatsakis\n\n This changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "f35f973cb700c444d8c029ee13b37dc16d560225",
    "author": "Florian Zeitz",
    "date": 1425312711,
    "message": "Use `const`s instead of `static`s where appropriate\n\nThis changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]"
  },
  {
    "hash": "d0fcb1f53c9f81fbcae5379dd1c0577a8605172c",
    "author": "Manish Goregaokar",
    "date": 1425382276,
    "message": "Rollup merge of #22990 - japaric:privATe, r=alexcrichton\n\n Associated types are now treated as part of the public API by the privacy checker.\n\nIf you were exposing a private type in your public API via an associated type, make that type public:\n\n``` diff\n  pub struct PublicType { .. }\n\n- struct Struct { .. }\n+ pub struct Struct { .. }\n\n  pub trait PublicTrait {\n      type Output;\n\n      fn foo(&self) -> Self::Output;\n  }\n\n  impl PublicTrait for PublicType {\n      type Output = Struct;\n\n      fn foo(&self) -> Struct {  // `Struct` is part of the public API, it must be marked as `pub`lic\n          ..\n      }\n  }\n```\n\n[breaking-change]\n\n---\n\nr? @nikomatsakis\ncloses #22912"
  },
  {
    "hash": "3b30b74692cfee533b45e0380591d237975ec215",
    "author": "Manish Goregaokar",
    "date": 1425382275,
    "message": "Rollup merge of #22943 - ipetkov:lint-recursion, r=alexcrichton\n\n * The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]\n\nI had originally intended for the lint to ignore uses of deprecated items that are declared in the same crate, but this goes against some previous test cases that expect the lint to capture *all* uses of deprecated items, so I maintained the previous approach to avoid changing the expected behavior of the lint.\n\nTested locally on OS X, so hopefully there aren't any deprecated item uses behind a `cfg` that I may have missed."
  },
  {
    "hash": "2b03718618d66e7e672663230be1ee857d3fb89a",
    "author": "Ivan Petkov",
    "date": 1425339348,
    "message": "Enable recursion for visit_ty in lint visitor\n\n* The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Disabled the `exceeding_bitshifts` lint for\n  compile-fail/huge-array-simple test so it doesn't shadow the expected\n  error on 32bit systems\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]"
  },
  {
    "hash": "76e9fa63ba0b6d892aa880db9c8373ede3e67c03",
    "author": "Brian Anderson",
    "date": 1425341566,
    "message": "core: Audit num module for int/uint\n\n* count_ones/zeros, trailing_ones/zeros return u32, not usize\n* rotate_left/right take u32, not usize\n* RADIX, MANTISSA_DIGITS, DIGITS, BITS, BYTES are u32, not usize\n\nDoesn't touch pow because there's another PR for it.\n\n[breaking-change]"
  },
  {
    "hash": "93613a543f0cae68ea82e6a66b9b9cdfa13b673e",
    "author": "Alex Crichton",
    "date": 1425271297,
    "message": "std: Stabilize the `process` module\n\nThis commits blanket marks the API of the `std::process` module as `#[stable]`.\nThe module's API is very similar to the old `std::old_io::process` API and has\ngenerally had quite a bit of time to bake both before and after the new module\nlanded.\n\nThe one modification made to the API is that `Stdio::capture` is now named\n`stdio::piped`.\n\n[breaking-change]"
  },
  {
    "hash": "ef8b20a564bab2050403f2f5c1dab90e0941adf7",
    "author": "Manish Goregaokar",
    "date": 1425248634,
    "message": "Rollup merge of #22821 - ipetkov:lint-method-rename, r=eddyb\n\n Traits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "2fc62244113d01e9524ed712210ba52e8471e2a9",
    "author": "Ivan Petkov",
    "date": 1425160597,
    "message": "Rename LintPass::check_trait_method to check_trait_item\n\nTraits can have associated types and not just methods. This\nclarification reflects the the type of the input the method accepts.\n\n[breaking-change]"
  },
  {
    "hash": "157614249594f187f421cd97f928e64c5ab5c1fa",
    "author": "bors",
    "date": 1425219778,
    "message": "Auto merge of #22880 - alexcrichton:deprecate-io-extensions, r=huonw\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\r\nwith no replacement for now.\r\n\r\n[breaking-change]"
  },
  {
    "hash": "d79e91033770fc5a760d34511769f5ba6c872c77",
    "author": "Alex Crichton",
    "date": 1425083193,
    "message": "std: Deprecated the `old_io::extensions` module\n\nThe `u64_from_be_bytes` and `u64_to_be_bytes` functions are being deprecated\nwith no replacement for now.\n\n[breaking-change]"
  },
  {
    "hash": "d9fb9765a13d44f051cae9a9a7d010621b8e42cb",
    "author": "Manish Goregaokar",
    "date": 1425183588,
    "message": "Rollup merge of #22907 - dotdash:static_assert_bool, r=eddyb\n\n static_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "d11b48c85c1cceb559ab8a08815ba3f7b3312c44",
    "author": "Björn Steinbrink",
    "date": 1425148129,
    "message": "Error out when using static_assert on a non-boolean value\n\nstatic_assert is documented as working on static with type `bool`, but\nwe currently accept it on any const static and crash when the const has\nan non-integral type.\n\nThis is a breaking-change for anyone who used static_assert on types\nlikes i32, which happened to work but seems like an unintended\nconsequence of the missing error checking.\n\n[breaking-change]\n\nFixes #22056"
  },
  {
    "hash": "040a811b9190d2c2c595e09b5d1db07bedffdde9",
    "author": "Manish Goregaokar",
    "date": 1425131340,
    "message": "Rollup merge of #22884 - japaric:obsolete, r=alexcrichton\n\n This is leftover from #21843\n\nIf you still have `|&:| {}` closures in your code, simply remove the `&:` part.\n\n[breaking-change]"
  },
  {
    "hash": "37760c1f25fc55814a92cce1c98edefdc0740188",
    "author": "Manish Goregaokar",
    "date": 1425131339,
    "message": "Rollup merge of #22875 - kmcallister:maceager, r=sfackler\n\n MacEager is a MacResult implementation for the common case where you've already built each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator.\n\nr? @sfackler"
  },
  {
    "hash": "f66a3f7bba378d4a308e02a860a11ab5f9f8e4ad",
    "author": "Keegan McAllister",
    "date": 1425064625,
    "message": "Replace MacExpr / MacPat / MacItems with MacEager\n\nMacEager is a MacResult implementation for the common case where you've already\nbuilt each form of AST that you might return.\n\nFixes #17637. Based on #18814.\n\nThis is a [breaking-change] for syntax extensions:\n\n  * MacExpr::new becomes MacEager::expr.\n\n  * MacPat::new becomes MacEager::pat.\n\n  * MacItems::new becomes MacEager::items. It takes a SmallVector directly,\n    not an iterator."
  },
  {
    "hash": "48aeaba9347a25b2e3848e0dcbc1d8f6b0076718",
    "author": "bors",
    "date": 1425103578,
    "message": "Auto merge of #22801 - huonw:crateify-lint, r=kmcallister\n\nThis pulls out the implementations of most built-in lints into a\r\nseparate crate, to reduce edit-compile-test iteration times with\r\nlibrustc_lint and increase parallelism. This should enable lints to be\r\nrefactored, added and deleted much more easily as it slashes the\r\nedit-compile cycle to get a minimal working compiler to test with (`make\r\nrustc-stage1`) from\r\n\r\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\r\n        libcore -> ... -> libstd\r\n\r\nto\r\n\r\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\r\n\r\nwhich is significantly faster, mainly due to avoiding the librustc build\r\nitself.\r\n\r\nThe intention would be to move as much as possible of the infrastructure\r\ninto the crate too, but the plumbing is deeply intertwined with librustc\r\nitself at the moment. Also, there are lints for which diagnostics are\r\nregistered directly in the compiler code, not in their own crate\r\ntraversal, and their definitions have to remain in librustc.\r\n\r\nThis is a [breaking-change] for direct users of the compiler APIs:\r\ncallers of `rustc::session::build_session` or\r\n`rustc::session::build_session_` need to manually call\r\n`rustc_lint::register_builtins` on their return value.\r\n\r\nThis should make #22206 easier."
  },
  {
    "hash": "532cd5f85a93921f74f5991db2e419c6da58b188",
    "author": "Huon Wilson",
    "date": 1425098039,
    "message": "Separate most of rustc::lint::builtin into a separate crate.\n\nThis pulls out the implementations of most built-in lints into a\nseparate crate, to reduce edit-compile-test iteration times with\nlibrustc_lint and increase parallelism. This should enable lints to be\nrefactored, added and deleted much more easily as it slashes the\nedit-compile cycle to get a minimal working compiler to test with (`make\nrustc-stage1`) from\n\n    librustc -> librustc_typeck -> ... -> librustc_driver ->\n        libcore -> ... -> libstd\n\nto\n\n    librustc_lint -> librustc_driver -> libcore -> ... libstd\n\nwhich is significantly faster, mainly due to avoiding the librustc build\nitself.\n\nThe intention would be to move as much as possible of the infrastructure\ninto the crate too, but the plumbing is deeply intertwined with librustc\nitself at the moment. Also, there are lints for which diagnostics are\nregistered directly in the compiler code, not in their own crate\ntraversal, and their definitions have to remain in librustc.\n\nThis is a [breaking-change] for direct users of the compiler APIs:\ncallers of `rustc::session::build_session` or\n`rustc::session::build_session_` need to manually call\n`rustc_lint::register_builtins` on their return value.\n\nThis should make #22206 easier."
  },
  {
    "hash": "ce5f1b3216be790be590ad71eabccc16c9b86c74",
    "author": "Manish Goregaokar",
    "date": 1425055023,
    "message": "Rollup merge of #22817 - jmesmon:result-or-type, r=huonw\n\n Changes .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` & `or_else`\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "07dc8d67c92017f950eef3951ec901cb2a3add7e",
    "author": "Cody P Schafer",
    "date": 1424903908,
    "message": "Result::or : avoid over-specializing the type\n\nChanges .or() so that it can return a Result with a different E type\nthan the one it is called on.\n\nEssentially:\n\n    fn or(self, res: Result<T, E>) -> Result<T, E>\n\nbecomes\n\n    fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n\nThis brings `or` in line with the existing `and` and `or_else` member\ntypes.\n\nThis is a\n[breaking-change]\nDue to some code needing additional type annotations."
  },
  {
    "hash": "91569a95f16580f05f9dcb4b6d6eff50203cdde8",
    "author": "Manish Goregaokar",
    "date": 1425055022,
    "message": "Rollup merge of #22795 - alexcrichton:issue-22617, r=huonw\n\n Keeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "18878b155ebf3c70445f2a461582475f5ef72c92",
    "author": "Alex Crichton",
    "date": 1424844261,
    "message": "std: Require `&mut self` for Iterator::all\n\nKeeps the method consistent with `Iterator::any`.\n\nCloses #22617\n[breaking-change]"
  },
  {
    "hash": "6c6f2317bae63261123cd94ebe214e80fb6ad78e",
    "author": "Manish Goregaokar",
    "date": 1424840386,
    "message": "Rollup merge of #22729 - alexcrichton:ptr-stabilization, r=aturon\n\n Specifically, the following actions were takend:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n\n[breaking-change]"
  },
  {
    "hash": "ab45694198356ae78972025e0d3beece297431d1",
    "author": "Alex Crichton",
    "date": 1424816553,
    "message": "std: Stabilize some `ptr` functions\n\nSpecifically, the following actions were taken:\n\n* The `copy_memory` and `copy_nonoverlapping_memory` functions\n  to drop the `_memory` suffix (as it's implied by the functionality). Both\n  functions are now marked as `#[stable]`.\n* The `set_memory` function was renamed to `write_bytes` and is now stable.\n* The `zero_memory` function is now deprecated in favor of `write_bytes`\n  directly.\n* The `Unique` pointer type is now behind its own feature gate called `unique`\n  to facilitate future stabilization.\n* All type parameters now are `T: ?Sized` wherever possible and new clauses were\n  added to the `offset` functions to require that the type is sized.\n\n[breaking-change]"
  },
  {
    "hash": "b18584cbd942e2559e718d6318fdbc494e9047bd",
    "author": "Manish Goregaokar",
    "date": 1424840379,
    "message": "Rollup merge of #22727 - alexcrichton:prep-env, r=aturon\n\n This commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  },
  {
    "hash": "2d200c9c8bd6659720a68ab8dd74218b1e58c1e9",
    "author": "Alex Crichton",
    "date": 1424820462,
    "message": "std: Move std::env to the new I/O APIs\n\nThis commit moves `std::env` away from the `std::old_io` error type as well as\nthe `std::old_path` module. Methods returning an error now return `io::Error`\nand methods consuming or returning paths use `std::path` instead of\n`std::old_path`. This commit does not yet mark these APIs as `#[stable]`.\n\nThis commit also migrates `std::old_io::TempDir` to `std::fs::TempDir` with\nessentially the exact same API. This type was added to interoperate with the new\npath API and has its own `tempdir` feature.\n\nFinally, this commit reverts the deprecation of `std::os` APIs returning the old\npath API types. This deprecation can come back once the entire `std::old_path`\nmodule is deprecated.\n\n[breaking-change]"
  },
  {
    "hash": "24fc50d29545e7ea89320d3c9544cd9043894d7d",
    "author": "Manish Goregaokar",
    "date": 1424840231,
    "message": "Rollup merge of #22783 - alexcrichton:deprecate-taskpool, r=alexcrichton\n\n Rather than stabilize on the current API, we're going to punt this\nconcern to crates.io, to allow for faster iteration.\n\n[breaking-change]"
  },
  {
    "hash": "efd2a1780b2ee1909e84df0c3b398adb024ee375",
    "author": "Aaron Turon",
    "date": 1424133726,
    "message": "Deprecate std::sync::TaskPool\n\nRather than stabilize on the current API, we're going to punt this\nconcern to crates.io, to allow for faster iteration.\n\nIf you need this functionality, you might look at https://github.com/carllerche/syncbox\n\n[breaking-change]"
  },
  {
    "hash": "0bd15657d93c932611f3aee351b6521cdfa77731",
    "author": "bors",
    "date": 1424800569,
    "message": "Auto merge of #22172 - eddyb:almost-there, r=nikomatsakis\n\nAdds `<module::Type>::method` support and makes `module::Type::method` a shorthand for it.\r\nThis is most of #16293, except that chaining multiple associated types is not yet supported.\r\nIt also fixes #22563 as `impl`s are no longer treated as modules in resolve.\r\n\r\nUnfortunately, this is still a *[breaking-change]*:\r\n* If you used a global path to a primitive type, i.e. `::bool`, `::i32` etc. - that was a bug I had to fix.\r\nSolution: remove the leading `::`.\r\n* If you passed explicit `impl`-side type parameters to an inherent method, e.g.:\r\n```rust\r\nstruct Foo<T>(T);\r\nimpl<A, B> Foo<(A, B)> {\r\n    fn pair(a: A, b: B) -> Foo<(A, B)> { Foo((a, b)) }\r\n}\r\nFoo::<A, B>::pair(a, b)\r\n// Now that is sugar for:\r\n<Foo<A, B>>::pair(a, b)\r\n// Which isn't valid because `Foo` has only one type parameter.\r\n// Solution: replace with:\r\nFoo::<(A, B)>::pair(a, b)\r\n// And, if possible, remove the explicit type param entirely:\r\nFoo::pair(a, b)\r\n```\r\n* If you used the `QPath`-related `AstBuilder` methods @hugwijst added in #21943.\r\nThe methods still exist, but `QPath` was replaced by `QSelf`, with the actual path stored separately.\r\nSolution: unpack the pair returned by `cx.qpath` to get the two arguments for `cx.expr_qpath`."
  },
  {
    "hash": "717a91d6651598994834d056c69e6c4bf2b74b9f",
    "author": "Ivan Petkov",
    "date": 1424718457,
    "message": "Update missing-docs lint to check associated type declarations\n\n[breaking-change]\n\nFixes #20648"
  },
  {
    "hash": "67eb38ee4cfd7b28f8498b5b6492da172768dcb9",
    "author": "bors",
    "date": 1424645146,
    "message": "Auto merge of #22466 - Kimundi:str_pattern_ai_safe, r=aturon\n\nThis is not a complete implementation of the RFC:\r\n\r\n- only existing methods got updated, no new ones added\r\n- doc comments are not extensive enough yet\r\n- optimizations got lost and need to be reimplemented\r\n\r\nSee https://github.com/rust-lang/rfcs/pull/528\r\n\r\nTechnically a\r\n\r\n[breaking-change]"
  },
  {
    "hash": "98ec45ee0b5f38f06b4ac5adfb9aff198f157bdd",
    "author": "Manish Goregaokar",
    "date": 1424550053,
    "message": "Rollup merge of #22542 - ipetkov:unsafe-lint, r=huonw\n\n This allows warning or forbidding all uses of unsafe code, whereas\npreviously only unsafe blocks were caught by the lint.\n\nThe lint has been renamed from `unsafe-blocks` to `unsafe-code` to\nreflect its new purpose.\n\nThis is a minor [breaking-change]\n\nCloses #22430"
  },
  {
    "hash": "be0dc49675ff38b4bc2e73f68bff298168bc6875",
    "author": "Ivan Petkov",
    "date": 1424407389,
    "message": "Unsafe lint will also check for other unsafe code\n\nChecks include declaration/implementation of unsafe functions, traits,\nand methods.\n\nThis allows warning or forbidding all uses of unsafe code, whereas\npreviously only unsafe blocks were caught by the lint.\n\nThe lint has been renamed from `unsafe-blocks` to `unsafe-code` to\nreflect its new purpose.\n\nThis is a minor [breaking-change]\n\nCloses #22430"
  },
  {
    "hash": "a99e698628cbd396c8100ef776d10ac61d911847",
    "author": "Aaron Turon",
    "date": 1424301838,
    "message": "Stabilize std::borrow\n\nThis commit stabilizes `std::borrow`, making the following modifications\nto catch up the API with language changes:\n\n* It renames `BorrowFrom` to `Borrow`, as was originally intended (but\n  blocked for technical reasons), and reorders the parameters\n  accordingly.\n\n* It moves the type parameter of `ToOwned` to an associated type. This\n  is somewhat less flexible, in that each borrowed type must have a\n  unique owned type, but leads to a significant simplification for\n  `Cow`. Flexibility can be regained by using newtyped slices, which is\n  advisable for other reasons anyway.\n\n* It removes the owned type parameter from `Cow`, making the type much\n  less verbose.\n\n* Deprecates the `is_owned` and `is_borrowed` predicates in favor of\n  direct matching.\n\nThe above API changes are relatively minor; the basic functionality\nremains the same, and essentially the whole module is now marked\n`#[stable]`.\n\n[breaking-change]"
  },
  {
    "hash": "66613e26b95438c02e2f5c273c557515454121f7",
    "author": "Alexis",
    "date": 1424286107,
    "message": "make FromIterator use IntoIterator\n\nThis breaks all implementors of FromIterator, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of FromIterator should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]"
  },
  {
    "hash": "4a9d190423f67a00053f4b5c9869f0ccbdfcc689",
    "author": "Alexis",
    "date": 1424286107,
    "message": "make Extend use IntoIterator\n\nThis breaks all implementors of Extend, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of Extend should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]"
  },
  {
    "hash": "5fa9de16df87ab844452821acff1b6c74e948327",
    "author": "Aaron Turon",
    "date": 1424286106,
    "message": "Implement RFC 580\n\nThis commit implements RFC 580 by renaming:\n\n* DList -> LinkedList\n* Bitv -> BitVec\n* BitvSet -> BitSet\n* RingBuf -> VecDeque\n\nMore details are in [the\nRFC](https://github.com/rust-lang/rfcs/pull/580)\n\n[breaking-change]"
  },
  {
    "hash": "f3657170b1cbe80393d9ccde8608872f7bdc68f2",
    "author": "Alex Crichton",
    "date": 1424298730,
    "message": "rollup merge of #22482: alexcrichton/cstr-changes\n\nThis commit is an implementation of [RFC 592][r592] and [RFC 840][r840]. These\ntwo RFCs tweak the behavior of `CString` and add a new `CStr` unsized slice type\nto the module.\n\n[r592]: https://github.com/rust-lang/rfcs/blob/master/text/0592-c-str-deref.md\n[r840]: https://github.com/rust-lang/rfcs/blob/master/text/0840-no-panic-in-c-string.md\n\nThe new `CStr` type is only constructable via two methods:\n\n1. By `deref`'ing from a `CString`\n2. Unsafely via `CStr::from_ptr`\n\nThe purpose of `CStr` is to be an unsized type which is a thin pointer to a\n`libc::c_char` (currently it is a fat pointer slice due to implementation\nlimitations). Strings from C can be safely represented with a `CStr` and an\nappropriate lifetime as well. Consumers of `&CString` should now consume `&CStr`\ninstead to allow producers to pass in C-originating strings instead of just\nRust-allocated strings.\n\nA new constructor was added to `CString`, `new`, which takes `T: IntoBytes`\ninstead of separate `from_slice` and `from_vec` methods (both have been\ndeprecated in favor of `new`). The `new` method returns a `Result` instead of\npanicking.  The error variant contains the relevant information about where the\nerror happened and bytes (if present). Conversions are provided to the\n`io::Error` and `old_io::IoError` types via the `FromError` trait which\ntranslate to `InvalidInput`.\n\nThis is a breaking change due to the modification of existing `#[unstable]` APIs\nand new deprecation, and more detailed information can be found in the two RFCs.\nNotable breakage includes:\n\n* All construction of `CString` now needs to use `new` and handle the outgoing\n  `Result`.\n* Usage of `CString` as a byte slice now explicitly needs a `.as_bytes()` call.\n* The `as_slice*` methods have been removed in favor of just having the\n  `as_bytes*` methods.\n\nCloses #22469\nCloses #22470\n[breaking-change]"
  },
  {
    "hash": "1860ee521aa6096eb7f5410a64b53311fb0d2d0e",
    "author": "Alex Crichton",
    "date": 1424297743,
    "message": "std: Implement CString-related RFCs\n\nThis commit is an implementation of [RFC 592][r592] and [RFC 840][r840]. These\ntwo RFCs tweak the behavior of `CString` and add a new `CStr` unsized slice type\nto the module.\n\n[r592]: https://github.com/rust-lang/rfcs/blob/master/text/0592-c-str-deref.md\n[r840]: https://github.com/rust-lang/rfcs/blob/master/text/0840-no-panic-in-c-string.md\n\nThe new `CStr` type is only constructable via two methods:\n\n1. By `deref`'ing from a `CString`\n2. Unsafely via `CStr::from_ptr`\n\nThe purpose of `CStr` is to be an unsized type which is a thin pointer to a\n`libc::c_char` (currently it is a fat pointer slice due to implementation\nlimitations). Strings from C can be safely represented with a `CStr` and an\nappropriate lifetime as well. Consumers of `&CString` should now consume `&CStr`\ninstead to allow producers to pass in C-originating strings instead of just\nRust-allocated strings.\n\nA new constructor was added to `CString`, `new`, which takes `T: IntoBytes`\ninstead of separate `from_slice` and `from_vec` methods (both have been\ndeprecated in favor of `new`). The `new` method returns a `Result` instead of\npanicking.  The error variant contains the relevant information about where the\nerror happened and bytes (if present). Conversions are provided to the\n`io::Error` and `old_io::IoError` types via the `FromError` trait which\ntranslate to `InvalidInput`.\n\nThis is a breaking change due to the modification of existing `#[unstable]` APIs\nand new deprecation, and more detailed information can be found in the two RFCs.\nNotable breakage includes:\n\n* All construction of `CString` now needs to use `new` and handle the outgoing\n  `Result`.\n* Usage of `CString` as a byte slice now explicitly needs a `.as_bytes()` call.\n* The `as_slice*` methods have been removed in favor of just having the\n  `as_bytes*` methods.\n\nCloses #22469\nCloses #22470\n[breaking-change]"
  },
  {
    "hash": "9774b7e64b7ff8323b4f8160cc38eb793f447217",
    "author": "Alex Crichton",
    "date": 1424298723,
    "message": "rollup merge of #22480: alexcrichton/hashv3\n\nThis commit is an implementation of [RFC 823][rfc] which is another pass over\nthe `std::hash` module for stabilization. The contents of the module were not\nentirely marked stable, but some portions which remained quite similar to the\nprevious incarnation are now marked `#[stable]`. Specifically:\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0823-hash-simplification.md\n\n* `std::hash` is now stable (the name)\n* `Hash` is now stable\n* `Hash::hash` is now stable\n* `Hasher` is now stable\n* `SipHasher` is now stable\n* `SipHasher::new` and `new_with_keys` are now stable\n* `Hasher for SipHasher` is now stable\n* Many `Hash` implementations are now stable\n\nAll other portions of the `hash` module remain `#[unstable]` as they are less\ncommonly used and were recently redesigned.\n\nThis commit is a breaking change due to the modifications to the `std::hash` API\nand more details can be found on the [RFC][rfc].\n\nCloses #22467\n[breaking-change]"
  },
  {
    "hash": "f83e23ad7c464c242c2d7ace7212d323980b2bca",
    "author": "Alex Crichton",
    "date": 1424276780,
    "message": "std: Stabilize the `hash` module\n\nThis commit is an implementation of [RFC 823][rfc] which is another pass over\nthe `std::hash` module for stabilization. The contents of the module were not\nentirely marked stable, but some portions which remained quite similar to the\nprevious incarnation are now marked `#[stable]`. Specifically:\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0823-hash-simplification.md\n\n* `std::hash` is now stable (the name)\n* `Hash` is now stable\n* `Hash::hash` is now stable\n* `Hasher` is now stable\n* `SipHasher` is now stable\n* `SipHasher::new` and `new_with_keys` are now stable\n* `Hasher for SipHasher` is now stable\n* Many `Hash` implementations are now stable\n\nAll other portions of the `hash` module remain `#[unstable]` as they are less\ncommonly used and were recently redesigned.\n\nThis commit is a breaking change due to the modifications to the `std::hash` API\nand more details can be found on the [RFC][rfc].\n\nCloses #22467\n[breaking-change]"
  },
  {
    "hash": "d8f8f7a58c7c8b3352c1c577347865f5a823fee3",
    "author": "Aaron Turon",
    "date": 1424212409,
    "message": "Revise std::thread semantics\n\nThis commit makes several changes to `std::thread` in preparation for\nfinal stabilization:\n\n* It removes the ability to handle panics from `scoped` children; see\n  #20807 for discussion\n\n* It adds a `JoinHandle` structure, now returned from `spawn`, which\n  makes it possible to join on children that do not share data from\n  their parent's stack. The child is automatically detached when the\n  handle is dropped, and the handle cannot be copied due to Posix\n  semantics.\n\n* It moves all static methods from `std::thread::Thread` to free\n  functions in `std::thread`. This was done in part because, due to the\n  above changes, there are effectively no direct `Thread` constructors,\n  and the static methods have tended to feel a bit awkward.\n\n* Adds an `io::Result` around the `Builder` methods `scoped` and\n  `spawn`, making it possible to handle OS errors when creating\n  threads. The convenience free functions entail an unwrap.\n\n* Stabilizes the entire module. Despite the fact that the API is\n  changing somewhat here, this is part of a long period of baking and\n  the changes are addressing all known issues prior to alpha2. If\n  absolutely necessary, further breaking changes can be made prior to beta.\n\nCloses #20807\n\n[breaking-change]"
  },
  {
    "hash": "a2ebb24ee6cc76791ef834cb2d17ecac95756499",
    "author": "Alex Crichton",
    "date": 1424210565,
    "message": "std: Rename io/path features with old_ prefix\n\nThis commit renames the features for the `std::old_io` and `std::old_path`\nmodules to `old_io` and `old_path` to help facilitate migration to the new APIs.\n\nThis is a breaking change as crates which mention the old feature names now need\nto be renamed to use the new feature names.\n\n[breaking-change]"
  },
  {
    "hash": "eca2453a02548042fcb7082063149367a3343dd7",
    "author": "Alex Crichton",
    "date": 1424214833,
    "message": "rollup merge of #22208: aturon/expose-more-path\n\nThis commit exposes the `is_sep` function and `MAIN_SEP` constant, as\nwell as Windows path prefixes. The path prefix enum is safely exposed on\nall platforms, but it only yielded as a component for Windows.\n\nExposing the prefix enum as part of prefix components involved changing\nthe type from `OsStr` to the `Prefix` enum, which is a:\n\n[breaking-change]"
  },
  {
    "hash": "4a9dd3f8403f84ad518b0119fa2312c379df5dd7",
    "author": "Aaron Turon",
    "date": 1424123589,
    "message": "Expose more of std::path\n\nThis commit exposes the `is_sep` function and `MAIN_SEP` constant, as\nwell as Windows path prefixes. The path prefix enum is safely exposed on\nall platforms, but it only yielded as a component for Windows.\n\nExposing the prefix enum as part of prefix components involved changing\nthe type from `OsStr` to the `Prefix` enum, which is a:\n\n[breaking-change]"
  },
  {
    "hash": "5be2b8964c624ee619d2f8518215d3a3b13514e1",
    "author": "Alex Crichton",
    "date": 1424214826,
    "message": "rollup merge of #22191: nagisa/target-ptr-width-json\n\nThis aligns json target specification to match terminology used elsewhere in the code base.\n\n[breaking-change] for custom target json users. Change all appearances of target-word-size\nto target-pointer-width."
  },
  {
    "hash": "6f5944bfcff96509e3f3de227570382056153392",
    "author": "Simonas Kazlauskas",
    "date": 1423686556,
    "message": "Change target-word-size to target-pointer-width\n\nThis aligns json target specification to match terminology used elsewhere in the code base.\n\n[breaking-change] for custom target json users. Change all appearances of target-word-size\nto target-pointer-width."
  },
  {
    "hash": "f492095eb4ac061f1b4898b92880095d23dc9c86",
    "author": "Alex Crichton",
    "date": 1424214800,
    "message": "rollup merge of #22024: alexcrichton/ascii\n\n* Move the type parameter on the `AsciiExt` trait to an associated type named\n  `Owned`.\n* Move `ascii::escape_default` to using an iterator.\n\nThis is a breaking change due to the removal of the type parameter on the\n`AsciiExt` trait as well as the modifications to the `escape_default` function\nto returning an iterator. Manual implementations of `AsciiExt` (or `AsciiExt`\nbounds) should be adjusted to remove the type parameter and using the new\n`escape_default` should be relatively straightforward.\n\n[breaking-change]"
  },
  {
    "hash": "235f35b0b724a38a5583112825d46f50c5dde980",
    "author": "Alex Crichton",
    "date": 1424210314,
    "message": "std: Stabilize the `ascii` module\n\nThis commit performs a stabilization pass over the `std::ascii` module taking\nthe following actions:\n\n* the module name is now stable\n* `AsciiExt` is now stable after moving its type parameter to an `Owned`\n  associated type\n* `AsciiExt::is_ascii` is now stable\n* `AsciiExt::to_ascii_uppercase` is now stable\n* `AsciiExt::to_ascii_lowercase` is now stable\n* `AsciiExt::eq_ignore_ascii_case` is now stable\n* `AsciiExt::make_ascii_uppercase` is added to possibly replace\n  `OwnedAsciiExt::into_ascii_uppercase` (similarly for lowercase variants).\n* `escape_default` now returns an iterator and is stable\n* `EscapeDefault` is now stable\n\nTrait implementations are now also marked stable.\n\nPrimarily it is still unstable to *implement* the `AsciiExt` trait due to it\ncontaining some unstable methods.\n\n[breaking-change]"
  },
  {
    "hash": "020e4e4ad981ce0518bd8e3464ac592717c41143",
    "author": "Manish Goregaokar",
    "date": 1424174600,
    "message": "Rollup merge of #22383 - pnkfelix:pass-features-along-during-expansion, r=huonw\n\n Pass features along during expansion\n\nUse the set of passed features to detect uses of feature-gated macros without the corresponding feature enabled.\n\nFix #22234.\n\n----\n\nAlso, the framework this add (passing along a reference to the features in the expansion context) is a necessary precursor for landing a properly feature-gated desugaring-based overloaded-`box` and placement-`in` (#22181).\n\n----\n\nThis is fixing a bug, but since there might be code out there that is unknowingly taking advantage of that bug, I feel obligated to mark this as a:\n\n[breaking-change]"
  },
  {
    "hash": "bf52f2eef578e6fff83611a6276a3aa9f284e1c5",
    "author": "Manish Goregaokar",
    "date": 1424174600,
    "message": "Rollup merge of #22311 - lfairy:consistent-fmt, r=alexcrichton\n\n This brings it in line with its namesake in `std::io`.\n\n[breaking-change]\n\nr? @aturon"
  },
  {
    "hash": "4647d89205992383f8122e8fde0e2615497572bc",
    "author": "Manish Goregaokar",
    "date": 1424174599,
    "message": "Rollup merge of #22364 - Manishearth:rfc-572-forbid-attr, r=nikomatsakis\n\n fixes #22203\n\nr? @nikomatsakis\n\nThis breaks code that might be using attributes randomly, so it's technically a\n\n[breaking-change]"
  },
  {
    "hash": "f9aeea7cb7865a2b82e7102837daabbe549177ea",
    "author": "bors",
    "date": 1424188555,
    "message": "Auto merge of #22311 - lfairy:consistent-fmt, r=alexcrichton\n\nThis brings it in line with its namesake in `std::io`.\r\n\r\n[breaking-change]\r\n\r\nr? @aturon"
  },
  {
    "hash": "bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb",
    "author": "Chris Wong",
    "date": 1423871792,
    "message": "Rename `fmt::Writer` to `fmt::Write`\n\nThis brings it in line with its namesake in `std::io`.\n\n[breaking-change]"
  },
  {
    "hash": "d264ef2b11683337c24cfb16e0335ab386df02ab",
    "author": "Manish Goregaokar",
    "date": 1424134420,
    "message": "Rollup merge of #22313 - japaric:iter, r=aturon\n\n `IntoIterator` now has an extra associated item:\n\n``` rust\ntrait IntoIterator {\n    type Item;\n    type IntoIter: Iterator<Self=Self::Item>;\n}\n```\n\nThis lets you bind the iterator \\\"`Item`\\\" directly when writing generic functions:\n\n``` rust\n// hypothetical change, not included in this PR\nimpl Extend<T> for Vec<T> {\n    // you can now write\n    fn extend<I>(&mut self, it: I) where I: IntoIterator<Item=T> { .. }\n    // instead of\n    fn extend<I: IntoIterator>(&mut self, it: I) where I::IntoIter: Iterator<Item=T> { .. }\n}\n```\n\nThe downside is that now you have to write an extra associated type in your `IntoIterator` implementations:\n\n``` diff\n impl<T> IntoIterator for Vec<T> {\n+    type Item = T;\n     type IntoIter = IntoIter<T>;\n\n     fn into_iter(self) -> IntoIter<T> { .. }\n }\n```\n\nBecause this breaks all downstream implementations of `IntoIterator`, this is a [breaking-change]\n\n---\n\nr? @aturon"
  },
  {
    "hash": "f58a1bfa981eee4ba4d4c3c801f94772e4ab0019",
    "author": "Niko Matsakis",
    "date": 1424102137,
    "message": "Fix fallout in libsyntax from RFC 599. Clarity and efficiency seems to be mostly improved, to my eye.\nNonetheless, as this commit demonstrates, the previous commits was a [breaking-change].\n\nIn practice, breakage is focused on functions of this form:\n\n```rust\nfn foo(..., object: Box<FnMut()>)\n````\n\nwhere `FnMut()` could be any trait object type. The older scheme defaulted objects in argument\nposition so that they were bounded by a fresh lifetime:\n\n```rust\nfn foo<'a>(..., object: Box<FnMut()+'a>)\n```\n\nThis meant that the object could contain borrowed data. The newer\nscheme defaults to a lifetime bound of `'static`:\n\n```rust\nfn foo(..., object: Box<FnMut()+'static>)\n```\n\nThis means that the object cannot contain borrowed data. In some cases, the best fix\nis to stop using `Box`:\n\n```rust\nfn foo(..., object: &mut FnMut())\n```\n\nbut another option is to write an explicit annotation for the `'a`\nlifetime that used to be implicit.  Both fixes are demonstrated in\nthis commit."
  },
  {
    "hash": "16b24f15bd042c4f97e1d4826d82c992c0228684",
    "author": "Manish Goregaokar",
    "date": 1424005968,
    "message": "Rollup merge of #22285 - kmcallister:pub-macro, r=nick29581\n\n It's not clear what this means, because a macro in item position can expand to zero or more items.  For now we disallow it, which is technically a\n\n    [breaking-change]\n\nbut is landing without an RFC.  The `pub` keyword previously had no effect, which seems quite unintended.\n\nFixes #18317.\nFixes #14660."
  },
  {
    "hash": "dcd4cef119dc2fdac43b86cfb3694756d8c23f9f",
    "author": "Keegan McAllister",
    "date": 1423864089,
    "message": "Forbid `pub mymacro!();`\n\nIt's not clear what this means, because a macro in item position can expand to\nzero or more items.  For now we disallow it, which is technically a\n\n    [breaking-change]\n\nbut is landing without an RFC.  The `pub` keyword previously had no effect,\nwhich seems quite unintended.\n\nFixes #18317.\nFixes #14660."
  },
  {
    "hash": "f7870b6faa43a9e63b5575d5d9663457003a8ac5",
    "author": "Manish Goregaokar",
    "date": 1424005967,
    "message": "Rollup merge of #22339 - petrochenkov:int, r=huonw\n\n Some function signatures have changed, so this is a [breaking-change].\nIn particular, radixes and numerical values of digits are represented by `u32` now.\n\nPart of #22240"
  },
  {
    "hash": "1b86ebe25751268aa39ef2ad5e2b0e650a6f0291",
    "author": "Manish Goregaokar",
    "date": 1424005964,
    "message": "Rollup merge of #22299 - bluss:range-64-is-not-exact-size, r=alexcrichton\n\n Fixes #22047\n\n`Range<u64>` and `Range<i64>` may be longer than usize::MAX on 32-bit\nplatforms, and thus they cannot fulfill the protocol for\nExactSizeIterator. We don't want a nonobvious platform dependency in\nbasic iterator traits, so the trait impl is removed.\n\nThe logic of this change assumes that usize is at least 32-bit.\n\nThis is technically a breaking change; note that `Range<usize>` and\n`Range<isize>` are always ExactSizeIterators.\n\n[breaking-change]"
  },
  {
    "hash": "b19fda0ceb820af57f00976951dba95a3c0419aa",
    "author": "Ulrik Sverdrup",
    "date": 1423859210,
    "message": "Remove ExactSizeIterator from 64-bit ranges.\n\nFixes #22047\n\nRange<u64> and Range<i64> may be longer than usize::MAX on 32-bit\nplatforms, and thus they cannot fulfill the protocol for\nExactSizeIterator. We don't want a nonobvious platform dependency in\nbasic iterator traits, so the trait impl is removed.\n\nThe logic of this change assumes that usize is at least 32-bit.\n\nThis is technically a breaking change; note that Range<usize> and\nRange<isize> are always ExactSizeIterators.\n\n[breaking-change]"
  },
  {
    "hash": "da1a1f515fbedb32cfd954e2dc9cbf93a02453c8",
    "author": "Manish Goregaokar",
    "date": 1424004940,
    "message": "Rollup merge of #22254 - huonw:float-value--, r=aturon\n\n In `std::f32` and `std::f64`:\n\n- `MIN_VALUE` → `MIN`\n- `MAX_VALUE` → `MAX`\n- `MIN_POS_VALUE` → `MIN_POSITIVE`\n\nThis matches the corresponding integer constants.\n\n[breaking-change]"
  },
  {
    "hash": "e4a9eb95ce4a457e800571d86942561ada28304a",
    "author": "Huon Wilson",
    "date": 1423798857,
    "message": "Remove `_VALUE` from the float extremes constants.\n\nIn `std::f32` and `std::f64`:\n\n- `MIN_VALUE` → `MIN`\n- `MAX_VALUE` → `MAX`\n- `MIN_POS_VALUE` → `MIN_POSITIVE`\n\nThis matches the corresponding integer constants.\n\n[breaking-change]"
  },
  {
    "hash": "8cc3fbd41dddbb11f442a17902cd0d276aa22566",
    "author": "Manish Goregaokar",
    "date": 1424004751,
    "message": "Rollup merge of #22218 - huonw:raw-docs, r=steveklabnik,huonw\n\nThis overhauls the very meager docs that currently exist to clarify\r\nvarious understandable confusions that I've noticed, e.g. people look in\r\n`std::raw` for the \"real\" types of slices like `&[T]`, or think that\r\n`Slice<T>` refers to `[T]` (fixes #22214).\r\n\r\nThis patch takes the liberty of offering some \"style\" guidance around\r\n`raw::Slice`, since there's more restricted ways to duplicate all\r\nfunctionality connected to it: `std::slice::from_raw_parts{,_mut}` for\r\nconstruction and `.as_{,mut_}ptr` & `.len` for deconstruction.\r\n\r\nIt also deprecates the `std::raw::Closure` type which is now useless for\r\nnon-type-erased closures, and replaced by `TraitObject` for `&Fn`, `&mut\r\nFnMut` etc, so I guess it should be called a:\r\n\r\n[breaking-change]"
  },
  {
    "hash": "7a52932f4cd65f57bcc8d77f12e32066b2a9c432",
    "author": "Ulrik Sverdrup",
    "date": 1423873962,
    "message": "Make std::raw::Repr an unsafe trait\n\nThe default implementation of .repr() will call conveniently call\ntransmute_copy which should be appropriate for all implementors, but is\nmemory unsafe if used wrong.\n\nFixes #22260\n\nYou need to use `unsafe impl` to implement the Repr trait now.\n\n[breaking-change]"
  },
  {
    "hash": "5e3ae102dbeeb646e8c7d2d423cea263337a76af",
    "author": "Huon Wilson",
    "date": 1423873928,
    "message": "Dramatically expand the docs of std::raw.\n\nThis overhauls the very meager docs that currently exist to clarify\nvarious understandable confusions that I've noticed, e.g. people look in\n`std::raw` for the \"real\" types of slices like `&[T]`, or think that\n`Slice<T>` refers to `[T]` (fixes #22214).\n\nThis patch takes the liberty of offering some \"style\" guidance around\n`raw::Slice`, since there's more restricted ways to duplicate all\nfunctionality connected to it: `std::slice::from_raw_parts{,_mut}` for\nconstruction and `.as_{,mut_}ptr` & `.len` for deconstruction.\n\nIt also deprecates the `std::raw::Closure` type which is now useless for\nnon-type-erased closures, and replaced by `TraitObject` for `&Fn`, `&mut\nFnMut` etc, so I guess it should be called a:\n\n[breaking-change]"
  },
  {
    "hash": "b63cee4a11fcfecf20ed8419bc3bd6859e6496bc",
    "author": "bors",
    "date": 1423933271,
    "message": "Auto merge of #22158 - Kimundi:the_lonely_uppercase_keyword, r=pnkfelix\n\nIt is only allowed in paths now, where it will either work inside a `trait`\r\nor `impl` item, or not resolve outside of it.\r\n\r\n[breaking-change]\r\n\r\nCloses #22137"
  },
  {
    "hash": "07d00deab22dc07ffc58b8e74d45596242ca8b15",
    "author": "Marvin Löbel",
    "date": 1423775071,
    "message": "Made `Self` a keyword.\n\nIt is only allowed in paths now, where it will either work inside a `trait`\nor `impl` item, or not resolve outside of it.\n\n[breaking-change]\n\nCloses #22137"
  },
  {
    "hash": "cf636c233dfeef5abf0de8fb35e23c0a161810d2",
    "author": "bors",
    "date": 1423813481,
    "message": "Auto merge of #22093 - petrochenkov:builtin, r=pnkfelix\n\nNames of structs, enums, traits, type aliases and type parameters (i.e. all identifiers that can be used as full paths in type position) are not allowed to match the names of primitive types.\r\nSee #20427 for more information.\r\n\r\nThis is a minor [breaking-change]"
  },
  {
    "hash": "32d0dbd49a372b9d2e000587497de6ffca9e1cca",
    "author": "Kevin Butler",
    "date": 1423745708,
    "message": "librustc: Forbid partial reinitialization of uninitialized structures or\nenumerations that implement the `Drop` trait.\n\nThis breaks code like:\n\n    struct Struct {\n        f: String,\n        g: String,\n    }\n\n    impl Drop for Struct { ... }\n\n    fn main() {\n        let x = Struct { ... };\n        drop(x);\n        x.f = ...;\n    }\n\nChange this code to not create partially-initialized structures. For\nexample:\n\n    struct Struct {\n        f: String,\n        g: String,\n    }\n\n    impl Drop for Struct { ... }\n\n    fn main() {\n        let x = Struct { ... };\n        drop(x);\n        x = Struct {\n            f: ...,\n            g: ...,\n        }\n    }\n\nCloses #18571.\n\n[breaking-change]\n\n----\n\n(Joint authorship by pcwalton and Ryman; thanks all!)"
  },
  {
    "hash": "f9a1087f2730ab021d5356a5df703baeccffc020",
    "author": "Felix S. Klock II",
    "date": 1423659460,
    "message": "Feature-gate the `#[unsafe_no_drop_flag]` attribute.\n\nSee RFC 320, \"Non-zeroing dynamic drops.\"\n\nFix #22173\n\n[breaking-change]"
  }
]
